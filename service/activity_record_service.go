package service

import (
	"errors"
	"fmt"
	"strconv"

	"github.com/Kaleidoscope-Backup/healthrecord-repository/model"
	"github.com/Kaleidoscope-Backup/healthrecord-repository/util"
	"github.com/Kaleidoscope-Backup/mongo-lib/mserver"
	"github.com/globalsign/mgo/bson"
	logging "github.com/op/go-logging"
)

/*==========================================================================================
Activity Record service
==========================================================================================*/

// ActivityRecordService is for creating allergy
type ActivityRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewActivityRecordService creates a new Acivity record service ...
func NewActivityRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *ActivityRecordService {
	return &ActivityRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *ActivityRecordService) FindByID(id string) (*model.ActivityRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching ActivityRecord(if any) from Mongo
	p, err := u.dal.Get(id, &model.ActivityRecord{})
	if err != nil {
		return nil, err
	}

	var activity *model.ActivityRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &activity)

	return activity, nil
}

// FindByConsumerID ..
func (u *ActivityRecordService) FindByConsumerID(id string) (*[]*model.ActivityRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching ActivityRecord (if any) from Mongo
	mrArr, err := FindHealthRecordsByConsumerID(id, &model.ActivityRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var activityRecordArr []*model.ActivityRecord
	for _, ar := range mrArr {
		var activityRecord *model.ActivityRecord
		bsonBytes, _ := bson.Marshal(ar)
		bson.Unmarshal(bsonBytes, &activityRecord)
		activityRecordArr = append(activityRecordArr, activityRecord)
	}

	return &activityRecordArr, nil
}

// FindByParams ...
func (u *ActivityRecordService) FindByParams(param *model.ActivityRecordQueryParam) (*[]*model.ActivityRecord, error) {
	if param == nil || param.ConsumerID == "" {
		return nil, errors.New("Missing required parameter ")
	}

	var params map[string]string
	params = map[string]string{}

	params["consumerID"] = param.ConsumerID

	if param.ActivityType != nil {
		params["activityType"] = string(*param.ActivityType)
	}

	if param.Sort != nil {
		if *param.Sort == model.LAST_UPDATED {
			params["_sort:desc"] = "_lastUpdated"
		}
	}

	if param.Limit != nil {
		params["_count"] = strconv.Itoa(int(*param.Limit))
	}

	//find the matching lab result Record (if any) from Mongo
	actArr, err := FindRecords(&params, &model.ActivityRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var activityArr []*model.ActivityRecord
	for _, actr := range actArr {
		var activityRecord *model.ActivityRecord
		bsonBytes, _ := bson.Marshal(actr)
		bson.Unmarshal(bsonBytes, &activityRecord)
		activityArr = append(activityArr, activityRecord)
	}

	return &activityArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateActivityRecord will create a new activity in Mongo using the Data Access Layer ...
func (u *ActivityRecordService) CreateActivityRecord(activityRecord *model.ActivityRecord) (*model.ActivityRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	if &activityRecord.ActivityType == nil {
		return nil, errors.New("Missing a required field ActivityType aborting before saving to the DB")
	}

	hError := ValidateHealthRecord(&activityRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Allergy Record Error : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(activityRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For Allergy Record Error : %v", err)
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &activityRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(activityRecord, activityRecord.ConsumerID, id)
	return activityRecord, nil
}

// Export ...
func (u *ActivityRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	activityRecords, _ := u.FindByConsumerID(id)

	if activityRecords != nil {
		activityRecordsIterable := *activityRecords
		records := []model.HealthRecordExportElement{}
		for _, activityRecord := range activityRecordsIterable {
			recordElements, _ := u.ExportElements(activityRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *ActivityRecordService) ExportElements(activityRecord *model.ActivityRecord) (*[]model.HealthRecordExportElement, error) {
	if activityRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	// all records array
	records := []model.HealthRecordExportElement{}

	// calories
	if activityRecord.Calories != nil {
		value := model.Value{}
		record := model.HealthRecordExportElement{}

		value.ValueType = model.DECIMAL
		value.ValueDecimal = activityRecord.Calories
		value.Unit = activityRecord.CaloryUnit
		record.Name = "Calories"
		record.RecordID = util.UUID()
		record.Value = value
		record.TimeStamp = activityRecord.Occurred
		record.ConsumerID = activityRecord.ConsumerID

		//populate the record
		records = append(records, record)
	}

	// steps
	if activityRecord.Distance != nil {
		value := model.Value{}
		record := model.HealthRecordExportElement{}

		value.ValueQuantity = activityRecord.Distance
		value.ValueType = model.QUANTITY
		value.Unit = activityRecord.DistanceUnit
		record.Name = "Distance"
		record.RecordID = util.UUID()
		record.Value = value
		record.TimeStamp = activityRecord.Occurred
		record.ConsumerID = activityRecord.ConsumerID

		//populate the record
		records = append(records, record)
	}

	return &records, nil
}

// ExportToKnowledgeGraph ...
func (u *ActivityRecordService) ExportToKnowledgeGraph(activityRecord *model.ActivityRecord) (*[]model.HealthKnowledgeRecord, error) {
	if activityRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	// all records array
	nodes := []model.HealthKnowledgeRecord{}

	// health record
	record := model.HealthKnowledgeRecord{}
	record.ProfileID = activityRecord.ConsumerID
	record.TimeStamp = &activityRecord.HealthRecord.Meta.LastUpdated.Time
	record.EntityType = string(model.ACTIVITY)
	values := []model.Attribute{}

	// calories
	if activityRecord.Calories != nil {
		attr := model.Attribute{}
		value := model.Value{}

		value.ValueDecimal = activityRecord.Calories
		value.ValueType = model.DECIMAL
		attr.Name = "Calories"
		attr.Value = value

		//populate the record
		values = append(values, attr)
	}

	// steps
	if activityRecord.Distance != nil {
		attr := model.Attribute{}
		value := model.Value{}

		value.ValueQuantity = activityRecord.Distance
		value.ValueType = model.QUANTITY
		attr.Name = "Distance"
		attr.Value = value

		//populate the record
		values = append(values, attr)
	}

	record.Values = &values
	nodes = append(nodes, record)
	return &nodes, nil
}
