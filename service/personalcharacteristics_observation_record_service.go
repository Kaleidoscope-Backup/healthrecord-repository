package service

import (
	"errors"
	"fmt"

	"github.com/Kaleidoscope-Backup/healthrecord-repository/model"
	"github.com/Kaleidoscope-Backup/healthrecord-repository/util"
	"github.com/Kaleidoscope-Backup/mongo-lib/mserver"
	"github.com/globalsign/mgo/bson"
	logging "github.com/op/go-logging"
)

/*==========================================================================================
PersonalCharacteristicsObservationRecordService service
==========================================================================================*/

// PersonalCharacteristicsObservationRecordService is for creating habit
type PersonalCharacteristicsObservationRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewPersonalCharacteristicsObservationRecordService creates a new PersonalCharacteristicsObservationRecord service that has all calls to the database, queries and mutations via the Data Access Layer
func NewPersonalCharacteristicsObservationRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *PersonalCharacteristicsObservationRecordService {
	return &PersonalCharacteristicsObservationRecordService{dal: dal, log: log}
}

// FindByConsumerID ..
func (u *PersonalCharacteristicsObservationRecordService) FindByConsumerID(id string) (*[]*model.PersonalCharacteristicsObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching PersonalCharacteristicsObservationRecord (if any) from Mongo
	pcorArr, err := FindHealthRecordsByConsumerID(id, &model.PersonalCharacteristicsObservationRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var personalCharacteristicsObservationRecordArr []*model.PersonalCharacteristicsObservationRecord
	for _, pcor := range pcorArr {
		var personalCharacteristicsObservationRecord *model.PersonalCharacteristicsObservationRecord
		bsonBytes, _ := bson.Marshal(pcor)
		bson.Unmarshal(bsonBytes, &personalCharacteristicsObservationRecord)
		personalCharacteristicsObservationRecordArr = append(personalCharacteristicsObservationRecordArr, personalCharacteristicsObservationRecord)
	}

	return &personalCharacteristicsObservationRecordArr, nil
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *PersonalCharacteristicsObservationRecordService) FindByID(id string) (*model.PersonalCharacteristicsObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching family member history Record (if any) from Mongo
	p, err := u.dal.Get(id, &model.PersonalCharacteristicsObservationRecord{})
	if err != nil {
		return nil, err
	}

	var personalCharacteristicsObservationRecord *model.PersonalCharacteristicsObservationRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &personalCharacteristicsObservationRecord)

	return personalCharacteristicsObservationRecord, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreatePersonalCharacteristicsObservationRecord will create a new personal characteristic observation record in Mongo using the Data Access Layer ...
func (u *PersonalCharacteristicsObservationRecordService) CreatePersonalCharacteristicsObservationRecord(personalCharacteristicsObservationRecord *model.PersonalCharacteristicsObservationRecord) (*model.PersonalCharacteristicsObservationRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	hError := ValidateHealthRecord(&personalCharacteristicsObservationRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Medication Record Error : %v", hError)
		return nil, hError
	}

	var observations []model.PersonalCharacteristicsObservation
	observations = *personalCharacteristicsObservationRecord.Observations
	if len(observations) <= 0 {
		return nil, errors.New("Missing a required field - at least one observation should be defined - aborting before saving to the DB")
	}

	for i := 0; i < len(observations); i++ {
		var observation model.PersonalCharacteristicsObservation
		observation = observations[i]
		if &observation.Type == nil || observation.Value == "" {
			return nil, errors.New("Missing a required field Member Name or Condition aborting before saving to the DB")
		}
	}

	id, err := u.dal.Post(personalCharacteristicsObservationRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For Addiction Record Error : %v", err)
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &personalCharacteristicsObservationRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(personalCharacteristicsObservationRecord, personalCharacteristicsObservationRecord.ConsumerID, id)
	return personalCharacteristicsObservationRecord, nil
}

// Export ...
func (u *PersonalCharacteristicsObservationRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	personalCharacteristicsObservationRecords, _ := u.FindByConsumerID(id)
	if personalCharacteristicsObservationRecords != nil {
		personalCharacteristicsObservationRecordsIterable := *personalCharacteristicsObservationRecords
		records := []model.HealthRecordExportElement{}
		for _, personalCharacteristicsObservationRecord := range personalCharacteristicsObservationRecordsIterable {
			recordElements, _ := u.ExportElements(personalCharacteristicsObservationRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *PersonalCharacteristicsObservationRecordService) ExportElements(personalCharacteristicsObservationRecord *model.PersonalCharacteristicsObservationRecord) (*[]model.HealthRecordExportElement, error) {
	if personalCharacteristicsObservationRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	if personalCharacteristicsObservationRecord.Observations == nil {
		return nil, errors.New("Cannot export. No observations defined")
	}

	// all records array
	records := []model.HealthRecordExportElement{}
	observationRecords := *personalCharacteristicsObservationRecord.Observations

	for _, observationRecord := range observationRecords {
		//value
		value := model.Value{}
		value.ValueType = model.TEXT
		value.ValueText = &observationRecord.Value

		// populate record
		record := model.HealthRecordExportElement{}
		record.Name = string(observationRecord.Type)
		record.TimeStamp = personalCharacteristicsObservationRecord.Occurred
		record.Value = value
		record.RecordID = util.UUID()
		record.ConsumerID = personalCharacteristicsObservationRecord.ConsumerID
		record.Location = personalCharacteristicsObservationRecord.Location

		//populate the record
		records = append(records, record)
	}

	return &records, nil
}
