package service

import (
	"errors"
	"fmt"

	"github.com/globalsign/mgo/bson"
	logging "github.com/op/go-logging"
	"gitlab.com/karte/healthrecord-repository/model"
	"gitlab.com/karte/healthrecord-repository/util"
	"gitlab.com/karte/mongo-lib/mserver"
)

/*==========================================================================================
ImmunizationRecordService service
==========================================================================================*/

//ImmunizationRecordService is for immunization record
type ImmunizationRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

//NewImmunizationRecordService ...
func NewImmunizationRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *ImmunizationRecordService {
	return &ImmunizationRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

//FindByID ..
func (u *ImmunizationRecordService) FindByID(id string) (*model.ImmunizationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching  record (if any) from Mongo
	p, err := u.dal.Get(id, &model.ImmunizationRecord{})
	if err != nil {
		return nil, err
	}

	var immunizationRecord *model.ImmunizationRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &immunizationRecord)

	return immunizationRecord, nil
}

//FindByConsumerID ..
func (u *ImmunizationRecordService) FindByConsumerID(id string) (*[]*model.ImmunizationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching ImmunizationRecord (if any) from Mongo
	imrArr, err := FindHealthRecordsByConsumerID(id, &model.ImmunizationRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var immunizationRecordArr []*model.ImmunizationRecord
	for _, imr := range imrArr {
		var immunizationRecord *model.ImmunizationRecord
		bsonBytes, _ := bson.Marshal(imr)
		bson.Unmarshal(bsonBytes, &immunizationRecord)
		immunizationRecordArr = append(immunizationRecordArr, immunizationRecord)
	}

	return &immunizationRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

//CreateImmunizationRecord ...
func (u *ImmunizationRecordService) CreateImmunizationRecord(immunizationRecord *model.ImmunizationRecord) (*model.ImmunizationRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	hError := ValidateHealthRecord(&immunizationRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For lab result Record Error : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(immunizationRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For Record Error : %v", err)
		return nil, err
	}

	immunizationRecord.Id = id
	errHr := u.dal.PostWithID(id, &immunizationRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(immunizationRecord, immunizationRecord.ConsumerID, id)
	return immunizationRecord, nil
}

// Export ...
func (u *ImmunizationRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	immunizationRecords, _ := u.FindByConsumerID(id)
	if immunizationRecords != nil {
		immunizationRecordsIterable := *immunizationRecords
		records := []model.HealthRecordExportElement{}
		for _, immunizationRecord := range immunizationRecordsIterable {
			recordElements, _ := u.ExportElements(immunizationRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *ImmunizationRecordService) ExportElements(immunizationRecord *model.ImmunizationRecord) (*[]model.HealthRecordExportElement, error) {
	if immunizationRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	// All records array
	records := []model.HealthRecordExportElement{}

	// Populate record
	recordID := util.UUID()

	// Vaccine
	valueVaccine := model.Value{}
	valueVaccine.ValueType = model.TEXT
	valueVaccine.ValueText = &immunizationRecord.Vaccine

	// Populate record
	recordVaccine := model.HealthRecordExportElement{}
	recordVaccine.Name = "Vaccine"
	recordVaccine.TimeStamp = immunizationRecord.Occurred
	recordVaccine.Value = valueVaccine
	recordVaccine.RecordID = recordID
	recordVaccine.ConsumerID = immunizationRecord.ConsumerID

	// Populate the record
	records = append(records, recordVaccine)

	// Route
	valueRoute := model.Value{}
	valueRoute.ValueType = model.TEXT
	route := string(*immunizationRecord.Route)
	valueRoute.ValueText = &route

	// Populate record
	recordRoute := model.HealthRecordExportElement{}
	recordRoute.Name = "Administrative Route"
	recordRoute.TimeStamp = immunizationRecord.Occurred
	recordRoute.Value = valueVaccine
	recordRoute.RecordID = recordID
	recordRoute.ConsumerID = immunizationRecord.ConsumerID

	// Populate the record
	records = append(records, recordRoute)

	return &records, nil
}
