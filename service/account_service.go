package service

import (
	"errors"
	"time"

	"github.com/Kaleidoscope-Backup/healthrecord-repository/model"
	"github.com/Kaleidoscope-Backup/mongo-lib/mserver"
	"github.com/globalsign/mgo/bson"
	logging "github.com/op/go-logging"
	"github.com/pquerna/otp"
	"github.com/pquerna/otp/totp"
	"golang.org/x/crypto/bcrypt"
)

/*==========================================================================================
Account service
==========================================================================================*/

// AccountService is for creating account
type AccountService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewAccountService creates a new Account service that has all calls to the database, queries and mutations via the Data Access Layer
func NewAccountService(dal mserver.DataAccessLayer, log *logging.Logger) *AccountService {
	return &AccountService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *AccountService) FindByID(id string) (*model.Account, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Account (if any) from Mongo
	p, err := u.dal.Get(id, &model.Account{})
	if err != nil {
		return nil, err
	}

	var account *model.Account
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &account)

	return account, nil
}

// FindByUserName ...
func (u *AccountService) FindByUserName(userName string) (*model.Account, error) {
	if userName == "" {
		return nil, errors.New("Missing parameter - name input param must be specififed")
	}

	var params map[string]string
	params = map[string]string{}

	params["userName"] = userName

	//find the matching app Record (if any) from Mongo
	accArr, err := FindRecords(&params, &model.Account{}, u.dal)
	if err != nil {
		return nil, err
	}

	var account *model.Account
	for _, accr := range accArr {
		bsonBytes, _ := bson.Marshal(accr)
		bson.Unmarshal(bsonBytes, &account)
	}

	return account, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateAccount will create a new account in Mongo using the Data Access Layer
func (u *AccountService) CreateAccount(accountID string, accountUserName string, accountPassword string) (*model.Account, error) {
	//validate required fields (besides Id which is generated by Post)
	if accountPassword == "" ||
		accountUserName == "" ||
		accountID == "" {

		return nil, errors.New("Missing a required field: aborting before saving to the DB")
	}

	account := &model.Account{}
	account.AccountStatus = model.WAITING_VERIFICATION
	account.ActorID = accountID
	account.Password = accountPassword
	account.UserName = accountUserName

	// Generate OTP
	key, err := totp.Generate(totp.GenerateOpts{
		Issuer:      "iHealthOmics",
		AccountName: accountUserName,
		Digits:      otp.DigitsSix,
	})
	if err != nil {
		return nil, err
	}

	account.Otp = key.Secret()

	// Generate OTP code now
	code, err := totp.GenerateCode(key.Secret(), time.Now().UTC())
	account.OtpDigit = code

	// Salt and hash the password using the bcrypt algorithm
	// The second argument is the cost of hashing, which we arbitrarily set as 8 (this value can be more or less, depending on the computing power you wish to utilize)
	hashedPassword, er := bcrypt.GenerateFromPassword([]byte(account.Password), bcrypt.MinCost)
	if er != nil {
		return nil, er
	}

	// Convert to string and store
	account.Password = string(hashedPassword)

	_, erAcc := u.dal.Post(account)
	if erAcc != nil {
		return nil, erAcc
	}

	return account, nil
}

// Verify -- Verifies the OTP
func (u *AccountService) Verify(accountUserName string, accountSecret string) (bool, error) {
	//validate required fields (besides Id which is generated by Post)
	if accountUserName == "" ||
		accountSecret == "" {

		return false, errors.New("Missing a required field: aborting before saving to the DB")
	}

	account, err := u.FindByUserName(accountUserName)
	if account == nil || err != nil {
		return false, err
	}

	valid := totp.Validate(accountSecret, account.Otp)

	if valid == true {
		account.AccountStatus = model.ACTIVE
		_, er := u.dal.Put(account.Id, account)
		if er != nil {
			return false, er
		}
		return true, nil
	}

	return false, nil
}

// GenerateOTP -- Generate OTP again
func (u *AccountService) GenerateOTP(accountUserName string) (*string, error) {
	//validate required fields (besides Id which is generated by Post)
	if accountUserName == "" {
		return nil, errors.New("Missing a required field: aborting before saving to the DB")
	}

	account, err := u.FindByUserName(accountUserName)
	if account == nil || err != nil {
		return nil, err
	}

	// Generate OTP code now
	code, er := totp.GenerateCode(account.Otp, time.Now().UTC())
	if er != nil {
		return nil, er
	}
	return &code, nil
}
