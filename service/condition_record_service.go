package service

import (
	"errors"
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/karte/healthrecord-repository/model"
	"github.com/karte/healthrecord-repository/util"
	"github.com/karte/mongo-lib/mserver"
	logging "github.com/op/go-logging"
)

/*==========================================================================================
ConditionRecord Record service
==========================================================================================*/

// ConditionRecordService is for creating allergy
type ConditionRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewConditionRecordService creates a new ConditionRecord service that has all calls to the database, queries and mutations via the Data Access Layer
func NewConditionRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *ConditionRecordService {
	return &ConditionRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *ConditionRecordService) FindByID(id string) (*model.ConditionRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching ConditionRecord (if any) from Mongo
	p, err := u.dal.Get(id, &model.ConditionRecord{})
	if err != nil {
		return nil, err
	}

	var condition *model.ConditionRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &condition)

	return condition, nil
}

// FindByConsumerID ..
func (u *ConditionRecordService) FindByConsumerID(id string) (*[]*model.ConditionRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Medication Record (if any) from Mongo
	mrArr, err := FindHealthRecordsByConsumerID(id, &model.ConditionRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var conditionRecordArr []*model.ConditionRecord
	for _, ar := range mrArr {
		var conditionRecord *model.ConditionRecord
		bsonBytes, _ := bson.Marshal(ar)
		bson.Unmarshal(bsonBytes, &conditionRecord)
		conditionRecordArr = append(conditionRecordArr, conditionRecord)
	}

	return &conditionRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateConditionRecord will create a new allergy in Mongo using the Data Access Layer ...
func (u *ConditionRecordService) CreateConditionRecord(conditionRecord *model.ConditionRecord) (*model.ConditionRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	if &conditionRecord.Status == nil {
		return nil, errors.New("Missing a required field ConditionStatus aborting before saving to the DB")
	}

	hError := ValidateHealthRecord(&conditionRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Allergy Record Error : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(conditionRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For Condition Record Error : %v", err)
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &conditionRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(conditionRecord, conditionRecord.ConsumerID, id)
	return conditionRecord, nil
}

// Export ...
func (u *ConditionRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	conditionRecords, _ := u.FindByConsumerID(id)
	if conditionRecords != nil {
		conditionRecordsIterable := *conditionRecords
		records := []model.HealthRecordExportElement{}
		for _, conditionRecord := range conditionRecordsIterable {
			recordElements, _ := u.ExportElements(conditionRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *ConditionRecordService) ExportElements(condition *model.ConditionRecord) (*[]model.HealthRecordExportElement, error) {
	if condition == nil {
		return nil, errors.New("Missing parameter")
	}

	//Location
	location := condition.Location

	// all records array
	records := []model.HealthRecordExportElement{}
	recordID := util.UUID()

	// Status
	valueStatus := model.Value{}
	valueStatus.ValueType = model.TEXT
	status := string(condition.Status)
	valueStatus.ValueText = &status

	// Record
	recordStatus := model.HealthRecordExportElement{}
	recordStatus.Name = "Condition Status"
	recordStatus.TimeStamp = condition.Occurred
	recordStatus.ConsumerID = condition.ConsumerID
	recordStatus.RecordID = recordID
	recordStatus.Value = valueStatus
	recordStatus.Location = location

	//populate the record
	records = append(records, recordStatus)

	// Severity
	if condition.Severity != nil {
		value := model.Value{}
		value.ValueType = model.TEXT
		severity := string(*condition.Severity)
		value.ValueText = &severity

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Condition Status"
		record.TimeStamp = condition.Occurred
		record.ConsumerID = condition.ConsumerID
		record.RecordID = recordID
		record.Value = value
		record.Location = location

		//populate the record
		records = append(records, record)

	}

	// Body site
	if condition.BodySite != nil {
		value := model.Value{}
		value.ValueType = model.TEXT
		value.ValueText = condition.BodySite

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Condition Body Site"
		record.TimeStamp = condition.Occurred
		record.ConsumerID = condition.ConsumerID
		record.RecordID = recordID
		record.Value = value
		record.Location = location

		//populate the record
		records = append(records, record)

	}

	// Stage assesment
	if condition.StageAssesment != nil {
		value := model.Value{}
		value.ValueType = model.TEXT
		value.ValueText = condition.StageAssesment

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Condition Stage Assesment"
		record.TimeStamp = condition.Occurred
		record.ConsumerID = condition.ConsumerID
		record.RecordID = recordID
		record.Value = value
		record.Location = location

		//populate the record
		records = append(records, record)

	}

	//Onset
	if condition.Onset != nil {

		if condition.Onset.Note != nil {
			value := model.Value{}
			value.ValueType = model.TEXT
			value.ValueText = condition.Onset.Note

			// Record
			record := model.HealthRecordExportElement{}
			record.Name = "Condition Onset Note"
			record.TimeStamp = condition.Occurred
			record.ConsumerID = condition.ConsumerID
			record.RecordID = recordID
			record.Value = value
			record.Location = location

			//populate the record
			records = append(records, record)
		}

		if condition.Onset.Age != nil {
			value := model.Value{}
			value.ValueType = model.TEXT
			value.ValueText = condition.Onset.Age

			// Record
			record := model.HealthRecordExportElement{}
			record.Name = "Condition Onset Age"
			record.TimeStamp = condition.Occurred
			record.ConsumerID = condition.ConsumerID
			record.RecordID = recordID
			record.Value = value
			record.Location = location

			//populate the record
			records = append(records, record)
		}

	}

	//Abatement
	if condition.Abatement != nil {

		if condition.Abatement.Note != nil {
			value := model.Value{}
			value.ValueType = model.TEXT
			value.ValueText = condition.Abatement.Note

			// Record
			record := model.HealthRecordExportElement{}
			record.Name = "Condition Abatement Note"
			record.TimeStamp = condition.Occurred
			record.ConsumerID = condition.ConsumerID
			record.RecordID = recordID
			record.Value = value
			record.Location = location

			//populate the record
			records = append(records, record)
		}

		if condition.Onset.Age != nil {
			value := model.Value{}
			value.ValueType = model.TEXT
			value.ValueText = condition.Abatement.Age

			// Record
			record := model.HealthRecordExportElement{}
			record.Name = "Condition Abatement Age"
			record.TimeStamp = condition.Occurred
			record.ConsumerID = condition.ConsumerID
			record.RecordID = recordID
			record.Value = value
			record.Location = location

			//populate the record
			records = append(records, record)
		}

	}

	//Symptom
	if condition.Evidence != nil {
		evidence := *condition.Evidence
		for i := 0; i < len(evidence); i++ {
			symptom := evidence[i]
			value := model.Value{}
			value.ValueType = model.TEXT
			value.ValueText = &symptom.Name

			// Record
			record := model.HealthRecordExportElement{}
			record.Name = "Condition Symptom"
			record.TimeStamp = condition.Occurred
			record.ConsumerID = condition.ConsumerID
			record.RecordID = recordID
			record.Value = value
			record.Location = location

			//populate the record
			records = append(records, record)
		}
	}

	return &records, nil

}
