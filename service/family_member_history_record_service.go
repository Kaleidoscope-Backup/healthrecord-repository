package service

import (
	"errors"
	"fmt"

	"github.com/Kaleidoscope-Backup/healthrecord-repository/model"
	"github.com/Kaleidoscope-Backup/healthrecord-repository/util"
	"github.com/Kaleidoscope-Backup/mongo-lib/mserver"
	"github.com/globalsign/mgo/bson"
	logging "github.com/op/go-logging"
)

/*==========================================================================================
FamilyMemberHistoryRecordService service
==========================================================================================*/

// FamilyMemberHistoryRecordService is for creating habit
type FamilyMemberHistoryRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewFamilyMemberHistoryRecordService creates a new FamilyMemberHistoryRecord service that has all calls to the database, queries and mutations via the Data Access Layer
func NewFamilyMemberHistoryRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *FamilyMemberHistoryRecordService {
	return &FamilyMemberHistoryRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *FamilyMemberHistoryRecordService) FindByID(id string) (*model.FamilyMemberHistoryRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching family member history Record (if any) from Mongo
	p, err := u.dal.Get(id, &model.FamilyMemberHistoryRecord{})
	if err != nil {
		return nil, err
	}

	var familyMemberHistory *model.FamilyMemberHistoryRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &familyMemberHistory)

	return familyMemberHistory, nil
}

// FindByConsumerID ..
func (u *FamilyMemberHistoryRecordService) FindByConsumerID(id string) (*[]*model.FamilyMemberHistoryRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Medication Record (if any) from Mongo
	fmsArr, err := FindHealthRecordsByConsumerID(id, &model.FamilyMemberHistoryRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var familyMemberHistoryRecordArr []*model.FamilyMemberHistoryRecord
	for _, fmsr := range fmsArr {
		var familyMemberHistoryRecord *model.FamilyMemberHistoryRecord
		bsonBytes, _ := bson.Marshal(fmsr)
		bson.Unmarshal(bsonBytes, &familyMemberHistoryRecord)
		familyMemberHistoryRecordArr = append(familyMemberHistoryRecordArr, familyMemberHistoryRecord)
	}

	return &familyMemberHistoryRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateFamilyMemberHistoryRecord will create a new family member history record in Mongo using the Data Access Layer ...
func (u *FamilyMemberHistoryRecordService) CreateFamilyMemberHistoryRecord(familyMemberHistory *model.FamilyMemberHistoryRecord) (*model.FamilyMemberHistoryRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	hError := ValidateHealthRecord(&familyMemberHistory.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Medication Record Error : %v", hError)
		return nil, hError
	}

	var memberHistory []model.FamilyMemberHistory
	memberHistory = *familyMemberHistory.MemberHistory
	if len(memberHistory) <= 0 {
		return nil, errors.New("Missing a required field - at least one member history should be defined - aborting before saving to the DB")
	}

	for i := 0; i < len(memberHistory); i++ {
		var fmh model.FamilyMemberHistory
		fmh = memberHistory[i]
		if fmh.Condition == "" || fmh.MemberName == "" {
			return nil, errors.New("Missing a required field Member Name or Condition aborting before saving to the DB")
		}
	}

	id, err := u.dal.Post(familyMemberHistory)
	if err != nil {
		fmt.Printf("DB Create Failed For Addiction Record Error : %v", err)
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &familyMemberHistory.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(familyMemberHistory, familyMemberHistory.ConsumerID, id)
	return familyMemberHistory, nil
}

// Export ...
func (u *FamilyMemberHistoryRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	familyMemberHistoryRecords, _ := u.FindByConsumerID(id)
	if familyMemberHistoryRecords != nil {
		familyMemberHistoryRecordsIterable := *familyMemberHistoryRecords
		records := []model.HealthRecordExportElement{}
		for _, familyMemberHistoryRecord := range familyMemberHistoryRecordsIterable {
			recordElements, _ := u.ExportElements(familyMemberHistoryRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *FamilyMemberHistoryRecordService) ExportElements(familyMemberHistory *model.FamilyMemberHistoryRecord) (*[]model.HealthRecordExportElement, error) {
	if familyMemberHistory == nil {
		return nil, errors.New("Missing parameter")
	}

	// All records array
	records := []model.HealthRecordExportElement{}
	memberHistory := *familyMemberHistory.MemberHistory

	for _, member := range memberHistory {

		// Generate record ID
		recordID := util.UUID()

		// Gender
		if member.Gender != nil {
			// Value gender
			valueGender := model.Value{}
			valueGender.ValueType = model.TEXT
			gender := string(*member.Gender)
			valueGender.ValueText = &gender

			// Populate record gender
			recordGender := model.HealthRecordExportElement{}
			recordGender.Name = "Famility Member Gender"
			recordGender.TimeStamp = familyMemberHistory.Occurred
			recordGender.Value = valueGender
			recordGender.RecordID = recordID
			recordGender.ConsumerID = familyMemberHistory.ConsumerID

			//populate the record
			records = append(records, recordGender)
		}

		// Relationship
		if member.Relationship != nil {
			// Value relationship
			valueRelationship := model.Value{}
			valueRelationship.ValueType = model.TEXT
			valueRelationship.ValueText = member.Relationship

			// Populate record relationship
			recordRelationship := model.HealthRecordExportElement{}
			recordRelationship.Name = "Famility Member Relationship"
			recordRelationship.TimeStamp = familyMemberHistory.Occurred
			recordRelationship.Value = valueRelationship
			recordRelationship.RecordID = recordID
			recordRelationship.ConsumerID = familyMemberHistory.ConsumerID

			//populate the record
			records = append(records, recordRelationship)
		}

		// Value condition
		valueCondition := model.Value{}
		valueCondition.ValueType = model.TEXT
		valueCondition.ValueText = &member.Condition

		// Populate record condition
		recordCondition := model.HealthRecordExportElement{}
		recordCondition.Name = "Famility Member Condition"
		recordCondition.TimeStamp = familyMemberHistory.Occurred
		recordCondition.Value = valueCondition
		recordCondition.RecordID = recordID
		recordCondition.ConsumerID = familyMemberHistory.ConsumerID

		//populate the record
		records = append(records, recordCondition)
	}

	return &records, nil
}
