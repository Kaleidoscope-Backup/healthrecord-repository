package service

import (
	"errors"
	"fmt"

	"github.com/Kaleidoscope-Backup/healthrecord-repository/model"
	"github.com/Kaleidoscope-Backup/mongo-lib/mserver"
	"github.com/globalsign/mgo/bson"
	"github.com/op/go-logging"
)

/*==========================================================================================
ImagingResultObservationRecordService service
==========================================================================================*/

// ImagingResultObservationRecordService is for creating habit
type ImagingResultObservationRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewImagingResultObservationRecordService creates a new ImagingResultObservationRecord service that has all calls to the database, queries and mutations via the Data Access Layer
func NewImagingResultObservationRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *ImagingResultObservationRecordService {
	return &ImagingResultObservationRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *ImagingResultObservationRecordService) FindByID(id string) (*model.ImagingResultObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching imaging observationRecord (if any) from Mongo
	p, err := u.dal.Get(id, &model.ImagingResultObservationRecord{})
	if err != nil {
		return nil, err
	}

	var imagingResultObservationRecord *model.ImagingResultObservationRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &imagingResultObservationRecord)

	return imagingResultObservationRecord, nil
}

// FindByConsumerID ..
func (u *ImagingResultObservationRecordService) FindByConsumerID(id string) (*[]*model.ImagingResultObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching imagingResultObservationRecord (if any) from Mongo
	iroArr, err := FindHealthRecordsByConsumerID(id, &model.ImagingResultObservationRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var imagingResultObservationRecordArr []*model.ImagingResultObservationRecord
	for _, iror := range iroArr {
		var imagingResultObservationRecord *model.ImagingResultObservationRecord
		bsonBytes, _ := bson.Marshal(iror)
		bson.Unmarshal(bsonBytes, &imagingResultObservationRecord)
		imagingResultObservationRecordArr = append(imagingResultObservationRecordArr, imagingResultObservationRecord)
	}

	return &imagingResultObservationRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateImagingResultObservationRecord will create a new imaging observation record in Mongo using the Data Access Layer ...
func (u *ImagingResultObservationRecordService) CreateImagingResultObservationRecord(imagingResultObservationRecord *model.ImagingResultObservationRecord) (*model.ImagingResultObservationRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	hError := ValidateHealthRecord(&imagingResultObservationRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Medication Record Error : %v", hError)
		return nil, hError
	}

	var observations []model.Attachment
	observations = *imagingResultObservationRecord.Observations
	if len(observations) <= 0 {
		return nil, errors.New("Missing a required field - at least one observation should be defined - aborting before saving to the DB")
	}

	for i := 0; i < len(observations); i++ {
		var observation model.Attachment
		observation = observations[i]
		if &observation.ContentType == nil || observation.URL == "" || observation.Title == "" {
			return nil, errors.New("Missing a required field Member Name or Condition aborting before saving to the DB")
		}
	}

	id, err := u.dal.Post(imagingResultObservationRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For Addiction Record Error : %v", err)
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &imagingResultObservationRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(imagingResultObservationRecord, imagingResultObservationRecord.ConsumerID, id)
	return imagingResultObservationRecord, nil
}
