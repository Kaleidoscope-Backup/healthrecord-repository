package service

import (
	"errors"
	"fmt"

	"github.com/Kaleidoscope-Backup/healthrecord-repository/model"
	"github.com/Kaleidoscope-Backup/healthrecord-repository/util"
	"github.com/Kaleidoscope-Backup/mongo-lib/mserver"
	logging "github.com/op/go-logging"
	"gopkg.in/mgo.v2/bson"
)

// VitalObservationRecordService ...
type VitalObservationRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewVitalObservationRecordService ...
func NewVitalObservationRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *VitalObservationRecordService {
	return &VitalObservationRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ...
func (u *VitalObservationRecordService) FindByID(id string) (*model.VitalObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}
	//find the matching Vital (if any) from Mongo
	hr, err := u.dal.Get(id, &model.VitalObservationRecord{})
	if err != nil {
		return nil, err
	}

	//we need to unmarshal the result from type bson.M{} to model.Vital
	//Convert BSON (byte) to JSON Fields
	var vital *model.VitalObservationRecord
	bsonBytes, _ := bson.Marshal(hr)
	bson.Unmarshal(bsonBytes, &vital)

	return vital, nil
}

// FindByConsumerID ..
func (u *VitalObservationRecordService) FindByConsumerID(id string) (*[]*model.VitalObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching VitalObservationRecord (if any) from Mongo
	vrArr, err := FindHealthRecordsByConsumerID(id, &model.VitalObservationRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var vitalObservationRecordArr []*model.VitalObservationRecord
	for _, vr := range vrArr {
		var vitalObservationRecord *model.VitalObservationRecord
		bsonBytes, _ := bson.Marshal(vr)
		bson.Unmarshal(bsonBytes, &vitalObservationRecord)
		vitalObservationRecordArr = append(vitalObservationRecordArr, vitalObservationRecord)
	}

	return &vitalObservationRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateVitalObservationRecord ...
func (u *VitalObservationRecordService) CreateVitalObservationRecord(vital *model.VitalObservationRecord) (*model.VitalObservationRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	hError := ValidateHealthRecord(&vital.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Medication Record Error : %v", hError)
		return nil, hError
	}

	var observations []model.Vital
	observations = *vital.Observations
	if len(observations) <= 0 {
		return nil, errors.New("Missing a required field - at least one observation should be defined - aborting before saving to the DB")
	}

	for i := 0; i < len(observations); i++ {
		var observation model.Vital
		observation = observations[i]
		if &observation.VitalType == nil || &observation.Value == nil || observation.Unit == "" {
			return nil, errors.New("Missing a required field Member Name or Condition aborting before saving to the DB")
		}
	}

	id, err := u.dal.Post(vital)
	if err != nil {
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &vital.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	//PostRecord(vital, vital.ConsumerID, id)
	return vital, nil
}

// Export ...
func (u *VitalObservationRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	vitalRecords, _ := u.FindByConsumerID(id)
	if vitalRecords != nil {
		vitalRecordsIterable := *vitalRecords
		records := []model.HealthRecordExportElement{}
		for _, vitalRecord := range vitalRecordsIterable {
			recordElements, _ := u.ExportElements(vitalRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *VitalObservationRecordService) ExportElements(vital *model.VitalObservationRecord) (*[]model.HealthRecordExportElement, error) {
	if vital == nil {
		return nil, errors.New("Missing parameter")
	}

	if vital.Observations == nil {
		return nil, errors.New("Cannot export. No Vitals defined")
	}

	// all records array
	records := []model.HealthRecordExportElement{}
	vitals := *vital.Observations

	for _, vitalRecord := range vitals {
		//value
		value := model.Value{}
		value.ValueType = model.QUANTITY
		value.ValueQuantity = &vitalRecord.Value
		value.Unit = &vitalRecord.Unit

		// populate record
		record := model.HealthRecordExportElement{}
		record.Name = string(vitalRecord.VitalType)
		record.TimeStamp = vital.Occurred
		record.Value = value
		record.RecordID = util.UUID()
		record.ConsumerID = vital.ConsumerID

		if vital.Location != nil {
			record.Location = vital.Location
		}

		//populate the record
		records = append(records, record)
	}

	return &records, nil
}
