package service

import (
	"errors"
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/karte/healthrecord-repository/model"
	"github.com/karte/healthrecord-repository/util"
	"github.com/karte/mongo-lib/mserver"
	logging "github.com/op/go-logging"
)

/*==========================================================================================
LabResultObservationRecordService service
==========================================================================================*/

// LabResultObservationRecordService is for creating lab result
type LabResultObservationRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewLabResultObservationRecordService creates a new LabResultObservationRecord service that has all calls to the database, queries and mutations via the Data Access Layer
func NewLabResultObservationRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *LabResultObservationRecordService {
	return &LabResultObservationRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *LabResultObservationRecordService) FindByID(id string) (*model.LabResultObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching lab result observation record (if any) from Mongo
	p, err := u.dal.Get(id, &model.LabResultObservationRecord{})
	if err != nil {
		return nil, err
	}

	var labResultObservation *model.LabResultObservationRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &labResultObservation)

	return labResultObservation, nil
}

// FindByConsumerID ..
func (u *LabResultObservationRecordService) FindByConsumerID(id string) (*[]*model.LabResultObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching LabResultObservationRecord (if any) from Mongo
	lroArr, err := FindHealthRecordsByConsumerID(id, &model.LabResultObservationRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var labResultObservationRecordArr []*model.LabResultObservationRecord
	for _, lror := range lroArr {
		var labResultObservationRecord *model.LabResultObservationRecord
		bsonBytes, _ := bson.Marshal(lror)
		bson.Unmarshal(bsonBytes, &labResultObservationRecord)
		labResultObservationRecordArr = append(labResultObservationRecordArr, labResultObservationRecord)
	}

	return &labResultObservationRecordArr, nil
}

// FindByParam ...
func (u *LabResultObservationRecordService) FindByParam(param *model.LabResultObservationRecordQueryParam) (*[]*model.LabResultObservationRecord, error) {
	if param == nil {
		return nil, errors.New("Missing required parameter ")
	}

	var params map[string]string
	params = map[string]string{}

	if param.Category != nil && *param.Category != "" {
		params["category"] = *param.Category
	}

	if param.ConsumerID != "" {
		params["consumerID"] = param.ConsumerID
	}

	if param.Name != nil && *param.Name != "" {
		params["name"] = *param.Name
	}

	//find the matching lab result Record (if any) from Mongo
	labResArr, err := FindRecords(&params, &model.LabResultObservationRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var labResultObvsArr []*model.LabResultObservationRecord
	for _, relr := range labResArr {
		var labResultObvs *model.LabResultObservationRecord
		bsonBytes, _ := bson.Marshal(relr)
		bson.Unmarshal(bsonBytes, &labResultObvs)
		labResultObvsArr = append(labResultObvsArr, labResultObvs)
	}

	return &labResultObvsArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateLabResultObservationRecord will create a lab result observation record in Mongo using the Data Access Layer ...
func (u *LabResultObservationRecordService) CreateLabResultObservationRecord(labResultObservationRecord *model.LabResultObservationRecord) (*model.LabResultObservationRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	hError := ValidateHealthRecord(&labResultObservationRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For lab result Record Error : %v", hError)
		return nil, hError
	}

	var observations []model.LabResultObservation
	observations = *labResultObservationRecord.Observations
	if len(observations) <= 0 {
		return nil, errors.New("Missing a required field - at least one observation should be defined - aborting before saving to the DB")
	}

	for i := 0; i < len(observations); i++ {
		var observation model.LabResultObservation
		observation = observations[i]
		if observation.Name == "" || &observation.Value == nil {
			return nil, errors.New("Missing a required field aborting before saving to the DB")
		}
	}

	id, err := u.dal.Post(labResultObservationRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For Lab result observation Record Error : %v", err)
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &labResultObservationRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(labResultObservationRecord, labResultObservationRecord.ConsumerID, id)
	return labResultObservationRecord, nil
}

// Export ...
func (u *LabResultObservationRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	labResultObservationRecords, _ := u.FindByConsumerID(id)
	if labResultObservationRecords != nil {
		labResultObservationRecordsIterable := *labResultObservationRecords
		records := []model.HealthRecordExportElement{}
		for _, labResultObservationRecord := range labResultObservationRecordsIterable {
			recordElements, _ := u.ExportElements(labResultObservationRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *LabResultObservationRecordService) ExportElements(labResultObservationRecord *model.LabResultObservationRecord) (*[]model.HealthRecordExportElement, error) {
	if labResultObservationRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	if labResultObservationRecord.Observations == nil {
		return nil, errors.New("Cannot export. No Vitals defined")
	}

	// all records array
	records := []model.HealthRecordExportElement{}
	observationRecords := *labResultObservationRecord.Observations

	for _, observationRecord := range observationRecords {
		//value
		value := model.Value{}
		value = observationRecord.Value

		// populate record
		record := model.HealthRecordExportElement{}
		record.Name = observationRecord.Name
		record.TimeStamp = labResultObservationRecord.Occurred
		record.Value = value
		record.RecordID = util.UUID()
		record.ConsumerID = labResultObservationRecord.ConsumerID

		//populate the record
		records = append(records, record)
	}

	return &records, nil
}
