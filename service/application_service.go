package service

import (
	"errors"

	"github.com/globalsign/mgo/bson"
	"github.com/op/go-logging"
	"gitlab.com/karte/healthrecord-repository/model"
	"gitlab.com/karte/mongo-lib/mserver"
)

/*==========================================================================================
ApplicationService
==========================================================================================*/

//ApplicationService is for creating account
type ApplicationService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

//NewApplicationService creates a new Application service that has all calls to the database, queries and mutations via the Data Access Layer
func NewApplicationService(dal mserver.DataAccessLayer, log *logging.Logger) *ApplicationService {
	return &ApplicationService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

//FindByID ..
func (u *ApplicationService) FindByID(id string) (*model.Application, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Application (if any) from Mongo
	app, err := u.dal.Get(id, &model.Application{})
	if err != nil {
		return nil, err
	}

	var application *model.Application
	bsonBytes, _ := bson.Marshal(app)
	bson.Unmarshal(bsonBytes, &application)

	return application, nil
}

//FindByName ...
func (u *ApplicationService) FindByName(name string) (*[]*model.Application, error) {
	if name == "" {
		return nil, errors.New("Missing parameter - name input param must be specififed")
	}

	var params map[string]string
	params = map[string]string{}

	params["name"] = name

	//find the matching app Record (if any) from Mongo
	appArr, err := FindRecords(&params, &model.Application{}, u.dal)
	if err != nil {
		return nil, err
	}

	var applicationArr []*model.Application
	for _, appr := range appArr {
		var application *model.Application
		bsonBytes, _ := bson.Marshal(appr)
		bson.Unmarshal(bsonBytes, &application)
		applicationArr = append(applicationArr, application)
	}

	return &applicationArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

//CreateApplication will create a new Application in Mongo using the Data Access Layer
func (u *ApplicationService) CreateApplication(application *model.Application) (*model.Application, error) {
	//validate required fields (besides Id which is generated by Post)
	if application.Name == "" ||
		&application.Owner == nil {

		return nil, errors.New("Missing a required field: aborting before saving to the DB")
	}

	_, err := u.dal.Post(application)
	if err != nil {
		return nil, err
	}

	return application, nil
}
