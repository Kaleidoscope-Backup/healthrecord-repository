package service

import (
	"errors"
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/op/go-logging"
	"gitlab.com/karte/healthrecord-repository/model"
	"gitlab.com/karte/mongo-lib/mserver"
)

/*==========================================================================================
Goal Record service
==========================================================================================*/

//GoalRecordService is for creating Goal
type GoalRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

//NewGoalRecordService creates a new Goal record service ...
func NewGoalRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *GoalRecordService {
	return &GoalRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

//FindByID ..
func (u *GoalRecordService) FindByID(id string) (*model.GoalRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching GoalRecord(if any) from Mongo
	p, err := u.dal.Get(id, &model.GoalRecord{})
	if err != nil {
		return nil, err
	}

	var goal *model.GoalRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &goal)

	return goal, nil
}

//FindByConsumerID ..
func (u *GoalRecordService) FindByConsumerID(id string) (*[]*model.GoalRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching GoalRecord (if any) from Mongo
	mrArr, err := FindHealthRecordsByConsumerID(id, &model.GoalRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var goalRecordArr []*model.GoalRecord
	for _, ar := range mrArr {
		var goalRecord *model.GoalRecord
		bsonBytes, _ := bson.Marshal(ar)
		bson.Unmarshal(bsonBytes, &goalRecord)
		goalRecordArr = append(goalRecordArr, goalRecord)
	}

	return &goalRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

//CreateGoalRecord will create a new Goal in Mongo using the Data Access Layer ...
func (u *GoalRecordService) CreateGoalRecord(goalRecord *model.GoalRecord) (*model.GoalRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	if &goalRecord.Category == nil {
		return nil, errors.New("Missing a required field Category aborting before saving to the DB")
	}

	hError := ValidateHealthRecord(&goalRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Allergy Record Error : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(goalRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For Allergy Record Error : %v", err)
		return nil, err
	}

	PostRecord(goalRecord, goalRecord.ConsumerID, id)
	return goalRecord, nil
}
