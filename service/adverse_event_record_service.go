package service

import (
	"errors"
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/op/go-logging"
	"gitlab.com/karte/healthrecord-repository/model"
	"gitlab.com/karte/mongo-lib/mserver"
)

/*==========================================================================================
AdverseEvent Record service
==========================================================================================*/

//AdverseEventRecordService is for creating adverse event
type AdverseEventRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

//NewAdverseEventRecordService creates a new AdverseEvent record service ...
func NewAdverseEventRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *AdverseEventRecordService {
	return &AdverseEventRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

//FindByID ..
func (u *AdverseEventRecordService) FindByID(id string) (*model.AdverseEventRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching AdverseEventRecord(if any) from Mongo
	p, err := u.dal.Get(id, &model.AdverseEventRecord{})
	if err != nil {
		return nil, err
	}

	var adverseEvent *model.AdverseEventRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &adverseEvent)

	return adverseEvent, nil
}

//FindByConsumerID ..
func (u *AdverseEventRecordService) FindByConsumerID(id string) (*[]*model.AdverseEventRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching AdverseEventRecord (if any) from Mongo
	mrArr, err := FindHealthRecordsByConsumerID(id, &model.AdverseEventRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var adverseEventRecordArr []*model.AdverseEventRecord
	for _, ar := range mrArr {
		var adverseEventRecord *model.AdverseEventRecord
		bsonBytes, _ := bson.Marshal(ar)
		bson.Unmarshal(bsonBytes, &adverseEventRecord)
		adverseEventRecordArr = append(adverseEventRecordArr, adverseEventRecord)
	}

	return &adverseEventRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

//CreateAdverseEventRecord will create a new activity in Mongo using the Data Access Layer ...
func (u *AdverseEventRecordService) CreateAdverseEventRecord(adverseEventRecord *model.AdverseEventRecord) (*model.AdverseEventRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	if &adverseEventRecord.Category == nil || &adverseEventRecord.EventType == nil {
		return nil, errors.New("Missing a required fields. aborting before saving to the DB")
	}

	hError := ValidateHealthRecord(&adverseEventRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Allergy Record Error : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(adverseEventRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For Allergy Record Error : %v", err)
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &adverseEventRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	return adverseEventRecord, nil
}
