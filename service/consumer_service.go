package service

import (
	"errors"

	"github.com/globalsign/mgo/bson"
	"github.com/karte/healthrecord-repository/model"
	"github.com/karte/healthrecord-repository/util"
	"github.com/karte/mongo-lib/mserver"
	logging "github.com/op/go-logging"
)

// ConsumerService type
type ConsumerService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewConsumerService creates a new Consumer service that has all calls to the database, queries and mutations via the Data Access Layer
func NewConsumerService(dal mserver.DataAccessLayer, log *logging.Logger) *ConsumerService {
	return &ConsumerService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByEmail ...
func (u *ConsumerService) FindByEmail(emailID string) (*[]*model.Consumer, error) {
	if emailID == "" {
		return nil, errors.New("Missing required parameter email id parameter")
	}

	var params map[string]string
	params = map[string]string{}

	params["email"] = emailID

	//find the matching consumer Record (if any) from Mongo
	relArr, err := FindRecords(&params, &model.Consumer{}, u.dal)
	if err != nil {
		return nil, err
	}

	var consumerArr []*model.Consumer
	for _, relr := range relArr {
		var consumer *model.Consumer
		bsonBytes, _ := bson.Marshal(relr)
		bson.Unmarshal(bsonBytes, &consumer)
		consumerArr = append(consumerArr, consumer)
	}

	return &consumerArr, nil
}

// FindByID ..
func (u *ConsumerService) FindByID(id string) (*model.Consumer, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Consumer (if any) from Mongo
	p, err := u.dal.Get(id, &model.Consumer{})
	if err != nil {
		return nil, err
	}

	//we need to unmarshal the result from type bson.M{} to model.Consumer
	//Convert BSON (byte) to JSON Fields
	var consumer *model.Consumer
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &consumer)

	return consumer, nil
}

// FindByName will find the Consumers by the name provided
func (u *ConsumerService) FindByName(firstName string, lastName string) ([]model.Consumer, error) {
	consumers := []model.Consumer{}

	return consumers, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateConsumer will create a new consumer in Mongo using the Data Access Layer
func (u *ConsumerService) CreateConsumer(consumer *model.Consumer) (*model.Consumer, error) {
	//validate required fields (besides Id which is generated by Post)
	if consumer.FirstName == "" ||
		consumer.LastName == "" ||
		consumer.Email == "" {

		return nil, errors.New("Missing a required field: aborting before saving to the DB")
	}

	_, err := u.dal.Post(consumer)
	if err != nil {
		return nil, err
	}

	return consumer, nil
}

// UpdateConsumer will create a new consumer in Mongo using the Data Access Layer
func (u *ConsumerService) UpdateConsumer(consumer *model.Consumer) (*model.Consumer, error) {

	if consumer != nil {
		_, err := u.dal.Put(consumer.Id, consumer)
		if err != nil {
			return nil, err
		}

		return consumer, nil
	}

	return nil, nil
}

// ExportKnowledgeGraphRecord ...
func (u *ConsumerService) ExportKnowledgeGraphRecord(consumer *model.Consumer) (*model.Profile, error) {
	if consumer == nil {
		return nil, errors.New("Missing parameter")
	}

	profile := &model.Profile{}
	profile.ProfileID = consumer.Id
	profile.Gender = consumer.Gender
	profile.Ethnicity = consumer.Ethnicity
	profile.Race = consumer.Race
	profile.MarritalStatus = consumer.MarritalStatus

	return profile, nil
}

// Export ...
func (u *ConsumerService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	consumer, _ := u.FindByID(id)
	records, _ := u.ExportElements(consumer)

	return records, nil
}

// ExportElements ...
func (u *ConsumerService) ExportElements(consumer *model.Consumer) (*[]model.HealthRecordExportElement, error) {
	if consumer == nil {
		return nil, errors.New("Missing parameter")
	}

	// all records array
	records := []model.HealthRecordExportElement{}

	// First name
	if &consumer.FirstName != nil {
		//value
		value := model.Value{}
		value.ValueType = model.TEXT
		value.ValueText = &consumer.FirstName

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "FirstName"
		record.RecordID = util.UUID()
		record.TimeStamp = util.Time{consumer.Meta.LastUpdated.Time}
		record.ConsumerID = consumer.Id
		record.Value = value

		//populate the record
		records = append(records, record)
	}

	// Last name
	if &consumer.LastName != nil {
		//value
		value := model.Value{}
		value.ValueType = model.TEXT
		value.ValueText = &consumer.LastName

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "LastName"
		record.RecordID = util.UUID()
		record.TimeStamp = util.Time{consumer.Meta.LastUpdated.Time}
		record.ConsumerID = consumer.Id
		record.Value = value

		//populate the record
		records = append(records, record)
	}

	// Ethnicity
	if consumer.Ethnicity != nil {
		//value
		value := model.Value{}
		value.ValueType = model.TEXT
		value.ValueText = consumer.Ethnicity

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Ethnicity"
		record.RecordID = util.UUID()
		record.TimeStamp = util.Time{consumer.Meta.LastUpdated.Time}
		record.ConsumerID = consumer.Id
		record.Value = value

		//populate the record
		records = append(records, record)
	}

	// Ethnicity
	if consumer.MarritalStatus != nil {
		//value
		value := model.Value{}
		value.ValueType = model.TEXT
		marritalStatus := string(*consumer.MarritalStatus)
		value.ValueText = &marritalStatus

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "MarritalStatus"
		record.RecordID = util.UUID()
		record.TimeStamp = util.Time{consumer.Meta.LastUpdated.Time}
		record.ConsumerID = consumer.Id
		record.Value = value

		//populate the record
		records = append(records, record)
	}

	// Gender
	if consumer.Gender != nil {
		//value
		value := model.Value{}
		value.ValueType = model.TEXT
		gender := string(*consumer.Gender)
		value.ValueText = &gender

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Gender"
		record.RecordID = util.UUID()
		record.TimeStamp = util.Time{consumer.Meta.LastUpdated.Time}
		record.ConsumerID = consumer.Id
		record.Value = value

		//populate the record
		records = append(records, record)
	}

	// Location
	if consumer.Address != nil {

		// Country
		if &consumer.Address.Country != nil {
			value := model.Value{}
			value.ValueType = model.TEXT
			country := consumer.Address.Country
			value.ValueText = &country

			// Record
			record := model.HealthRecordExportElement{}
			record.Name = "Country"
			record.RecordID = util.UUID()
			record.TimeStamp = util.Time{consumer.Meta.LastUpdated.Time}
			record.ConsumerID = consumer.Id
			record.Value = value

			//populate the record
			records = append(records, record)
		}

		// State
		if &consumer.Address.State != nil {
			value := model.Value{}
			value.ValueType = model.TEXT
			state := consumer.Address.State
			value.ValueText = &state

			// Record
			record := model.HealthRecordExportElement{}
			record.Name = "State"
			record.RecordID = util.UUID()
			record.TimeStamp = util.Time{consumer.Meta.LastUpdated.Time}
			record.ConsumerID = consumer.Id
			record.Value = value

			//populate the record
			records = append(records, record)
		}
	}

	return &records, nil
}
