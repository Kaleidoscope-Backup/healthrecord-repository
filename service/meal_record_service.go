package service

import (
	"errors"
	"fmt"

	"github.com/Kaleidoscope-Backup/healthrecord-repository/model"
	"github.com/Kaleidoscope-Backup/healthrecord-repository/util"
	"github.com/Kaleidoscope-Backup/mongo-lib/mserver"
	"github.com/globalsign/mgo/bson"
	logging "github.com/op/go-logging"
)

/*==========================================================================================
Meal Record service
==========================================================================================*/

// MealRecordService is for creating meals
type MealRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewMealRecordService creates a new meal record service ...
func NewMealRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *MealRecordService {
	return &MealRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *MealRecordService) FindByID(id string) (*model.MealRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching MealRecord(if any) from Mongo
	p, err := u.dal.Get(id, &model.MealRecord{})
	if err != nil {
		return nil, err
	}

	var meal *model.MealRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &meal)

	return meal, nil
}

// FindByConsumerID ..
func (u *MealRecordService) FindByConsumerID(id string) (*[]*model.MealRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching MealRecord (if any) from Mongo
	mrArr, err := FindHealthRecordsByConsumerID(id, &model.MealRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var mealRecordArr []*model.MealRecord
	for _, ar := range mrArr {
		var mealRecord *model.MealRecord
		bsonBytes, _ := bson.Marshal(ar)
		bson.Unmarshal(bsonBytes, &mealRecord)
		mealRecordArr = append(mealRecordArr, mealRecord)
	}

	return &mealRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateMealRecord will create a new meal in Mongo using the Data Access Layer ...
func (u *MealRecordService) CreateMealRecord(mealRecord *model.MealRecord) (*model.MealRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	if &mealRecord.MealType == nil {
		return nil, errors.New("Missing a required field MealType aborting before saving to the DB")
	}

	hError := ValidateHealthRecord(&mealRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Meal Record Error : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(mealRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For Meal Record Error : %v", err)
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &mealRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(mealRecord, mealRecord.ConsumerID, id)
	return mealRecord, nil
}

// Export ...
func (u *MealRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	mealRecords, _ := u.FindByConsumerID(id)
	if mealRecords != nil {
		mealRecordsIterable := *mealRecords
		records := []model.HealthRecordExportElement{}
		for _, mealRecord := range mealRecordsIterable {
			recordElements, _ := u.ExportElements(mealRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *MealRecordService) ExportElements(mealRecord *model.MealRecord) (*[]model.HealthRecordExportElement, error) {
	if mealRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	// All records array
	records := []model.HealthRecordExportElement{}

	// Populate record
	recordID := util.UUID()

	// Meal Type
	valueMealType := model.Value{}
	valueMealType.ValueType = model.TEXT
	mealType := string(mealRecord.MealType)
	valueMealType.ValueText = &mealType

	// Populate record
	recordMealType := model.HealthRecordExportElement{}
	recordMealType.Name = "Meal Type"
	recordMealType.TimeStamp = mealRecord.Occurred
	recordMealType.Value = valueMealType
	recordMealType.RecordID = recordID
	recordMealType.ConsumerID = mealRecord.ConsumerID

	// Populate the record
	records = append(records, recordMealType)

	// Meal Name
	valueName := model.Value{}
	valueName.ValueType = model.TEXT
	valueName.ValueText = &mealRecord.Name

	// Populate record
	recordName := model.HealthRecordExportElement{}
	recordName.Name = "Meal Name"
	recordName.TimeStamp = mealRecord.Occurred
	recordName.Value = valueName
	recordName.RecordID = recordID
	recordName.ConsumerID = mealRecord.ConsumerID

	// Populate the record
	records = append(records, recordName)

	if mealRecord.Calories != nil {
		// Calories
		valueCalories := model.Value{}
		valueCalories.ValueType = model.QUANTITY
		valueCalories.ValueQuantity = mealRecord.Calories

		// Populate record
		recordCalories := model.HealthRecordExportElement{}
		recordCalories.Name = "Meal Calories"
		recordCalories.TimeStamp = mealRecord.Occurred
		recordCalories.Value = valueCalories
		recordCalories.RecordID = recordID
		recordCalories.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordCalories)
	}

	if mealRecord.Carbohydrate != nil {
		// Carbohydrate
		valueCarbohydrate := model.Value{}
		valueCarbohydrate.ValueType = model.DECIMAL
		valueCarbohydrate.ValueDecimal = mealRecord.Carbohydrate

		// Populate record
		recordCarbohydrate := model.HealthRecordExportElement{}
		recordCarbohydrate.Name = "Meal Carbohydrate"
		recordCarbohydrate.TimeStamp = mealRecord.Occurred
		recordCarbohydrate.Value = valueCarbohydrate
		recordCarbohydrate.RecordID = recordID
		recordCarbohydrate.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordCarbohydrate)
	}

	if mealRecord.Fat != nil {
		// Fat
		valueFat := model.Value{}
		valueFat.ValueType = model.DECIMAL
		valueFat.ValueDecimal = mealRecord.Fat

		// Populate record
		recordFat := model.HealthRecordExportElement{}
		recordFat.Name = "Meal Fat"
		recordFat.TimeStamp = mealRecord.Occurred
		recordFat.Value = valueFat
		recordFat.RecordID = recordID
		recordFat.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordFat)
	}

	if mealRecord.Protein != nil {
		// Protein
		valueProtein := model.Value{}
		valueProtein.ValueType = model.DECIMAL
		valueProtein.ValueDecimal = mealRecord.Protein

		// Populate record
		recordProtein := model.HealthRecordExportElement{}
		recordProtein.Name = "Meal Protein"
		recordProtein.TimeStamp = mealRecord.Occurred
		recordProtein.Value = valueProtein
		recordProtein.RecordID = recordID
		recordProtein.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordProtein)
	}

	if mealRecord.Sodium != nil {
		// Sodium
		valueSodium := model.Value{}
		valueSodium.ValueType = model.DECIMAL
		valueSodium.ValueDecimal = mealRecord.Sodium

		// Populate record
		recordSodium := model.HealthRecordExportElement{}
		recordSodium.Name = "Meal Sodium"
		recordSodium.TimeStamp = mealRecord.Occurred
		recordSodium.Value = valueSodium
		recordSodium.RecordID = recordID
		recordSodium.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordSodium)
	}

	if mealRecord.Sugar != nil {
		// Sugar
		valueSugar := model.Value{}
		valueSugar.ValueType = model.DECIMAL
		valueSugar.ValueDecimal = mealRecord.Sugar

		// Populate record
		recordSugar := model.HealthRecordExportElement{}
		recordSugar.Name = "Meal Sugar"
		recordSugar.TimeStamp = mealRecord.Occurred
		recordSugar.Value = valueSugar
		recordSugar.RecordID = recordID
		recordSugar.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordSugar)
	}

	if mealRecord.Calcium != nil {
		// Calcium
		valueCalcium := model.Value{}
		valueCalcium.ValueType = model.DECIMAL
		valueCalcium.ValueDecimal = mealRecord.Calcium

		// Populate record
		recordCalcium := model.HealthRecordExportElement{}
		recordCalcium.Name = "Meal Calcium"
		recordCalcium.TimeStamp = mealRecord.Occurred
		recordCalcium.Value = valueCalcium
		recordCalcium.RecordID = recordID
		recordCalcium.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordCalcium)
	}

	if mealRecord.Cholesterol != nil {
		// Cholesterol
		valueCholesterol := model.Value{}
		valueCholesterol.ValueType = model.DECIMAL
		valueCholesterol.ValueDecimal = mealRecord.Cholesterol

		// Populate record
		recordCholesterol := model.HealthRecordExportElement{}
		recordCholesterol.Name = "Meal Cholesterol"
		recordCholesterol.TimeStamp = mealRecord.Occurred
		recordCholesterol.Value = valueCholesterol
		recordCholesterol.RecordID = recordID
		recordCholesterol.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordCholesterol)
	}

	if mealRecord.Fiber != nil {
		// Fiber
		valueFiber := model.Value{}
		valueFiber.ValueType = model.DECIMAL
		valueFiber.ValueDecimal = mealRecord.Fiber

		// Populate record
		recordFiber := model.HealthRecordExportElement{}
		recordFiber.Name = "Meal Fiber"
		recordFiber.TimeStamp = mealRecord.Occurred
		recordFiber.Value = valueFiber
		recordFiber.RecordID = recordID
		recordFiber.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordFiber)
	}

	if mealRecord.Iron != nil {
		// Iron
		valueIron := model.Value{}
		valueIron.ValueType = model.DECIMAL
		valueIron.ValueDecimal = mealRecord.Iron

		// Populate record
		recordIron := model.HealthRecordExportElement{}
		recordIron.Name = "Meal Iron"
		recordIron.TimeStamp = mealRecord.Occurred
		recordIron.Value = valueIron
		recordIron.RecordID = recordID
		recordIron.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordIron)
	}

	if mealRecord.MonounsaturatedFat != nil {
		// MonounsaturatedFat
		valueMonounsaturatedFat := model.Value{}
		valueMonounsaturatedFat.ValueType = model.DECIMAL
		valueMonounsaturatedFat.ValueDecimal = mealRecord.MonounsaturatedFat

		// Populate record
		recordMonounsaturatedFat := model.HealthRecordExportElement{}
		recordMonounsaturatedFat.Name = "Meal Monounsaturated Fat"
		recordMonounsaturatedFat.TimeStamp = mealRecord.Occurred
		recordMonounsaturatedFat.Value = valueMonounsaturatedFat
		recordMonounsaturatedFat.RecordID = recordID
		recordMonounsaturatedFat.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordMonounsaturatedFat)
	}

	if mealRecord.PolyunsaturatedFat != nil {
		// PolyunsaturatedFat
		valuePolyunsaturatedFat := model.Value{}
		valuePolyunsaturatedFat.ValueType = model.DECIMAL
		valuePolyunsaturatedFat.ValueDecimal = mealRecord.PolyunsaturatedFat

		// Populate record
		recordPolyunsaturatedFat := model.HealthRecordExportElement{}
		recordPolyunsaturatedFat.Name = "Meal Polyunsaturated Fat"
		recordPolyunsaturatedFat.TimeStamp = mealRecord.Occurred
		recordPolyunsaturatedFat.Value = valuePolyunsaturatedFat
		recordPolyunsaturatedFat.RecordID = recordID
		recordPolyunsaturatedFat.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordPolyunsaturatedFat)
	}

	if mealRecord.Potassium != nil {
		// Potassium
		valuePotassium := model.Value{}
		valuePotassium.ValueType = model.DECIMAL
		valuePotassium.ValueDecimal = mealRecord.Potassium

		// Populate record
		recordPotassium := model.HealthRecordExportElement{}
		recordPotassium.Name = "Meal Potassium"
		recordPotassium.TimeStamp = mealRecord.Occurred
		recordPotassium.Value = valuePotassium
		recordPotassium.RecordID = recordID
		recordPotassium.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordPotassium)
	}

	if mealRecord.SaturatedFat != nil {
		// SaturatedFat
		valueSaturatedFat := model.Value{}
		valueSaturatedFat.ValueType = model.DECIMAL
		valueSaturatedFat.ValueDecimal = mealRecord.SaturatedFat

		// Populate record
		recordSaturatedFat := model.HealthRecordExportElement{}
		recordSaturatedFat.Name = "Meal Saturated Fat"
		recordSaturatedFat.TimeStamp = mealRecord.Occurred
		recordSaturatedFat.Value = valueSaturatedFat
		recordSaturatedFat.RecordID = recordID
		recordSaturatedFat.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordSaturatedFat)
	}

	if mealRecord.VitaminA != nil {
		// VitaminA
		valueVitaminA := model.Value{}
		valueVitaminA.ValueType = model.DECIMAL
		valueVitaminA.ValueDecimal = mealRecord.VitaminA

		// Populate record
		recordVitaminA := model.HealthRecordExportElement{}
		recordVitaminA.Name = "Meal Vitamin A"
		recordVitaminA.TimeStamp = mealRecord.Occurred
		recordVitaminA.Value = valueVitaminA
		recordVitaminA.RecordID = recordID
		recordVitaminA.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordVitaminA)
	}

	if mealRecord.VitaminC != nil {
		// VitaminC
		valueVitaminC := model.Value{}
		valueVitaminC.ValueType = model.DECIMAL
		valueVitaminC.ValueDecimal = mealRecord.VitaminC

		// Populate record
		recordVitaminC := model.HealthRecordExportElement{}
		recordVitaminC.Name = "Meal Vitamin C"
		recordVitaminC.TimeStamp = mealRecord.Occurred
		recordVitaminC.Value = valueVitaminC
		recordVitaminC.RecordID = recordID
		recordVitaminC.ConsumerID = mealRecord.ConsumerID

		// Populate the record
		records = append(records, recordVitaminC)
	}

	return &records, nil
}
