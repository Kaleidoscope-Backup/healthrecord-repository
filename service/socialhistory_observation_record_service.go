package service

import (
	"errors"
	"fmt"

	"github.com/Kaleidoscope-Backup/healthrecord-repository/model"
	"github.com/Kaleidoscope-Backup/healthrecord-repository/util"
	"github.com/Kaleidoscope-Backup/mongo-lib/mserver"
	"github.com/globalsign/mgo/bson"
	logging "github.com/op/go-logging"
)

/*==========================================================================================
SoacialHistoryObservationRecord service
==========================================================================================*/

// SocialHistoryObservationRecordService is for creating habit
type SocialHistoryObservationRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewSocialHistoryObservationRecordService creates a new Habit service that has all calls to the database, queries and mutations via the Data Access Layer
func NewSocialHistoryObservationRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *SocialHistoryObservationRecordService {
	return &SocialHistoryObservationRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *SocialHistoryObservationRecordService) FindByID(id string) (*model.SocialHistoryObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Addiction Record (if any) from Mongo
	p, err := u.dal.Get(id, &model.SocialHistoryObservationRecord{})
	if err != nil {
		return nil, err
	}

	var addiction *model.SocialHistoryObservationRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &addiction)

	return addiction, nil
}

// FindByConsumerID ..
func (u *SocialHistoryObservationRecordService) FindByConsumerID(id string) (*[]*model.SocialHistoryObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching SocialHistoryObservationRecord (if any) from Mongo
	shorArr, err := FindHealthRecordsByConsumerID(id, &model.SocialHistoryObservationRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var socialHistoryObservationRecordArr []*model.SocialHistoryObservationRecord
	for _, shor := range shorArr {
		var socialHistoryObservationRecord *model.SocialHistoryObservationRecord
		bsonBytes, _ := bson.Marshal(shor)
		bson.Unmarshal(bsonBytes, &socialHistoryObservationRecord)
		socialHistoryObservationRecordArr = append(socialHistoryObservationRecordArr, socialHistoryObservationRecord)
	}

	return &socialHistoryObservationRecordArr, nil
}

// FindByParams ...
func (u *SocialHistoryObservationRecordService) FindByParams(param *model.SocialHistoryObservationRecordQueryParam) (*[]*model.SocialHistoryObservationRecord, error) {
	if param == nil || param.ConsumerID == "" {
		return nil, errors.New("Missing required parameter ")
	}

	var params map[string]string
	params = map[string]string{}

	params["consumerID"] = param.ConsumerID

	if param.Type != nil {
		params["type"] = string(*param.Type)
	}

	if param.Status != nil {
		params["status"] = string(*param.Status)
	}

	//find the matching lab result Record (if any) from Mongo
	sobsArr, err := FindRecords(&params, &model.SocialHistoryObservationRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var socialHistoryObservationRecordArr []*model.SocialHistoryObservationRecord
	for _, sor := range sobsArr {
		var socialHistoryObservationRecord *model.SocialHistoryObservationRecord
		bsonBytes, _ := bson.Marshal(sor)
		bson.Unmarshal(bsonBytes, &socialHistoryObservationRecord)
		socialHistoryObservationRecordArr = append(socialHistoryObservationRecordArr, socialHistoryObservationRecord)
	}

	return &socialHistoryObservationRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateSocialHistoryObservationRecord will create a new habit in Mongo using the Data Access Layer ...
func (u *SocialHistoryObservationRecordService) CreateSocialHistoryObservationRecord(socialHistoryRecord *model.SocialHistoryObservationRecord) (*model.SocialHistoryObservationRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	if &socialHistoryRecord.Type == nil {
		return nil, errors.New("Missing a required field Type aborting before saving to the DB")
	}

	if &socialHistoryRecord.Status == nil {
		return nil, errors.New("Missing a required field Status aborting before saving to the DB")
	}

	hError := ValidateHealthRecord(&socialHistoryRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For socialHistoryRecord Record Error : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(socialHistoryRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For socialHistoryRecord Record Error : %v", err)
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &socialHistoryRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(socialHistoryRecord, socialHistoryRecord.ConsumerID, id)
	return socialHistoryRecord, nil
}

// Export ...
func (u *SocialHistoryObservationRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	socialHistoryRecords, _ := u.FindByConsumerID(id)

	if socialHistoryRecords != nil {
		socialHistoryRecordsIterable := *socialHistoryRecords
		records := []model.HealthRecordExportElement{}
		for _, socialHistoryRecord := range socialHistoryRecordsIterable {
			recordElements, _ := u.ExportElements(socialHistoryRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *SocialHistoryObservationRecordService) ExportElements(socialHistoryRecord *model.SocialHistoryObservationRecord) (*[]model.HealthRecordExportElement, error) {
	if socialHistoryRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	// all records array
	records := []model.HealthRecordExportElement{}
	value := model.Value{}
	record := model.HealthRecordExportElement{}

	// Values
	value.ValueType = model.QUANTITY
	value.Unit = socialHistoryRecord.DurationUnit
	value.ValueQuantity = socialHistoryRecord.Duration

	// Record
	record.Name = string(socialHistoryRecord.Type)
	record.TimeStamp = socialHistoryRecord.Occurred
	record.ConsumerID = socialHistoryRecord.ConsumerID
	record.RecordID = util.UUID()
	record.Value = value

	if socialHistoryRecord.Location != nil {
		record.Location = socialHistoryRecord.Location
	}

	//populate the record
	records = append(records, record)

	return &records, nil
}
