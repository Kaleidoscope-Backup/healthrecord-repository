package service

import (
	"errors"
	"fmt"

	logging "github.com/op/go-logging"
	"gitlab.com/karte/healthrecord-repository/model"
	"gitlab.com/karte/healthrecord-repository/util"
	"gitlab.com/karte/mongo-lib/mserver"
	"gopkg.in/mgo.v2/bson"
)

//DiagnosticReportRecordService ...
type DiagnosticReportRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

//NewDiagnosticReportRecordService ...
func NewDiagnosticReportRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *DiagnosticReportRecordService {
	return &DiagnosticReportRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

//FindByID ...
func (u *DiagnosticReportRecordService) FindByID(id string) (*model.DiagnosticReportRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}
	//find the matching record from Mongo
	dr, err := u.dal.Get(id, &model.DiagnosticReportRecord{})
	if err != nil {
		return nil, err
	}

	//we need to unmarshal the result from type bson.M{} to model.Vital
	//Convert BSON (byte) to JSON Fields
	var diagnosticsRecord *model.DiagnosticReportRecord
	bsonBytes, _ := bson.Marshal(dr)
	bson.Unmarshal(bsonBytes, &diagnosticsRecord)

	return diagnosticsRecord, nil
}

//FindByConsumerID ..
func (u *DiagnosticReportRecordService) FindByConsumerID(id string) (*[]*model.DiagnosticReportRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching SleepRecord (if any) from Mongo
	drArr, err := FindHealthRecordsByConsumerID(id, &model.DiagnosticReportRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var diagnosticsRecordArr []*model.DiagnosticReportRecord
	for _, dr := range drArr {
		var diagnosticsRecord *model.DiagnosticReportRecord
		bsonBytes, _ := bson.Marshal(dr)
		bson.Unmarshal(bsonBytes, &diagnosticsRecord)
		diagnosticsRecordArr = append(diagnosticsRecordArr, diagnosticsRecord)
	}

	return &diagnosticsRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

//CreateDiagnosticReportRecord ...
func (u *DiagnosticReportRecordService) CreateDiagnosticReportRecord(diagnosticReportRecord *model.DiagnosticReportRecord) (*model.DiagnosticReportRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	hError := ValidateHealthRecord(&diagnosticReportRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Sleep Record Error : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(diagnosticReportRecord)
	if err != nil {
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &diagnosticReportRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(diagnosticReportRecord, diagnosticReportRecord.ConsumerID, id)
	return diagnosticReportRecord, nil
}

// Export ...
func (u *DiagnosticReportRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	diagnosticRecords, _ := u.FindByConsumerID(id)
	if diagnosticRecords != nil {
		diagnosticRecordsIterable := *diagnosticRecords
		records := []model.HealthRecordExportElement{}
		for _, diagnosticRecord := range diagnosticRecordsIterable {
			recordElements, _ := u.ExportElements(diagnosticRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *DiagnosticReportRecordService) ExportElements(diagnostic *model.DiagnosticReportRecord) (*[]model.HealthRecordExportElement, error) {
	if diagnostic == nil {
		return nil, errors.New("Missing parameter")
	}

	//Location
	location := diagnostic.Location

	// all records array
	records := []model.HealthRecordExportElement{}
	recordID := util.UUID()

	// Category
	valueCategory := model.Value{}
	valueCategory.ValueType = model.TEXT
	categoryText := string(diagnostic.Category)
	valueCategory.ValueText = &categoryText

	// Record
	recordCategory := model.HealthRecordExportElement{}
	recordCategory.Name = "Diagnostic Category"
	recordCategory.TimeStamp = diagnostic.Occurred
	recordCategory.ConsumerID = diagnostic.ConsumerID
	recordCategory.RecordID = recordID
	recordCategory.Value = valueCategory
	recordCategory.Location = location

	//populate the record
	records = append(records, recordCategory)

	// Conclusion
	valueConclusion := model.Value{}
	valueConclusion.ValueType = model.TEXT
	valueCategory.ValueText = &categoryText

	// Record
	recordConclusion := model.HealthRecordExportElement{}
	recordConclusion.Name = "Diagnostic Conclusion"
	recordConclusion.TimeStamp = diagnostic.Occurred
	recordConclusion.ConsumerID = diagnostic.ConsumerID
	recordConclusion.RecordID = recordID
	recordConclusion.Value = valueConclusion
	recordConclusion.Location = location

	//populate the record
	records = append(records, recordConclusion)

	return &records, nil
}
