package service

import (
	"errors"
	"fmt"

	"github.com/globalsign/mgo/bson"
	"github.com/karte/healthrecord-repository/model"
	"github.com/karte/healthrecord-repository/util"
	"github.com/karte/mongo-lib/mserver"
	logging "github.com/op/go-logging"
)

/*==========================================================================================
ClinicalAssesmentObservationRecordService service
==========================================================================================*/

// ClinicalAssesmentObservationRecordService is for creating habit
type ClinicalAssesmentObservationRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewClinicalAssesmentObservationRecordService creates a new ClinicalAssesmentObservationRecord service that has all calls to the database, queries and mutations via the Data Access Layer
func NewClinicalAssesmentObservationRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *ClinicalAssesmentObservationRecordService {
	return &ClinicalAssesmentObservationRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *ClinicalAssesmentObservationRecordService) FindByID(id string) (*model.ClinicalAssesmentObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching clinical assesment observation Record (if any) from Mongo
	p, err := u.dal.Get(id, &model.ClinicalAssesmentObservationRecord{})
	if err != nil {
		return nil, err
	}

	var clinicalAssesmentObservation *model.ClinicalAssesmentObservationRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &clinicalAssesmentObservation)

	return clinicalAssesmentObservation, nil
}

// FindByConsumerID ..
func (u *ClinicalAssesmentObservationRecordService) FindByConsumerID(id string) (*[]*model.ClinicalAssesmentObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Medication Record (if any) from Mongo
	mrArr, err := FindHealthRecordsByConsumerID(id, &model.ClinicalAssesmentObservationRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var clinicalAssesmentObservationRecordArr []*model.ClinicalAssesmentObservationRecord
	for _, cr := range mrArr {
		var clinicalAssesmentObservationRecord *model.ClinicalAssesmentObservationRecord
		bsonBytes, _ := bson.Marshal(cr)
		bson.Unmarshal(bsonBytes, &clinicalAssesmentObservationRecord)
		clinicalAssesmentObservationRecordArr = append(clinicalAssesmentObservationRecordArr, clinicalAssesmentObservationRecord)
	}

	return &clinicalAssesmentObservationRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateClinicalAssesmentObservationRecord will create a new clinical assesment record record in Mongo using the Data Access Layer ...
func (u *ClinicalAssesmentObservationRecordService) CreateClinicalAssesmentObservationRecord(clinicalAssesmentObservationRecord *model.ClinicalAssesmentObservationRecord) (*model.ClinicalAssesmentObservationRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	hError := ValidateHealthRecord(&clinicalAssesmentObservationRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Health Record Record Error : %v", hError)
		return nil, hError
	}

	var clinicalAssesmentObservations []model.ClinicalAssesmentObservation
	clinicalAssesmentObservations = *clinicalAssesmentObservationRecord.Observations
	if len(clinicalAssesmentObservations) <= 0 {
		return nil, errors.New("Missing a required field - at least one observations should be defined - aborting before saving to the DB")
	}

	for i := 0; i < len(clinicalAssesmentObservations); i++ {
		var fmh model.ClinicalAssesmentObservation
		fmh = clinicalAssesmentObservations[i]
		if fmh.Name == "" || fmh.Value == "" {
			return nil, errors.New("Missing a required field Member Name or Clinical Assesment Observation aborting before saving to the DB")
		}
	}

	id, err := u.dal.Post(clinicalAssesmentObservationRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For Addiction Record Error : %v", err)
		return nil, err
	}

	PostRecord(clinicalAssesmentObservationRecord, clinicalAssesmentObservationRecord.ConsumerID, id)
	return clinicalAssesmentObservationRecord, nil
}

// Export ...
func (u *ClinicalAssesmentObservationRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	clinicalAssesmentObservationRecords, _ := u.FindByConsumerID(id)
	if clinicalAssesmentObservationRecords != nil {
		clinicalAssesmentObservationRecordsIterable := *clinicalAssesmentObservationRecords
		records := []model.HealthRecordExportElement{}
		for _, clinicalAssesmentObservationRecord := range clinicalAssesmentObservationRecordsIterable {
			recordElements, _ := u.ExportElements(clinicalAssesmentObservationRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *ClinicalAssesmentObservationRecordService) ExportElements(clinicalAssesmentObservationRecord *model.ClinicalAssesmentObservationRecord) (*[]model.HealthRecordExportElement, error) {
	if clinicalAssesmentObservationRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	//Location
	location := clinicalAssesmentObservationRecord.Location

	// all records array
	records := []model.HealthRecordExportElement{}
	recordID := util.UUID()

	if clinicalAssesmentObservationRecord.Method != nil {
		// Method
		valueMethod := model.Value{}
		valueMethod.ValueType = model.TEXT
		valueMethod.ValueText = clinicalAssesmentObservationRecord.Method

		// Record
		recordMethod := model.HealthRecordExportElement{}
		recordMethod.Name = "Clinical Observation Assesment Method"
		recordMethod.TimeStamp = clinicalAssesmentObservationRecord.Occurred
		recordMethod.ConsumerID = clinicalAssesmentObservationRecord.ConsumerID
		recordMethod.RecordID = recordID
		recordMethod.Value = valueMethod
		recordMethod.Location = location

		//populate the record
		records = append(records, recordMethod)
	}

	//Comment
	if clinicalAssesmentObservationRecord.Comment != nil {
		// Comment
		valueComment := model.Value{}
		valueComment.ValueType = model.TEXT
		valueComment.ValueText = clinicalAssesmentObservationRecord.Comment

		// Record
		recordComment := model.HealthRecordExportElement{}
		recordComment.Name = "Clinical Observation Assesment Comment"
		recordComment.TimeStamp = clinicalAssesmentObservationRecord.Occurred
		recordComment.ConsumerID = clinicalAssesmentObservationRecord.ConsumerID
		recordComment.RecordID = recordID
		recordComment.Value = valueComment
		recordComment.Location = location

		//populate the record
		records = append(records, recordComment)
	}

	//Symptom
	if clinicalAssesmentObservationRecord.Observations != nil {
		observations := *clinicalAssesmentObservationRecord.Observations
		for i := 0; i < len(observations); i++ {
			observation := observations[i]

			// Name
			valueName := model.Value{}
			valueName.ValueType = model.TEXT
			valueName.ValueText = &observation.Name

			// Record
			recordName := model.HealthRecordExportElement{}
			recordName.Name = "Clinical Observation Assesment Name"
			recordName.TimeStamp = clinicalAssesmentObservationRecord.Occurred
			recordName.ConsumerID = clinicalAssesmentObservationRecord.ConsumerID
			recordName.RecordID = recordID
			recordName.Value = valueName
			recordName.Location = location

			//populate the record
			records = append(records, recordName)

			// Value
			value := model.Value{}
			value.ValueType = model.TEXT
			value.ValueText = &observation.Value

			// Record
			record := model.HealthRecordExportElement{}
			record.Name = "Clinical Observation Assesment Value"
			record.TimeStamp = clinicalAssesmentObservationRecord.Occurred
			record.ConsumerID = clinicalAssesmentObservationRecord.ConsumerID
			record.RecordID = recordID
			record.Value = value
			record.Location = location

			//populate the record
			records = append(records, record)

			// Score
			valueScore := model.Value{}
			valueScore.ValueType = model.QUANTITY
			valueScore.ValueQuantity = observation.Score

			// Record
			recordScore := model.HealthRecordExportElement{}
			recordScore.Name = "Clinical Observation Assesment Score"
			recordScore.TimeStamp = clinicalAssesmentObservationRecord.Occurred
			recordScore.ConsumerID = clinicalAssesmentObservationRecord.ConsumerID
			recordScore.RecordID = recordID
			recordScore.Value = valueScore
			recordScore.Location = location

			//populate the record
			records = append(records, record)
		}
	}

	return &records, nil
}
