package service

import (
	"errors"
	"strconv"

	"github.com/globalsign/mgo/bson"
	"github.com/karte/healthrecord-repository/constant"
	"github.com/karte/healthrecord-repository/model"
	"github.com/karte/mongo-lib/mserver"
	logging "github.com/op/go-logging"
)

// OrganizationService type
// Include:
//
//	-> logger
//	-> DataAccessLayer (provides methods to interact with Mongo DB)
type OrganizationService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewOrganizationService creates a new Organization service that has all calls to the database, queries and mutations via the Data Access Layer
func NewOrganizationService(dal mserver.DataAccessLayer, log *logging.Logger) *OrganizationService {
	return &OrganizationService{dal: dal, log: log}
}

// FindByID ..Query operation
func (u *OrganizationService) FindByID(id string) (*model.Organization, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Organization (if any) from Mongo
	p, err := u.dal.Get(id, &model.Organization{})
	if err != nil {
		return nil, err
	}

	//we need to unmarshal the result from type bson.M{} to model.Organization
	//Convert BSON (byte) to JSON Fields
	var organization *model.Organization
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &organization)

	return organization, nil
}

// FindByParams ...
func (u *OrganizationService) FindByParams(param *model.OrganizationQueryParam) (*[]*model.Organization, error) {
	if param == nil {
		return nil, errors.New("Missing parameter")
	}

	var params map[string]string
	params = map[string]string{}

	if param.Name != nil {
		params["name"] = *param.Name
	}

	if param.Email != nil {
		params["email"] = *param.Email
	}

	if param.Type != nil {
		params["type"] = string(*param.Type)
	}

	// Latests will be shown first
	//params["_sort:desc"] = "_lastUpdated"
	params["_count"] = strconv.Itoa(int(constant.MAX_RECORD_FETCH_COUNT))

	//find the matching relationship Record (if any) from Mongo
	orgArr, err := FindRecords(&params, &model.Organization{}, u.dal)
	if err != nil {
		return nil, err
	}

	var organizationArr []*model.Organization
	for _, org := range orgArr {
		var organization *model.Organization
		bsonBytes, _ := bson.Marshal(org)
		bson.Unmarshal(bsonBytes, &organization)
		organizationArr = append(organizationArr, organization)
	}

	return &organizationArr, nil
}

// CreateOrganization will create a new organization in Mongo using the Data Access Layer. Mutation
func (u *OrganizationService) CreateOrganization(organization *model.Organization) (*model.Organization, error) {
	//validate required fields (besides Id which is generated by Post)
	if organization.Name == "" ||
		organization.Type == "" {

		return nil, errors.New("Missing a required field: aborting before saving to the DB")
	}

	_, err := u.dal.Post(organization)
	if err != nil {
		return nil, err
	}

	return organization, nil
}
