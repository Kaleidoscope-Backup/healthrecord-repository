package service

import (
	"errors"
	"fmt"

	logging "github.com/op/go-logging"
	"gitlab.com/karte/healthrecord-repository/model"
	"gitlab.com/karte/healthrecord-repository/util"
	"gitlab.com/karte/mongo-lib/mserver"
	"gopkg.in/mgo.v2/bson"
)

//ObservationRecordService ...
type ObservationRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

//NewObservationRecordService ...
func NewObservationRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *ObservationRecordService {
	return &ObservationRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

//FindByID ...
func (u *ObservationRecordService) FindByID(id string) (*model.ObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}
	//find the matching Vital (if any) from Mongo
	hr, err := u.dal.Get(id, &model.ObservationRecord{})
	if err != nil {
		return nil, err
	}

	//we need to unmarshal the result from type bson.M{} to model.Vital
	//Convert BSON (byte) to JSON Fields
	var obvs *model.ObservationRecord
	bsonBytes, _ := bson.Marshal(hr)
	bson.Unmarshal(bsonBytes, &obvs)

	return obvs, nil
}

//FindByConsumerID ..
func (u *ObservationRecordService) FindByConsumerID(id string) (*[]*model.ObservationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching ObservationRecord (if any) from Mongo
	vrArr, err := FindHealthRecordsByConsumerID(id, &model.ObservationRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var observationRecordArr []*model.ObservationRecord
	for _, vr := range vrArr {
		var observationRecord *model.ObservationRecord
		bsonBytes, _ := bson.Marshal(vr)
		bson.Unmarshal(bsonBytes, &observationRecord)
		observationRecordArr = append(observationRecordArr, observationRecord)
	}

	return &observationRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

//CreateObservationRecord ...
func (u *ObservationRecordService) CreateObservationRecord(obvs *model.ObservationRecord) (*model.ObservationRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	hError := ValidateHealthRecord(&obvs.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For observation Record Error : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(obvs)
	if err != nil {
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &obvs.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(obvs, obvs.ConsumerID, id)
	return obvs, nil
}

// Export ...
func (u *ObservationRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	observationRecords, _ := u.FindByConsumerID(id)
	if observationRecords != nil {
		observationRecordsIterable := *observationRecords
		records := []model.HealthRecordExportElement{}
		for _, observationRecord := range observationRecordsIterable {
			recordElements, _ := u.ExportElements(observationRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *ObservationRecordService) ExportElements(observationRecord *model.ObservationRecord) (*[]model.HealthRecordExportElement, error) {
	if observationRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	// all records array
	records := []model.HealthRecordExportElement{}
	value := model.Value{}
	record := model.HealthRecordExportElement{}

	// Value
	value = observationRecord.Value

	// Record
	record.Name = string(observationRecord.Name)
	record.TimeStamp = observationRecord.Occurred
	record.ConsumerID = observationRecord.ConsumerID
	record.RecordID = util.UUID()
	record.Value = value

	//populate the record
	records = append(records, record)

	return &records, nil
}
