package service

import (
	"errors"
	"fmt"

	"github.com/globalsign/mgo/bson"
	logging "github.com/op/go-logging"
	"gitlab.com/karte/healthrecord-repository/model"
	"gitlab.com/karte/healthrecord-repository/util"
	"gitlab.com/karte/mongo-lib/mserver"
)

/*==========================================================================================
Allergy Record service
==========================================================================================*/

//AllergyRecordService is for creating allergy
type AllergyRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

//NewAllergyRecordService creates a new Allergy service that has all calls to the database, queries and mutations via the Data Access Layer
func NewAllergyRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *AllergyRecordService {
	return &AllergyRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

//FindByID ..
func (u *AllergyRecordService) FindByID(id string) (*model.AllergyRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Allergy Record (if any) from Mongo
	p, err := u.dal.Get(id, &model.AllergyRecord{})
	if err != nil {
		return nil, err
	}

	var allergy *model.AllergyRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &allergy)

	return allergy, nil
}

//FindByConsumerID ..
func (u *AllergyRecordService) FindByConsumerID(id string) (*[]*model.AllergyRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Medication Record (if any) from Mongo
	mrArr, err := FindHealthRecordsByConsumerID(id, &model.AllergyRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var allergyRecordArr []*model.AllergyRecord
	for _, ar := range mrArr {
		var allergyRecord *model.AllergyRecord
		bsonBytes, _ := bson.Marshal(ar)
		bson.Unmarshal(bsonBytes, &allergyRecord)
		allergyRecordArr = append(allergyRecordArr, allergyRecord)
	}

	return &allergyRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

//CreateAllergyRecord will create a new allergy in Mongo using the Data Access Layer ...
func (u *AllergyRecordService) CreateAllergyRecord(allergyRecord *model.AllergyRecord) (*model.AllergyRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	if &allergyRecord.Status == nil {
		return nil, errors.New("Missing a required field AllergyStatus aborting before saving to the DB")
	}

	if &allergyRecord.Criticality == nil {
		return nil, errors.New("Missing a required field AllergyCriticality aborting before saving to the DB")
	}

	hError := ValidateHealthRecord(&allergyRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Allergy Record Error : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(allergyRecord)
	if err != nil {
		fmt.Printf("DB Create Failed For Allergy Record Error : %v", err)
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &allergyRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(allergyRecord, allergyRecord.ConsumerID, id)
	return allergyRecord, nil
}

// Export ...
func (u *AllergyRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	allergyRecords, _ := u.FindByConsumerID(id)
	if allergyRecords != nil {
		allergyRecordsIterable := *allergyRecords
		records := []model.HealthRecordExportElement{}
		for _, allergyRecord := range allergyRecordsIterable {
			recordElements, _ := u.ExportElements(allergyRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *AllergyRecordService) ExportElements(allergyRecord *model.AllergyRecord) (*[]model.HealthRecordExportElement, error) {
	if allergyRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	// All records array
	records := []model.HealthRecordExportElement{}
	allergyReactions := *allergyRecord.Reactions

	for _, allergyReaction := range allergyReactions {
		//Value subtance
		valueSubstance := model.Value{}
		valueSubstance.ValueType = model.TEXT
		valueSubstance.ValueText = &allergyReaction.Substance

		// populate record substance
		recordSubstance := model.HealthRecordExportElement{}
		recordSubstance.Name = "Allergy Reaction"
		recordSubstance.TimeStamp = allergyRecord.Occurred
		recordSubstance.Value = valueSubstance
		recordSubstance.RecordID = util.UUID()
		recordSubstance.ConsumerID = allergyRecord.ConsumerID

		//populate the record
		records = append(records, recordSubstance)

		// Value Manifestation
		valueManifestation := model.Value{}
		valueManifestation.ValueType = model.TEXT
		valueManifestation.ValueText = &allergyReaction.Manifestation

		// populate record manifestation
		recordManifestation := model.HealthRecordExportElement{}
		recordManifestation.Name = "Allergy Manifestation"
		recordManifestation.TimeStamp = allergyRecord.Occurred
		recordManifestation.Value = valueSubstance
		recordManifestation.RecordID = util.UUID()
		recordManifestation.ConsumerID = allergyRecord.ConsumerID

		//populate the record
		records = append(records, recordManifestation)

		// Value Exposure Route
		valueExposureRoute := model.Value{}
		valueExposureRoute.ValueType = model.TEXT
		valueExposureRoute.ValueText = &allergyReaction.Manifestation

		// populate record manifestation
		recordExposureRoute := model.HealthRecordExportElement{}
		recordExposureRoute.Name = "Allergy Exposure Route"
		recordExposureRoute.TimeStamp = allergyRecord.Occurred
		recordExposureRoute.Value = valueSubstance
		recordExposureRoute.RecordID = util.UUID()
		recordExposureRoute.ConsumerID = allergyRecord.ConsumerID

		//populate the record
		records = append(records, recordExposureRoute)
	}

	return &records, nil
}
