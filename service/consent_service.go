package service

import (
	"errors"

	"github.com/Kaleidoscope-Backup/healthrecord-repository/model"
	"github.com/Kaleidoscope-Backup/mongo-lib/mserver"
	"github.com/globalsign/mgo/bson"
	"github.com/op/go-logging"
)

/*==========================================================================================
Consent service
==========================================================================================*/

// ConsentService is for creating consent
type ConsentService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewConsentService creates a new consent service that has all calls to the database, queries and mutations via the Data Access Layer
func NewConsentService(dal mserver.DataAccessLayer, log *logging.Logger) *ConsentService {
	return &ConsentService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *ConsentService) FindByID(id string) (*model.Consent, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching consent (if any) from Mongo
	p, err := u.dal.Get(id, &model.Consent{})
	if err != nil {
		return nil, err
	}

	var consent *model.Consent
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &consent)

	return consent, nil
}

// FindByConsumerID ...
func (u *ConsentService) FindByConsumerID(consumerID string) (*[]*model.Consent, error) {
	if consumerID == "" {
		return nil, errors.New("Missing parameter id")
	}

	var params map[string]string
	params = map[string]string{}
	params["consumerID"] = consumerID

	//find the matching consent Record (if any) from Mongo
	cnrArr, err := FindRecords(&params, &model.Consent{}, u.dal)
	if err != nil {
		return nil, err
	}

	var consentArr []*model.Consent
	for _, cnr := range cnrArr {
		var consentRecord *model.Consent
		bsonBytes, _ := bson.Marshal(cnr)
		bson.Unmarshal(bsonBytes, &consentRecord)
		consentArr = append(consentArr, consentRecord)
	}

	return &consentArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateConsent will create a new consent in Mongo using the Data Access Layer
func (u *ConsentService) CreateConsent(consent *model.Consent) (*model.Consent, error) {
	//validate required fields (besides Id which is generated by Post)
	if consent.Category == "" ||
		consent.ConsumerID == "" {

		return nil, errors.New("Missing a required field: aborting before saving to the DB")
	}

	id, err := u.dal.Post(consent)
	if err != nil {
		return nil, err
	}

	PostRecord(consent, consent.ConsumerID, id)
	return consent, nil
}
