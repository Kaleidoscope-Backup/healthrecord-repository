package service

import (
	"errors"
	"fmt"

	"github.com/globalsign/mgo/bson"
	logging "github.com/op/go-logging"
	"gitlab.com/karte/healthrecord-repository/model"
	"gitlab.com/karte/healthrecord-repository/util"
	"gitlab.com/karte/mongo-lib/mserver"
)

/*==========================================================================================
Medication Record service
==========================================================================================*/

//MedicationRecordService is for creating habmedications
type MedicationRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

//NewMedicationRecordService creates an array of medication
func NewMedicationRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *MedicationRecordService {
	return &MedicationRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

//FindByID ..
func (u *MedicationRecordService) FindByID(id string) (*model.MedicationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Medication Record (if any) from Mongo
	p, err := u.dal.Get(id, &model.MedicationRecord{})
	if err != nil {
		return nil, err
	}

	var medication *model.MedicationRecord
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &medication)

	return medication, nil
}

//FindByConsumerID ..
func (u *MedicationRecordService) FindByConsumerID(id string) (*[]*model.MedicationRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Medication Record (if any) from Mongo
	mrArr, err := FindHealthRecordsByConsumerID(id, &model.MedicationRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var medicationRecordArr []*model.MedicationRecord
	for _, mr := range mrArr {
		var medicationRecord *model.MedicationRecord
		bsonBytes, _ := bson.Marshal(mr)
		bson.Unmarshal(bsonBytes, &medicationRecord)
		medicationRecordArr = append(medicationRecordArr, medicationRecord)
	}

	return &medicationRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

//CreateMedicationRecord will create a new array of medications in Mongo using the Data Access Layer ...
func (u *MedicationRecordService) CreateMedicationRecord(medicationRecord *model.MedicationRecord) (*model.MedicationRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	hError := ValidateHealthRecord(&medicationRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Medication Record Error : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(medicationRecord)
	if err != nil {
		u.log.Errorf("DB Create Failed For Medication Record Error : %v", err)
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &medicationRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(medicationRecord, medicationRecord.ConsumerID, id)
	return medicationRecord, nil
}

// Export ...
func (u *MedicationRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	medicationRecords, _ := u.FindByConsumerID(id)
	if medicationRecords != nil {
		medicationRecordsIterable := *medicationRecords
		records := []model.HealthRecordExportElement{}
		for _, medicationRecord := range medicationRecordsIterable {
			recordElements, _ := u.ExportElements(medicationRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *MedicationRecordService) ExportElements(medicationRecord *model.MedicationRecord) (*[]model.HealthRecordExportElement, error) {
	if medicationRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	if medicationRecord.Medications == nil {
		return nil, errors.New("Cannot export. No medication defined")
	}

	// All records array
	records := []model.HealthRecordExportElement{}
	medications := *medicationRecord.Medications

	for _, medication := range medications {
		// Name
		valueName := model.Value{}
		valueName.ValueType = model.TEXT
		valueName.ValueText = &medication.ProductName

		// Populate record
		recordID := util.UUID()
		recordName := model.HealthRecordExportElement{}
		recordName.Name = "Medication"
		recordName.TimeStamp = medicationRecord.Occurred
		recordName.Value = valueName
		recordName.RecordID = recordID
		recordName.ConsumerID = medicationRecord.ConsumerID
		recordName.Location = medicationRecord.Location

		// Populate the record
		records = append(records, recordName)

		// Administration route
		valueRoute := model.Value{}
		valueRoute.ValueType = model.TEXT
		route := string(medication.Route)
		valueRoute.ValueText = &route

		// Populate record
		recordRoute := model.HealthRecordExportElement{}
		recordRoute.Name = "Administrative Route"
		recordRoute.TimeStamp = medicationRecord.Occurred
		recordRoute.Value = valueRoute
		recordRoute.RecordID = recordID
		recordRoute.ConsumerID = medicationRecord.ConsumerID
		recordRoute.Location = medicationRecord.Location

		// Populate the record
		records = append(records, recordRoute)

		// Dosage
		if medication.Dosage != nil {
			// Dosage Value
			valueDosageValue := model.Value{}
			valueDosageValue.ValueType = model.QUANTITY
			valueDosageValue.ValueQuantity = &medication.Dosage.Value

			// Populate record
			recordDosageValue := model.HealthRecordExportElement{}
			recordDosageValue.Name = "Dosage Value"
			recordDosageValue.TimeStamp = medicationRecord.Occurred
			recordDosageValue.Value = valueDosageValue
			recordDosageValue.RecordID = recordID
			recordDosageValue.ConsumerID = medicationRecord.ConsumerID
			recordDosageValue.Location = medicationRecord.Location

			// Populate the record
			records = append(records, recordDosageValue)

			// Dosage Frequency
			valueDosageFrequency := model.Value{}
			valueDosageFrequency.ValueType = model.TEXT
			valueDosageFrequency.ValueText = &medication.Dosage.Frequency
			valueDosageFrequency.Unit = &medication.Dosage.Unit

			// Populate record
			recordDosageFrequency := model.HealthRecordExportElement{}
			recordDosageFrequency.Name = "Dosage Frequency"
			recordDosageFrequency.TimeStamp = medicationRecord.Occurred
			recordDosageFrequency.Value = valueDosageFrequency
			recordDosageFrequency.RecordID = recordID
			recordDosageFrequency.ConsumerID = medicationRecord.ConsumerID
			recordDosageFrequency.Location = medicationRecord.Location

			// Populate the record
			records = append(records, recordDosageFrequency)
		}
	}

	return &records, nil
}
