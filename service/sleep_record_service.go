package service

import (
	"errors"
	"fmt"

	logging "github.com/op/go-logging"
	"gitlab.com/karte/healthrecord-repository/model"
	"gitlab.com/karte/healthrecord-repository/util"
	"gitlab.com/karte/mongo-lib/mserver"
	"gopkg.in/mgo.v2/bson"
)

//SleepRecordService ...
type SleepRecordService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

//NewSleepRecordService ...
func NewSleepRecordService(dal mserver.DataAccessLayer, log *logging.Logger) *SleepRecordService {
	return &SleepRecordService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

//FindByID ...
func (u *SleepRecordService) FindByID(id string) (*model.SleepRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}
	//find the matching Vital (if any) from Mongo
	hr, err := u.dal.Get(id, &model.SleepRecord{})
	if err != nil {
		return nil, err
	}

	//we need to unmarshal the result from type bson.M{} to model.Vital
	//Convert BSON (byte) to JSON Fields
	var sleepRecord *model.SleepRecord
	bsonBytes, _ := bson.Marshal(hr)
	bson.Unmarshal(bsonBytes, &sleepRecord)

	return sleepRecord, nil
}

//FindByConsumerID ..
func (u *SleepRecordService) FindByConsumerID(id string) (*[]*model.SleepRecord, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching SleepRecord (if any) from Mongo
	srArr, err := FindHealthRecordsByConsumerID(id, &model.SleepRecord{}, u.dal)
	if err != nil {
		return nil, err
	}

	var sleepRecordArr []*model.SleepRecord
	for _, sr := range srArr {
		var sleepRecord *model.SleepRecord
		bsonBytes, _ := bson.Marshal(sr)
		bson.Unmarshal(bsonBytes, &sleepRecord)
		sleepRecordArr = append(sleepRecordArr, sleepRecord)
	}

	return &sleepRecordArr, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

//CreateSleepRecord ...
func (u *SleepRecordService) CreateSleepRecord(sleepRecord *model.SleepRecord) (*model.SleepRecord, error) {

	//validate required fields (besides Id which is generated by Post)
	hError := ValidateHealthRecord(&sleepRecord.HealthRecord)
	if hError != nil {
		fmt.Printf("DB Create Failed For Sleep Record Error : %v", hError)
		return nil, hError
	}

	if &sleepRecord.StartTime == nil || &sleepRecord.EndTime == nil {
		fmt.Printf("Mandator parameter misssinh : %v", hError)
		return nil, hError
	}

	id, err := u.dal.Post(sleepRecord)
	if err != nil {
		return nil, err
	}

	errHr := u.dal.PostWithID(id, &sleepRecord.HealthRecord)
	if errHr != nil {
		return nil, err
	}

	PostRecord(sleepRecord, sleepRecord.ConsumerID, id)
	return sleepRecord, nil
}

// Export ...
func (u *SleepRecordService) Export(id string) (*[]model.HealthRecordExportElement, error) {
	if id == "" {
		return nil, errors.New("Missing parameter")
	}

	sleepRecords, _ := u.FindByConsumerID(id)

	if sleepRecords != nil {
		sleepRecordsIterable := *sleepRecords
		records := []model.HealthRecordExportElement{}
		for _, sleepRecord := range sleepRecordsIterable {
			recordElements, _ := u.ExportElements(sleepRecord)
			records = append(records, *recordElements...)
		}
		return &records, nil
	}

	return nil, nil
}

// ExportElements ...
func (u *SleepRecordService) ExportElements(sleepRecord *model.SleepRecord) (*[]model.HealthRecordExportElement, error) {
	if sleepRecord == nil {
		return nil, errors.New("Missing parameter")
	}

	//Location
	location := sleepRecord.Location

	// all records array
	records := []model.HealthRecordExportElement{}
	recordID := util.UUID()

	// Sleep start time
	valueSleepStart := model.Value{}
	valueSleepStart.ValueType = model.DATE_TIME
	valueSleepStart.Unit = sleepRecord.TimeUnit
	valueSleepStart.ValueDate = &sleepRecord.StartTime

	// Record
	recordSleepStart := model.HealthRecordExportElement{}
	recordSleepStart.Name = "Sleep Start Time"
	recordSleepStart.TimeStamp = sleepRecord.Occurred
	recordSleepStart.ConsumerID = sleepRecord.ConsumerID
	recordSleepStart.RecordID = recordID
	recordSleepStart.Value = valueSleepStart
	recordSleepStart.Location = location

	//populate the record
	records = append(records, recordSleepStart)

	// Sleep end time
	valueSleepEnd := model.Value{}
	valueSleepEnd.ValueType = model.DATE_TIME
	valueSleepEnd.Unit = sleepRecord.TimeUnit
	valueSleepEnd.ValueDate = &sleepRecord.StartTime

	// Record
	recordSleepEnd := model.HealthRecordExportElement{}
	recordSleepEnd.Name = "Sleep End Time"
	recordSleepEnd.TimeStamp = sleepRecord.Occurred
	recordSleepEnd.ConsumerID = sleepRecord.ConsumerID
	recordSleepEnd.RecordID = recordID
	recordSleepEnd.Value = valueSleepEnd
	recordSleepEnd.Location = location

	//populate the record
	records = append(records, recordSleepEnd)

	// Total Recording Time
	if sleepRecord.TotalRecordingTime != nil {
		value := model.Value{}
		value.ValueType = model.DECIMAL
		value.Unit = sleepRecord.TimeUnit
		value.ValueDecimal = sleepRecord.TotalRecordingTime

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Sleep Total Recording Time"
		record.TimeStamp = sleepRecord.Occurred
		record.ConsumerID = sleepRecord.ConsumerID
		record.RecordID = recordID
		record.Value = value
		record.Location = location

		//populate the record
		records = append(records, record)
	}

	// Total Sleep Time
	if sleepRecord.TotalSleepTime != nil {
		value := model.Value{}
		value.ValueType = model.DECIMAL
		value.Unit = sleepRecord.TimeUnit
		value.ValueDecimal = sleepRecord.TotalSleepTime

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Sleep Total Sleep Time"
		record.TimeStamp = sleepRecord.Occurred
		record.ConsumerID = sleepRecord.ConsumerID
		record.RecordID = recordID
		record.Value = value
		record.Location = location

		//populate the record
		records = append(records, record)
	}

	// Time Awake
	if sleepRecord.TimeAwake != nil {
		value := model.Value{}
		value.ValueType = model.DECIMAL
		value.Unit = sleepRecord.TimeUnit
		value.ValueDecimal = sleepRecord.TimeAwake

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Sleep Time Awake"
		record.TimeStamp = sleepRecord.Occurred
		record.ConsumerID = sleepRecord.ConsumerID
		record.RecordID = recordID
		record.Value = value
		record.Location = location

		//populate the record
		records = append(records, record)
	}

	// Sleep efficiency
	if sleepRecord.SleepEfficiency != nil {
		value := model.Value{}
		value.ValueType = model.DECIMAL
		value.Unit = sleepRecord.TimeUnit
		value.ValueDecimal = sleepRecord.SleepEfficiency

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Sleep Efficiency"
		record.TimeStamp = sleepRecord.Occurred
		record.ConsumerID = sleepRecord.ConsumerID
		record.RecordID = recordID
		record.Value = value
		record.Location = location

		//populate the record
		records = append(records, record)
	}

	// Time to fall asleep
	if sleepRecord.TimeToFallAsleep != nil {
		value := model.Value{}
		value.ValueType = model.DECIMAL
		value.Unit = sleepRecord.TimeUnit
		value.ValueDecimal = sleepRecord.TimeToFallAsleep

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Sleep Time To Fall Asleep"
		record.TimeStamp = sleepRecord.Occurred
		record.ConsumerID = sleepRecord.ConsumerID
		record.RecordID = recordID
		record.Value = value
		record.Location = location

		//populate the record
		records = append(records, record)
	}

	// Time after sleep
	if sleepRecord.TimeAfterWakeup != nil {
		value := model.Value{}
		value.ValueType = model.DECIMAL
		value.Unit = sleepRecord.TimeUnit
		value.ValueDecimal = sleepRecord.TimeAfterWakeup

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Sleep Time After Wake Up"
		record.TimeStamp = sleepRecord.Occurred
		record.ConsumerID = sleepRecord.ConsumerID
		record.RecordID = recordID
		record.Value = value
		record.Location = location

		//populate the record
		records = append(records, record)
	}

	// Time after sleep
	if sleepRecord.TimeInBed != nil {
		value := model.Value{}
		value.ValueType = model.DECIMAL
		value.Unit = sleepRecord.TimeUnit
		value.ValueDecimal = sleepRecord.TimeInBed

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Sleep Time In Bed"
		record.TimeStamp = sleepRecord.Occurred
		record.ConsumerID = sleepRecord.ConsumerID
		record.RecordID = recordID
		record.Value = value
		record.Location = location

		//populate the record
		records = append(records, record)
	}

	// Number of awakenings
	if sleepRecord.NumberOfAwekenings != nil {
		value := model.Value{}
		value.ValueType = model.QUANTITY
		value.Unit = sleepRecord.TimeUnit
		value.ValueQuantity = sleepRecord.NumberOfAwekenings

		// Record
		record := model.HealthRecordExportElement{}
		record.Name = "Sleep Number of Awakening"
		record.TimeStamp = sleepRecord.Occurred
		record.ConsumerID = sleepRecord.ConsumerID
		record.RecordID = recordID
		record.Value = value
		record.Location = location

		//populate the record
		records = append(records, record)
	}

	return &records, nil
}
