package service

import (
	"errors"

	"github.com/Kaleidoscope-Backup/healthrecord-repository/model"
	"github.com/Kaleidoscope-Backup/mongo-lib/mserver"
	"github.com/globalsign/mgo/bson"
	"github.com/op/go-logging"
)

/*==========================================================================================
Address service
==========================================================================================*/

// AddressService is for creating address
type AddressService struct {
	dal mserver.DataAccessLayer
	log *logging.Logger
}

// NewAddressService creates a new Address service that has all calls to the database, queries and mutations via the Data Access Layer
func NewAddressService(dal mserver.DataAccessLayer, log *logging.Logger) *AddressService {
	return &AddressService{dal: dal, log: log}
}

/*==========================================================================================
Query Operations
==========================================================================================*/

// FindByID ..
func (u *AddressService) FindByID(id string) (*model.Address, error) {
	if id == "" {
		return nil, errors.New("Missing parameter id")
	}

	//find the matching Address (if any) from Mongo
	p, err := u.dal.Get(id, &model.Address{})
	if err != nil {
		return nil, err
	}

	var address *model.Address
	bsonBytes, _ := bson.Marshal(p)
	bson.Unmarshal(bsonBytes, &address)

	return address, nil
}

/*==========================================================================================
Mutation Operations
==========================================================================================*/

// CreateAddress will create a new address in Mongo using the Data Access Layer
func (u *AddressService) CreateAddress(address *model.Address) (*model.Address, error) {
	//validate required fields (besides Id which is generated by Post)
	if address.City == "" ||
		address.Country == "" ||
		address.State == "" ||
		address.StreetName == "" ||
		address.StreetNumber == "" ||
		address.ZipCode == "" {

		return nil, errors.New("Missing a required field: aborting before saving to the DB")
	}

	_, err := u.dal.Post(address)
	if err != nil {
		return nil, err
	}

	return address, nil
}
