package main

import (
	"crypto/tls"
	"fmt"
	"log"
	"net"
	"net/http"
	"time"

	c "github.com/Kaleidoscope-Backup/healthrecord-repository/constant"
	"github.com/Kaleidoscope-Backup/healthrecord-repository/resolver"
	"github.com/Kaleidoscope-Backup/healthrecord-repository/schema"
	"github.com/Kaleidoscope-Backup/healthrecord-repository/service"
	"github.com/Kaleidoscope-Backup/healthrecord-repository/util"
	"github.com/Kaleidoscope-Backup/microservice-utilities/auth0"
	h "github.com/Kaleidoscope-Backup/microservice-utilities/handler"
	"github.com/Kaleidoscope-Backup/microservice-utilities/loader"
	"github.com/Kaleidoscope-Backup/mongo-lib/mserver"
	"github.com/codegangsta/negroni"
	"github.com/globalsign/mgo"
	"github.com/gobuffalo/packr"
	graphqlGo "github.com/graph-gophers/graphql-go"
	logging "github.com/op/go-logging"
	"golang.org/x/net/context"
)

// Main function to run
func main() {
	//Start with Karte's Default Config and change as needed
	config := util.SetupConfig()
	mconfig := config.MongoConfig()

	//This creates a new Mongo Server
	s := mserver.NewServer(mconfig)
	var err error
	var mongoSession *mgo.Session

	// Establish initial connection to mongo
	if config.Local == "DEV" {
		mongoURI := "mongodb://" + config.DatabaseHost + ":" + config.DatabasePort
		mongoSession, err = mgo.Dial(mongoURI)
		if err != nil {
			panic(err)
		}
	} else if config.Local == "GCP" || config.Local == "GCP-PROD" {
		mongoURI := "mongodb://" + config.DatabaseUsername + ":" + config.DatabasePassword + "@" + config.DatabaseHost
		dialInfo, err := mgo.ParseURL(mongoURI)
		if err != nil {
			fmt.Println(err)
		}

		//Below part is similar to above.
		tlsConfig := &tls.Config{}
		dialInfo.DialServer = func(addr *mgo.ServerAddr) (net.Conn, error) {
			conn, err := tls.Dial("tcp", addr.String(), tlsConfig)
			return conn, err
		}

		mongoSession, err = mgo.DialWithInfo(dialInfo)
		if err != nil {
			panic(err)
		}
	} else if config.Local == "ALI" {
		mongoURI := "mongodb://" + config.DatabaseUsername + ":" + config.DatabasePassword + "@" + config.DatabaseHost
		dialInfo, err := mgo.ParseURL(mongoURI)
		if err != nil {
			fmt.Println(err)
		}

		mongoSession, err = mgo.DialWithInfo(dialInfo)
		if err != nil {
			panic(err)
		}
	}
	defer mongoSession.Close()

	mongoSession.SetSocketTimeout(s.Config.DatabaseSocketTimeout)

	//establish mongo session and DB object
	s.Database = mongoSession.DB(s.Config.DatabaseName)

	// Establish karte database masterSession
	masterSession := mserver.NewMasterSession(mongoSession, s.Config.DatabaseName)
	log.Println("MongoDB: Connected")

	// Ensure all indexes in Mongo (builds indexes in NoSQL)
	mserver.NewIndexer(s.Config).ConfigureIndexes(masterSession)

	// Establish admin mongoSession
	masterAdminSession := mserver.NewMasterSession(mongoSession, "admin")

	// Kick off the database op monitoring routine. This periodically checks db.currentOp() and
	// kills client-initiated operations exceeding the configurable timeout. Do this AFTER the index
	// build to ensure no index build processes are killed unintentionally.
	ticker := time.NewTicker(s.Config.DatabaseKillOpPeriod)
	go mserver.KillLongRunningOps(ticker, masterAdminSession, s.Config)

	//Create DAL that is used for Data Interactions with Mongo directly
	dal := mserver.NewMongoDataAccessLayer(masterSession, s.Interceptors, s.Config)

	//This is to set up graphql
	ctx := context.Background()
	log := service.NewLogger(&config)

	ctx = context.WithValue(ctx, "config", config)
	ctx = context.WithValue(ctx, "log", log)

	ctx = setupServiceSingletons(ctx, log, dal)

	//generic handlers
	loggerHandler := &h.LoggerHandler{config.Debug}
	jwtMiddleware := auth0.NewJWTMiddleware(config.AuthAud, config.AuthISS)

	//query setup
	graphqlSchema := graphqlGo.MustParseSchema(schema.GetRootSchema(), &resolver.Resolver{})
	graphqlHandler := &h.GraphQL{Schema: graphqlSchema, Loaders: loader.NewLoaderCollection()}
	n := negroni.New()
	n.Use(negroni.HandlerFunc(jwtMiddleware.HandlerWithNext))
	// For now diabling Auth scope
	//n.Use(negroni.HandlerFunc(h.AuthScopeHandler))
	n.Use(negroni.Wrap(graphqlHandler))
	http.Handle("/query", h.AddContext(ctx, loggerHandler.Logging(n)))

	//serve static documentation generated by https://github.com/2fd/graphdoc
	box := packr.NewBox("../../doc/schema")
	http.Handle("/", http.FileServer(box))

	log.Fatal(http.ListenAndServe(":"+config.AppPort, nil))

}

func setupServiceSingletons(ctx context.Context, log *logging.Logger, dal mserver.DataAccessLayer) context.Context {

	//add singleton services for Organization
	organizationService := service.NewOrganizationService(dal, log)
	ctx = context.WithValue(ctx, c.OrganizationService, organizationService)

	//add singleton service for Practitioner
	practitionerService := service.NewPractitionerService(dal, log)
	ctx = context.WithValue(ctx, c.PractitionerService, practitionerService)

	//add singleton service for Consumer
	consumerService := service.NewConsumerService(dal, log)
	ctx = context.WithValue(ctx, c.ConsumerService, consumerService)

	heartRateService := service.NewHeartRateService(dal, log)
	ctx = context.WithValue(ctx, c.HeartRateService, heartRateService)

	//db admin services
	clinicalCodeService := service.NewClinicalCodeService(dal, log)
	ctx = context.WithValue(ctx, c.ClinicalCodeService, clinicalCodeService)

	dosageService := service.NewDosageService(dal, log)
	ctx = context.WithValue(ctx, c.DosageService, dosageService)

	strengthService := service.NewStrengthService(dal, log)
	ctx = context.WithValue(ctx, c.StrengthService, strengthService)

	medicationService := service.NewMedicationService(dal, log)
	ctx = context.WithValue(ctx, c.MedicationService, medicationService)

	contactPointService := service.NewContactPointService(dal, log)
	ctx = context.WithValue(ctx, c.ContactPointService, contactPointService)

	sourceRecordIDService := service.NewSourceRecordIDService(dal, log)
	ctx = context.WithValue(ctx, c.SourceRecordIDService, sourceRecordIDService)

	sourceConsumerIDService := service.NewSourceConsumerIDService(dal, log)
	ctx = context.WithValue(ctx, c.SourceConsumerIDService, sourceConsumerIDService)

	sourceOrganizationIDService := service.NewSourceOrganizationIDService(dal, log)
	ctx = context.WithValue(ctx, c.SourceOrganizationIDService, sourceOrganizationIDService)

	accountService := service.NewAccountService(dal, log)
	ctx = context.WithValue(ctx, c.AccountService, accountService)

	socialHistoryObservationRecordService := service.NewSocialHistoryObservationRecordService(dal, log)
	ctx = context.WithValue(ctx, c.SocialHistoryObservationRecordService, socialHistoryObservationRecordService)

	medicationRecordService := service.NewMedicationRecordService(dal, log)
	ctx = context.WithValue(ctx, c.MedicationRecordService, medicationRecordService)

	allergyRecordService := service.NewAllergyRecordService(dal, log)
	ctx = context.WithValue(ctx, c.AllergyRecordService, allergyRecordService)

	encounterRecordService := service.NewEncounterRecordService(dal, log)
	ctx = context.WithValue(ctx, c.EncounterRecordService, encounterRecordService)

	procedureRecordService := service.NewProcedureRecordService(dal, log)
	ctx = context.WithValue(ctx, c.ProcedureRecordService, procedureRecordService)

	familyMemberHistoryRecordService := service.NewFamilyMemberHistoryRecordService(dal, log)
	ctx = context.WithValue(ctx, c.FamilyMemberHistoryRecordService, familyMemberHistoryRecordService)

	clinicalAssesmentObservationRecordService := service.NewClinicalAssesmentObservationRecordService(dal, log)
	ctx = context.WithValue(ctx, c.ClinicalAssesmentObservationRecordService, clinicalAssesmentObservationRecordService)

	personalCharacteristicsObservationRecordService := service.NewPersonalCharacteristicsObservationRecordService(dal, log)
	ctx = context.WithValue(ctx, c.PersonalCharacteristicsObservationRecordService, personalCharacteristicsObservationRecordService)

	imagingResultObservationRecordService := service.NewImagingResultObservationRecordService(dal, log)
	ctx = context.WithValue(ctx, c.ImagingResultObservationRecordService, imagingResultObservationRecordService)

	labResultObservationRecordService := service.NewLabResultObservationRecordService(dal, log)
	ctx = context.WithValue(ctx, c.LabResultObservationRecordService, labResultObservationRecordService)

	vitalObservationRecordService := service.NewVitalObservationRecordService(dal, log)
	ctx = context.WithValue(ctx, c.VitalObservationRecordService, vitalObservationRecordService)

	conditionRecordService := service.NewConditionRecordService(dal, log)
	ctx = context.WithValue(ctx, c.ConditionRecordService, conditionRecordService)

	immunizationRecordService := service.NewImmunizationRecordService(dal, log)
	ctx = context.WithValue(ctx, c.ImmunizationRecordService, immunizationRecordService)

	activityRecordService := service.NewActivityRecordService(dal, log)
	ctx = context.WithValue(ctx, c.ActivityRecordService, activityRecordService)

	mealRecordService := service.NewMealRecordService(dal, log)
	ctx = context.WithValue(ctx, c.MealRecordService, mealRecordService)

	goalRecordService := service.NewGoalRecordService(dal, log)
	ctx = context.WithValue(ctx, c.GoalRecordService, goalRecordService)

	sleepRecordService := service.NewSleepRecordService(dal, log)
	ctx = context.WithValue(ctx, c.SleepRecordService, sleepRecordService)

	adverseEventRecordService := service.NewAdverseEventRecordService(dal, log)
	ctx = context.WithValue(ctx, c.AdverseEventRecordService, adverseEventRecordService)

	healthRecordService := service.NewHealthRecordService(dal, log)
	ctx = context.WithValue(ctx, c.HealthRecordService, healthRecordService)

	addressService := service.NewAddressService(dal, log)
	ctx = context.WithValue(ctx, c.AddressService, addressService)

	consentService := service.NewConsentService(dal, log)
	ctx = context.WithValue(ctx, c.ConsentService, consentService)

	clinicalTrialService := service.NewClinicalTrialService(dal, log)
	ctx = context.WithValue(ctx, c.ClinicalTrialService, clinicalTrialService)

	codableConceptService := service.NewCodableConceptService(dal, log)
	ctx = context.WithValue(ctx, c.CodableConceptService, codableConceptService)

	conceptClassService := service.NewConceptClassService(dal, log)
	ctx = context.WithValue(ctx, c.ConceptClassService, conceptClassService)

	questionnaireService := service.NewQuestionnaireService(dal, log)
	ctx = context.WithValue(ctx, c.QuestionnaireService, questionnaireService)

	questionnaireResponseService := service.NewQuestionnaireResponseService(dal, log)
	ctx = context.WithValue(ctx, c.QuestionnaireResponseService, questionnaireResponseService)

	notificationService := service.NewNotificationService(dal, log)
	ctx = context.WithValue(ctx, c.NotificationService, notificationService)

	acknowledgementService := service.NewAcknowledgementService(dal, log)
	ctx = context.WithValue(ctx, c.AcknowledgementService, acknowledgementService)

	relationshipService := service.NewRelationshipService(dal, log)
	ctx = context.WithValue(ctx, c.RelationshipService, relationshipService)

	productService := service.NewProductService(dal, log)
	ctx = context.WithValue(ctx, c.ProductService, productService)

	orderService := service.NewOrderService(dal, log)
	ctx = context.WithValue(ctx, c.OrderService, orderService)

	orderEventService := service.NewOrderEventService(dal, log)
	ctx = context.WithValue(ctx, c.OrderEventService, orderEventService)

	orderBagService := service.NewOrderBagService(dal, log)
	ctx = context.WithValue(ctx, c.OrderBagService, orderBagService)

	applicationService := service.NewApplicationService(dal, log)
	ctx = context.WithValue(ctx, c.ApplicationService, applicationService)

	referralRequestService := service.NewReferralRequestService(dal, log)
	ctx = context.WithValue(ctx, c.ReferralRequestService, referralRequestService)

	appointmentRecordService := service.NewAppointmentRecordService(dal, log)
	ctx = context.WithValue(ctx, c.AppointmentRecordService, appointmentRecordService)

	slotService := service.NewSlotService(dal, log)
	ctx = context.WithValue(ctx, c.SlotService, slotService)

	scheduleService := service.NewScheduleService(dal, log)
	ctx = context.WithValue(ctx, c.ScheduleService, scheduleService)

	appointmentResponseService := service.NewAppointmentResponseService(dal, log)
	ctx = context.WithValue(ctx, c.AppointmentResponseService, appointmentResponseService)

	nutritionOrderRecordService := service.NewNutritionOrderRecordService(dal, log)
	ctx = context.WithValue(ctx, c.NutritionOrderRecordService, nutritionOrderRecordService)

	deviceService := service.NewDeviceService(dal, log)
	ctx = context.WithValue(ctx, c.DeviceService, deviceService)

	deviceMetricService := service.NewDeviceMetricService(dal, log)
	ctx = context.WithValue(ctx, c.DeviceMetricService, deviceMetricService)

	deviceDataSourceService := service.NewDeviceDataSourceService(dal, log)
	ctx = context.WithValue(ctx, c.DeviceDataSourceService, deviceDataSourceService)

	diagnosticReportRecordService := service.NewDiagnosticReportRecordService(dal, log)
	ctx = context.WithValue(ctx, c.DiagnosticReportRecordService, diagnosticReportRecordService)

	observationDefinitionCollectionService := service.NewObservationDefinitionCollectionService(dal, log)
	ctx = context.WithValue(ctx, c.ObservationDefinitionCollectionService, observationDefinitionCollectionService)

	observationRecordService := service.NewObservationRecordService(dal, log)
	ctx = context.WithValue(ctx, c.ObservationRecordService, observationRecordService)

	molecularSequenceRecordService := service.NewMolecularSequenceRecordService(dal, log)
	ctx = context.WithValue(ctx, c.MolecularSequenceRecordService, molecularSequenceRecordService)

	messageService := service.NewMessageService(dal, log)
	ctx = context.WithValue(ctx, c.MessageService, messageService)

	reviewService := service.NewReviewService(dal, log)
	ctx = context.WithValue(ctx, c.ReviewService, reviewService)

	documentReferenceService := service.NewDocumentReferenceService(dal, log)
	ctx = context.WithValue(ctx, c.DocumentReferenceService, documentReferenceService)

	conditionDefinitionCollectionService := service.NewConditionDefinitionCollectionService(dal, log)
	ctx = context.WithValue(ctx, c.ConditionDefinitionCollectionService, conditionDefinitionCollectionService)

	listService := service.NewListService(dal, log)
	ctx = context.WithValue(ctx, c.ListService, listService)

	commentService := service.NewCommentService(dal, log)
	ctx = context.WithValue(ctx, c.CommentService, commentService)

	customerFeedbackService := service.NewCustomerFeedbackService(dal, log)
	ctx = context.WithValue(ctx, c.CustomerFeedbackService, customerFeedbackService)

	healthcareServiceService := service.NewHealthcareServiceService(dal, log)
	ctx = context.WithValue(ctx, c.HealthcareServiceService, healthcareServiceService)

	//add singleton services for Health record export
	healthRecordExportService := service.NewHealthRecordExportService(ctx, log)
	ctx = context.WithValue(ctx, c.HealthRecordExportService, healthRecordExportService)

	return ctx
}
