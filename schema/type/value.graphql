
enum ValueType {
    QUANTITY
    DECIMAL
    BOOLEAN
    RANGE
    RATIO
    TEXT
    DATE_TIME
    PERIOD
    RATING
    REFERENCE_ENTITY
}

input ValueInput {
    valueType: ValueType!
    valueQuantity: Int
    valueDecimal: Float 
    valueBoolean: Boolean
    valueText: String
    valueRange: RangeInput
    valueRatio: RatioInput
    valueDate: Time
    valuePeriod: PeriodInput
    valueRating: RatingInput 
    valueReferenceEntity: ReferenceEntityInput
    unit: String
}

type Value {
    id: String!
    valueType: ValueType!
    valueQuantity: Int
    valueDecimal: Float
    valueRange: Range
    valueBoolean: Boolean
    valueText: String
    valueDate: Time
    valuePeriod: Period
    valueRating: Rating 
    valueReferenceEntity: ReferenceEntity
    unit: String
}

# A SampledData provides a concise way to handle the data produced by devices that sample a particular physical state at a high frequency.
input SampledDataInput {
    # Zero value and units
    origin: Int!
    # unit of measure
    unit: String!
    # Number of milliseconds between samples
    period: Float!
    # Multiply data by this before adding to origin
    factor: Float!
    # Lower limit of detection
    lowerLimit: Float 
    # Upper limit of detection
    upperLimit: Float
    # Number of sample points at each time point
    dimensions: Int 
    # Decimal values with spaces, or "E" | "U" | "L"
    data: String 
}

# A SampledData provides a concise way to handle the data produced by devices that sample a particular physical state at a high frequency.
type SampledData {
    id: String!
    # Zero value and units
    origin: Int!
    # unit of measure
    unit: String!
    # Number of milliseconds between samples
    period: Float!
    # Multiply data by this before adding to origin
    factor: Float!
    # Lower limit of detection
    lowerLimit: Float 
    # Upper limit of detection
    upperLimit: Float
    # Number of sample points at each time point
    dimensions: Int 
    # Decimal values with spaces, or "E" | "U" | "L"
    data: String 
}

input RatingInput {
    min: Int! 
    max: Int!
    ratingValue: Int!
}

type Rating {
    id: String!
    min: Int! 
    max: Int!
    ratingValue: Int!
}

input PeriodInput {
    start: Time!
    end: Time!
}

type Period {
    id: String!
    start: Time!
    end: Time!
}

input RangeInput {
    min: Int!
    max: Int!
}

type Range {
    id: String!
    min: Int!
    max: Int!
}

input RatioInput {
    numerator: Int!
    denominator: Int!
}

type Ratio {
    id: String!
    numerator: Int!
    denominator: Int!
}
