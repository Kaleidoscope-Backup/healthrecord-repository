
enum CodeSystemType {
    # INTERNAL org defined terminology system
    INTERNAL

    # FHIR standard defined definition system
    FHIR

    # ICD is a system used by physicians and other healthcare providers to classify and code all diagnoses, symptoms and procedures recorded in conjunction with hospital care in the United States.
    ICD11

    # ICD is a system used by physicians and other healthcare providers to classify and code all diagnoses, symptoms and procedures recorded in conjunction with hospital care in the United States.
    ICD10

    # ICD is a system used by physicians and other healthcare providers to classify and code all diagnoses, symptoms and procedures recorded in conjunction with hospital care in the United States.
    ICD9

    # SNOMED Clinical Terms is a systematically organized computer processable collection of medical terms providing codes, terms, synonyms and definitions used in clinical documentation and reporting
    SNOMEDCT

    # LOINC - Logical Observation Identifiers Names and Codes (LOINC) is a database and universal standard for identifying medical laboratory observations. 
    LOINC

    # Unified Medical Language System (UMLS) The UMLS integrates and distributes key terminology, classification and coding standards, and associated resources to promote creation of more effective and interoperable biomedical information systems and services, including electronic health records.
    UMLS

    # Current Procedural Terminology (CPT) is a medical code set that is used to report medical, surgical, and diagnostic procedures and services to entities such as physicians, health insurance companies and accreditation organizations.
    CPT

    # RxNorm is two things: a normalized naming system for generic and branded drugs; and a tool for supporting semantic interoperation between drug terminologies and pharmacy knowledge base systems.
    RXNORM
}

# Concept classes
input ConceptClassesInput {
    conceptClasses: [ConceptClassInput!]
}

input ConceptClassQueryParam {
    name: String
    externalID: String
    all: Boolean
}

# The classification of a concept.
input ConceptClassInput {
   externalID: String!
   name: String!
   description: TextInput!
}


# The classification of a concept.
type ConceptClass {
   id: String!
   externalID: String!
   name: String!
   description: Text!
}

# A CodeableConcept represents a value that is usually supplied by providing a reference to one or more terminologies or ontologies, but may also be defined by the provision of text. 
input CodableConceptInput {
     # Plain text representation of the concept
     text: String

     conceptClass: String!
     # Code defined by a terminology system
     coding: [CodeInput!]
}


# A CodeableConcept represents a value that is usually supplied by providing a reference to one or more terminologies or ontologies, but may also be defined by the provision of text. 
# Each coding is a representation of the concept as described above. The concept may be coded multiple times in different code systems (or even multiple times in the same code systems, where multiple forms are possible, such as with SNOMED CT). The different codings may have slightly different granularity due to the differences in the definitions of the underlying codes. There is no meaning associated with the ordering of coding within a CodeableConcept. A typical use of CodeableConcept is to send the local code that the concept was coded with, and also one or more translations to publicly defined code systems such as LOINC or SNOMED CT. Sending local codes is useful and important for the purposes of debugging and integrity auditing.
type CodableConcept {
     id: String!
     # Plain text representation of the concept
     text: String

     conceptClass: String!
     # Code defined by a terminology system
     coding: [Code!]
}

# A Coding is a representation of a defined concept using a symbol from a defined "code system"
input CodeInput {
    # code system reference
    system: CodeSystemType!

    # Version of the system - if relevant
    version: String 

    # Code that identifies clinical concept
    code: String!

    # Text to display to the user
    display: String!

    # An explanation of the meaning of the concept
    definition: String 

    # Additional notes about how to use the code
    comment: String 

    # language in which it is defined
    language: Language 

    # If this coding was chosen directly by the user
    userSelected: Boolean 
}


# A Coding is a representation of a defined concept using a symbol from a defined "code system"
type Code {
    id: String!

    # code system reference
    system: CodeSystemType!

    # Version of the system - if relevant
    version: String 

    # Code that identifies clinical concept
    code: String!

    # Text to display to the user
    display: String!

    # An explanation of the meaning of the concept
    definition: String 

    # Additional notes about how to use the code
    comment: String 

    # language in which it is defined
    language: Language 

    # If this coding was chosen directly by the user
    userSelected: Boolean 
}

# to input a reference code for health record
input ClinicalCodeInput {
    # Code that identifies clinical concept
    code: String!

    # Text to display to the user
    display: String!

    # Formal definition
    definition: String!
    
    # language in which it is defined
    language: String

    # code system reference
    systemType: CodeSystemType!
}

# clinical code from one or more code systems specifies a code that can be used in a particular context.
type ClinicalCode {
    id: String!

    # Code that identifies clinical concept
    code: String!

    # Text to display to the user
    display: String!

    # Formal definition
    definition: String!

    # language in which it is defined
    language: String 

    # code system this code belongs to
    systemType: CodeSystemType!
}

