schema {
    query: Query
    mutation: Mutation
}

type Query {

    # adverse event 
    adverseEventRecord(id: String!): AdverseEventRecord

    # activity record
    activityRecord(id: String!): ActivityRecord
    activityRecords(params: ActivityRecordQueryParam!): [ActivityRecord!]
    activityRecordsByConsumerID(consumerID: String!): [ActivityRecord!]

    #application
    application(id: String!): Application
    applicationByName(name: String!): [Application!]
    applicationProfile(app: String!, profile: String!): [ApplicationProfile!]

    # appointment response
    appointmentResponse(id: String!): AppointmentResponse

    # allergy record
    allergyRecord(id: String!): AllergyRecord
    allergyRecords(consumerID: String!): [AllergyRecord!]

    # Get consumer.
	consumer(id: String!): Consumer
    consumerByEmail(emailID: String!): [Consumer!]

    # condition record
    conditionRecord(id: String!): ConditionRecord
    conditionRecords(consumerID: String!): [ConditionRecord!]

    # Comment 
    comment(id: String!): Comment 

    # clinical assesment record
    clinicalAssesmentObservationRecord(id: String!): ClinicalAssesmentObservationRecord

    # clinical trial
    clinicalTrial(id: String!): ClinicalTrial

    # clinical code
    clinicalCode(id: String!): ClinicalCode

    # consent
    consent(id: String!): Consent
    consents(consumerID: String!): [Consent!]

    # condition definition collection
    conditionDefinitionCollection(id: String!): ConditionDefinitionCollection

    # concept class
    conceptClass(id: String!): ConceptClass
    conceptClasses(param: ConceptClassQueryParam!): [ConceptClass!] 

    # Feedback
    customerFeedback(id: String!): CustomerFeedback 
    customerFeedbacks(applicationID: String!): [CustomerFeedback!]

    # document reference
    documentReference(id: String!): DocumentReference 
    documentReferences(param: DocumentReferenceQueryParam!): [DocumentReference!]

    # device
    device(id: String!): Device

    # device metric
    deviceMetric(id: String!): DeviceMetric
    #deviceMetrics(deviceID: String!): [DeviceMetric!]

    # diagnostic report
    diagnosticReportRecord(id: String!): DiagnosticReportRecord 

    # device data source
    deviceDataSource(id: String!): DeviceDataSource 
    # deviceDataSources(consumerID: String!) [DeviceDataSource!]

    # encounter record
    encounterRecord(id: String!): EncounterRecord

    # Export in different format
    export(param: ExportParams!): Result 

    # family member history
    familyMemberHistoryRecord(id: String!): FamilyMemberHistoryRecord

    # goal record
    goalRecord(id: String!): GoalRecord

    # generate OTP
    generateOtp(userName: String!): AccountAttribute

    # a single health record from timeline
    healthRecord(id: String!): HealthRecord
    healthRecords(consumerID: String!): [HealthRecord!]

    # Healthcare service
    healthcareService(id: String!): HealthcareService 

    # immunization record
    immunizationRecord(id: String!): ImmunizationRecord
    immunizationRecords(consumerID: String!): [ImmunizationRecord!]

    # get imaging result
    imagingResultObservationRecord(id: String!): ImagingResultObservationRecord

    # lab result
    labResultObservationRecord(id: String!): LabResultObservationRecord
    labResultObservationRecords(param: LabResultObservationRecordQueryParam!): [LabResultObservationRecord!]
    labResultObservationRecordsByConsumerID(consumerID: String!): [LabResultObservationRecord!]

    # List
    list(id: String!): List 

    # Login
    login(loginInfo: LoginInfoInput!): Result 

    # medication record
    medicationRecord(id: String!): MedicationRecord
    medicationRecords(consumerID: String!): [MedicationRecord]

    # molecular sequence
    molecularSequenceRecord(id: String!): MolecularSequenceRecord

	# Get organization.
	organization(id: String!): Organization
    organizations(param: OrganizationQueryParam!): [Organization!]
    organizationMembers(id: String!): [Practitioner!]

    # procedure record
    procedureRecord(id: String!): ProcedureRecord
    
    # personal characteristics observations
    personalCharacteristicsObservationRecord(id: String!): PersonalCharacteristicsObservationRecord
    personalCharacteristicsObservationRecords(consumerID: String!): [PersonalCharacteristicsObservationRecord!]
    # Get practitioner by Id
    practitioner(id: String!): Practitioner
    practitionerByEmail(emailID: String!): [Practitioner!]

    # soacialHistoryObservation
    socialHistoryObservationRecord(id: String!): SocialHistoryObservationRecord
    socialHistoryObservationRecordsByConsumerID(consumerID: String!): [SocialHistoryObservationRecord!]
    socialHistoryObservationRecords(params: SocialHistoryObservationRecordQueryParam!): [SocialHistoryObservationRecord!]

    # search for consumer health records
    searchHealthRecordDetail(criteria: SearchInput): SearchResults

    # only the basic info from health record collection
    searchHealthRecordTimeline(criteria: SearchInput): [HealthRecord!]

    # meal record
    mealRecord(id: String!): MealRecord

    # sleep record
    sleepRecord(id: String!): SleepRecord

    # questionnaire
    questionnaire(id: String!): Questionnaire
    questionnaires(params: QuestionnaireQueryParam!): [Questionnaire!]

    # questionnaire response
    questionnaireResponse(id: String!): QuestionnaireResponse

    # notifcation
    notification(id: String!): Notification

    # active notifications
    activeNotifications(customer: String!):[Notification!]

    # acknowledgement
    acknowledgement(id: String!): Acknowledgement

    # relationship
    relationship(id: String!): Relationship
    relationshipFrom(fromID: String!): [Relationship!]
    relationshipTo(toID: String!): [Relationship!]
    relationships(params: RelationshipQueryParam): [Relationship!]

    # order
    order(id: String!): Order
    ordersBySupplier(supplierID: String!): [Order!]
    orders(param: OrderQueryParam!): [Order!]
    orderDetails(param: OrderQueryParam!): [OrderDetail!]

    # order bag
    orderBag(id: String!): OrderBag 

    # order events
    orderEvent(id: String!): OrderEvent
    orderEventsByOrder(orderID: String!): [OrderEvent!]
    orderEvents(param: OrderEventQueryParam!): [OrderEvent!]

    # product
    product(id: String!): Product
    productsBySupplier(supplierID: String!): [Product!]
    products(param: ProductQueryParam!): [Product!]

    # appointment
    appointmentRecord(id: String!): AppointmentRecord

    # observation 
    observationRecord(id: String!): ObservationRecord 
    observationRecords(consumerID: String!): [ObservationRecord!]

    # schedule
    schedule(id: String!): Schedule

    # slot
    slot(id: String!): Slot

    # referral request
    referralRequest(id: String!): ReferralRequest

    # nutritional order record
    nutritionOrderRecord(id: String!): NutritionOrderRecord

    # observation definitions
    observationDefinitionCollection(id: String!): ObservationDefinitionCollection
    observationDefinitionCollections(param: ObservationDefinitionCollectionQueryParam!): [ObservationDefinitionCollection!]

    # message
    message(id: String!): Message 
    conversation(from: String!, to: String!): [Message!]

    # review
    review(id: String!): Review 

    # vital observation record
    vitalObservationRecord(id: String!): VitalObservationRecord
    vitalObservationRecords(consumerID: String!): [VitalObservationRecord!]

    # Account verification 
    verifyAccount(verificationInfo: AccountVerifyInput!): Result 

}


type Mutation {
    # appointment response
    createAppointmentResponse(appointmentResponse: AppointmentResponseCreate): AppointmentResponse

    # appointment
    createAppointmentRecord(appointmentRecord: AppointmentRecordCreate!): AppointmentRecord

    # adverse event
    createAdverseEventRecord(adverseEventRecord: AdverseEventRecordCreate!): AdverseEventRecord

    # acknowledgement
    createAcknowledgement(acknowledgement: AcknowledgementCreate): Acknowledgement

    # application
    createApplication(application:ApplicationCreate!): Application

    # activity record
    createActivityRecord(activityRecord: ActivityRecordCreate!): ActivityRecord

    # allergy record
    createAllergyRecord(allergyRecord: AllergyRecordCreate!): AllergyRecord

    # Create customer feedback
    createCustomerFeedback(customerFeedback: CustomerFeedbackInput!): CustomerFeedback 

    # Create a new consumer, returns the new consumer.
	signupConsumer(consumer: ConsumerCreate!): Consumer
    updateConsumer(consumer: ConsumerUpdate!): Consumer 

    # Create comment  
    createComment(comment: CommentInput!): Comment 
    createCommentOnComment(commentOnComment: CommentOnCommentInput!): Comment 

    # concept class
    createConceptClass(conceptClass: ConceptClassInput!): ConceptClass
    createConceptClasses(conceptClasses: ConceptClassesInput!): [ConceptClass!]

    # condition record
    createConditionRecord(conditionRecord: ConditionRecordCreate!): ConditionRecord

    #metadata
    createClinicalCode(clinicalCode: ClinicalCodeInput!): ClinicalCode

    # clinical trial
    createClinicalTrial(clinicalTrial: ClinicalTrialCreate): ClinicalTrial

    # consent
    createConsent(consent: ConsentCreate): Consent

    # condition definition collection
    createConditionDefinitionCollection(conditionDefinitionCollection: ConditionDefinitionCollectionInput): ConditionDefinitionCollection

    # clinical assesment observation record 
    createClinicalAssesmentObservationRecord(clinicalAssesmentObservationRecord: ClinicalAssesmentObservationRecordCreate!): ClinicalAssesmentObservationRecord

    # document reference
    createDocumentReference(documentReference: DocumentReferenceInput!): DocumentReference

    # device
    createDevice(device: DeviceCreate): Device

    # device metrics
    createDeviceMetric(deviceMetric: DeviceMetricCreate): DeviceMetric 

    # device data source
    createDeviceDataSource(deviceDataSource: DeviceDataSourceCreate): DeviceDataSource 

    # encounter record
    createEncounterRecord(encounterRecord: EncounterRecordCreate!): EncounterRecord

    # family member history
    createFamilyMemberHistoryRecord(familyMemberHistoryRecord: FamilyMemberHistoryRecordCreate!): FamilyMemberHistoryRecord

    # goal record
    createGoalRecord(goalRecord: GoalRecordCreate!): GoalRecord

    # Health care service
    createHealthcareService(healthcareService: HealthcareServiceCreateInput!): HealthcareService

    # imaging result observation
    createImagingResultObservationRecord(imagingResultObservationRecord: ImagingResultObservationRecordCreate!): ImagingResultObservationRecord

    # immunization record
    createImmunizationRecord(immunizationRecord: ImmunizationRecordCreate!): ImmunizationRecord

    # practitioner
    signupPractitioner(practitioner: PractitionerCreate!): Practitioner
    updatePractitioner(practitioner: PractitionerUpdate!): Practitioner

	# Create a new organization, returns the new organization.
	createOrganization(organization: OrganizationCreate!): Organization

    # order
    createOrder(order: OrderCreate!): Order

    # order bag
    createOrders(orders: [OrderCreate!], externalID: String!, consumerID: String!, paymentType: PaymentType): OrderBag
    createOrderBag(orderBag: OrderBagCreate!): OrderBag 

    # order event
    createOrderEvent(orderEvent: OrderEventCreate): OrderEvent
    
    # soacialHistoryObservation
    createSocialHistoryObservationRecord(socialHistoryObservationRecord: SocialHistoryObservationRecordCreate!): SocialHistoryObservationRecord

    # medication record
    createMedicationRecord(medicationRecord: MedicationRecordCreate): MedicationRecord

    # procedure record 
    createProcedureRecord(procedureRecord: ProcedureRecordCreate!): ProcedureRecord

    # personal characteristics observation
    createPersonalCharacteristicsObservationRecord(personalCharacteristicsObservationRecord: PersonalCharacteristicsObservationRecordCreate!): PersonalCharacteristicsObservationRecord

    # lab result observation
    createLabResultObservationRecord(labResultObservationRecord: LabResultObservationRecordCreate!): LabResultObservationRecord

    # meal record
    createMealRecord(mealRecord: MealRecordCreate!): MealRecord

    # molecular sequence record
    createMolecularSequenceRecord(molecularSequenceRecord: MolecularSequenceRecordCreate!): MolecularSequenceRecord

    # sleep record
    createSleepRecord(sleepRecord: SleepRecordCreate!): SleepRecord

    # diagnostic report record 
    createDiagnosticReportRecord(diagnosticReportRecord: DiagnosticReportRecordCreate): DiagnosticReportRecord 

    # questionnaire
    createQuestionnaire(questionnaire: QuestionnaireCreate): Questionnaire 

    # questionnaire response
    createQuestionnaireResponse(questionnaireResponse: QuestionnaireResponseCreate): QuestionnaireResponse 

    # notification
    createNotification(notification: NotificationCreate): Notification

    # relationship
    createRelationship(relationship: RelationshipCreate!): Relationship


    # product
    createProduct(product: ProductCreate!): Product
    updateProduct(product: ProductUpdate!): Product

    # observation record
    createObservationRecord(observationRecord: ObservationRecordCreate!): ObservationRecord 
    createObservationRecords(observationRecords: ObservationRecordsCreate!): [ObservationRecord]

    # schedule
    createSchedule(schedule: ScheduleCreate!): Schedule

    # slot
    createSlot(slot: SlotCreate!): Slot

    # referral request
    createReferralRequest(referralRequest: ReferralRequestCreate!): ReferralRequest

    # nutritional order record
    createNutritionOrderRecord(nutritionOrderRecord: NutritionOrderRecordCreate): NutritionOrderRecord

    # observation definitions
    createObservationDefinitionCollection(observationDefinitionCollection: ObservationDefinitionCollectionInput): ObservationDefinitionCollection

    # message
    createMessage(message: MessageInput!): Message

    # review
    createReview(review: ReviewInput!): Review

    # list
    createList(list: ListInput!): List 

    # vital observation record
    createVitalObservationRecord(vitalObservationRecord: VitalObservationRecordCreate!): VitalObservationRecord
}