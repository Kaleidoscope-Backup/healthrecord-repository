// Code generated by go-bindata. DO NOT EDIT.
// sources:
// schema.graphql (14.377kB)
// type/account.graphql (122B)
// type/acknowledgement.graphql (309B)
// type/activity_record.graphql (4.156kB)
// type/actor.graphql (363B)
// type/address.graphql (381B)
// type/adverse_event_record.graphql (1.743kB)
// type/allergy_record.graphql (2.377kB)
// type/application.graphql (690B)
// type/appointment_record.graphql (2.505kB)
// type/appointment_response.graphql (739B)
// type/clinical_trial.graphql (919B)
// type/clinicalassesment_observation_record.graphql (1.623kB)
// type/codable_concept.graphql (5.989kB)
// type/comment.graphql (562B)
// type/common.graphql (2.513kB)
// type/condition_collection_definition.graphql (709B)
// type/condition_record.graphql (1.55kB)
// type/consent.graphql (5.793kB)
// type/consumer.graphql (3.478kB)
// type/customer-feecback.graphql (432B)
// type/device.graphql (1.692kB)
// type/device_data_source.graphql (748B)
// type/device_metric.graphql (1.229kB)
// type/diagnostic_report_record.graphql (2.378kB)
// type/document-reference.graphql (1.877kB)
// type/encounter_record.graphql (1.455kB)
// type/endpoint.graphql (3.64kB)
// type/family_member_history_record.graphql (1.651kB)
// type/geolocation.graphql (229B)
// type/goal_record.graphql (1.649kB)
// type/health_record.graphql (1.719kB)
// type/healthcareservice.graphql (6.909kB)
// type/imagingresult_observation_record.graphql (1.139kB)
// type/immunization_record.graphql (1.484kB)
// type/internationalization.graphql (10.817kB)
// type/key_value_export_record.graphql (492B)
// type/labresult_observation_record.graphql (1.906kB)
// type/list.graphql (1.402kB)
// type/location.graphql (2.659kB)
// type/meal_record.graphql (1.59kB)
// type/measurement.graphql (265B)
// type/medication.graphql (2.159kB)
// type/medication_record.graphql (1.168kB)
// type/message.graphql (455B)
// type/metadata.graphql (349B)
// type/molecular-sequence-record.graphql (3.333kB)
// type/notification.graphql (539B)
// type/nutritionorder_record.graphql (2.121kB)
// type/observation_collection_definition.graphql (1.394kB)
// type/observation_record.graphql (5.228kB)
// type/order.graphql (973B)
// type/order_bag.graphql (705B)
// type/order_detail.graphql (530B)
// type/order_event.graphql (727B)
// type/organization.graphql (913B)
// type/personalcharacteristics_observation_record.graphql (1.501kB)
// type/practitioner.graphql (986B)
// type/procedure_record.graphql (2.053kB)
// type/product.graphql (967B)
// type/questionnaire.graphql (6.051kB)
// type/questionnaire_response.graphql (2.102kB)
// type/reference_range.graphql (718B)
// type/referral_request.graphql (991B)
// type/relationship.graphql (813B)
// type/review.graphql (486B)
// type/schedule.graphql (638B)
// type/search.graphql (1.17kB)
// type/sleep_record.graphql (2.442kB)
// type/slot.graphql (831B)
// type/socialhistory_observation_record.graphql (1.702kB)
// type/source.graphql (338B)
// type/source_consumer_id.graphql (929B)
// type/source_record_id.graphql (149B)
// type/time.graphql (11B)
// type/timing.graphql (4.507kB)
// type/value.graphql (2.591kB)
// type/vital_observation_record.graphql (1.557kB)

package schema

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x9a\x4b\x6f\x14\xb9\x16\x80\xd7\xf4\xaf\x30\x9a\x4d\x8d\x84\xf8\x01\xd9\x91\x04\x66\x22\x01\x09\x49\xee\x6c\x10\x0b\xa7\xfa\x74\xc7\x9a\x7a\x34\xb6\x2b\x4c\xdf\x11\xff\xfd\xca\xef\x63\xfb\xb8\xba\xb9\x9b\xa4\xfa\x3c\xfd\xb6\xcb\x5f\xa9\xfe\x19\x46\xce\xfe\xdd\x30\xc6\xd8\xf7\x05\xe4\xf1\x82\x7d\x31\xff\xac\x60\x5c\x34\xd7\x62\x9e\x2e\xd8\x27\xff\xb4\xf9\xb9\xd9\xe8\xe3\x01\x9c\x11\xfb\x77\x63\xed\x7e\x63\x7c\xfb\x02\x52\x01\x83\x17\x98\x34\xb3\x42\x2f\x7a\x6f\x24\xf7\xd0\xcf\x72\xdb\x89\xed\x05\x7b\xd0\x52\x4c\xfb\xd7\xbf\x5f\xb0\x77\x95\x41\x8c\xd6\x6b\xf1\x22\xf4\x91\x49\x27\xb6\xe1\xbc\x8c\x0e\x95\x29\x09\x7b\xd5\x1d\xb8\xe4\xa3\x2a\x4d\x6d\x35\xee\x8c\xca\x84\xf9\x9a\x2b\x5f\x7f\xa3\x22\x5d\x1e\xaf\xe6\x49\x2d\x23\xc8\x9b\xeb\xae\x8f\x8f\xb8\x38\x75\x1c\x57\x31\x7e\x38\x0c\xa2\x77\x0d\x69\x23\xa7\xdf\x65\x85\xda\x96\x97\xc7\xcf\x7c\x84\x6e\xe2\x23\xe4\x39\x93\x49\x28\x78\x92\xdc\xc9\x79\x27\x06\xe8\xf8\xe1\x10\x9d\xde\xb0\x83\x93\xb6\xc2\x78\xa7\x58\x7c\x13\x70\x16\x93\x1e\x4d\x1f\x4b\x50\x87\x79\x52\x10\x32\x05\xc5\xbd\x97\xd7\x15\x2a\x2d\x62\xd4\x61\x00\xb9\xcf\x3b\xdb\x89\xe8\xbe\xc6\xba\xda\x5a\x35\xfb\x04\x5b\xa5\x3a\xfd\x01\x9a\x05\x8f\xb7\x9b\x57\xe1\xb1\x48\x1a\xba\xdc\x3a\x05\x9b\xcb\xe3\xfb\x91\x8b\xa1\x03\xf3\xb7\xc8\x16\x1c\x52\xa2\x7e\x9e\xb6\xc2\x34\x2b\xae\x68\x14\x92\x55\xbd\xca\xb5\x94\x47\xb3\xba\x85\x6f\x2a\xc7\xd5\x3c\x8e\x71\x92\xf6\xee\x47\x95\xd7\x9b\x84\xa2\x0f\x62\x12\x3d\x1f\x18\x57\x0a\x94\xef\xfe\x54\x22\xaf\x7d\x17\x94\xb7\x4f\x0a\xe4\x0b\x6f\x57\xeb\xa4\x43\x95\x58\x4b\xc1\x87\x2c\xdb\xa3\x91\x34\x02\x5b\x5d\x15\xa3\x9f\xb7\x90\x85\xb8\x9a\xb7\xe5\x30\xbd\x42\x2a\xd4\x71\x0a\x26\x1d\xbb\x9e\x6a\xaf\xca\x62\xad\x5f\x8c\x9e\x1a\x17\x5b\xd8\x89\xc9\x3d\xf6\xf3\x30\x40\x1f\xa7\x7f\xb4\xb9\x8e\x26\x57\xd1\xa2\x35\x68\x28\x5b\x94\xb4\x87\x83\x66\xfd\xc0\x95\x0a\x29\x8c\xe4\xca\x08\xea\x88\x51\x55\xd9\x82\x5f\x5a\x73\xb3\x62\x5d\xc5\xaa\xd7\xdf\xe2\xb8\xfa\x00\xb0\x7d\xe2\xfd\xdf\x2e\xe8\xa2\xf4\x3c\x82\x0c\xc2\xb2\x10\x85\x9a\x91\x4e\xaa\x43\x8b\x5e\xd9\xf2\x85\x6d\xea\x82\xed\xdc\x2f\x7e\x54\xef\x40\xc2\xd4\xbb\x71\x12\xc4\xf7\x41\x5a\x14\xe9\xba\xd4\x33\xda\x2d\xb6\x50\xe5\x50\x34\x53\xa5\x47\x45\x84\x17\x11\x8a\x65\x1f\xcb\xb2\x38\x7d\x66\xcd\x46\xd0\x52\xf4\xc8\xe9\x93\x15\x90\xae\x9f\x92\xed\x6f\xd8\x58\x75\xee\x57\xd1\x98\xd8\x09\x95\x52\xf0\xfd\x34\x2b\x2d\x7a\x26\xe1\x30\x4b\x37\x25\x92\xf4\xde\x0a\xc9\x45\xe1\x9a\x34\x62\x45\x8d\xb6\x5c\x73\xa6\xe6\x45\x66\x6d\x71\xcd\x35\x7f\xb0\x42\xb2\x6a\x49\xcd\xb2\x68\x49\x4e\xcf\xd6\x50\xcb\x64\x97\x6a\x0a\x53\x3f\x2f\x93\x06\x89\x57\xc2\x28\x24\x6b\xf8\x3e\xd7\x86\x48\xef\xff\x31\xd5\x65\x62\x62\x5b\xb1\xb3\xfd\xae\xd9\x6e\x96\x23\x77\x8d\x07\x56\x1d\x46\x90\x33\xb6\x23\x46\x99\x98\xf7\xa0\x96\x21\x2d\xd4\x3b\x3e\x8a\xe1\xc8\x46\x18\x9f\x40\xb2\x67\xa1\xf4\xec\x8f\x72\x4e\xf3\xc9\x2a\xfe\x74\x72\xb2\x90\x1f\x5a\x76\x21\xc5\x7e\xe6\x03\xae\xb3\xf9\x4d\x46\xfa\x23\x2a\xa2\x2b\x4c\x20\xb9\x06\x76\xfb\x78\xe7\x7c\xbd\xe0\x56\x1f\xba\x45\x81\xfc\x5c\x9c\x69\xde\xf5\xb6\xc5\xde\x69\x2d\xc5\xd3\xa2\xd3\x89\x81\x29\x31\xed\x07\x60\xcf\xc0\x07\xfd\xec\x8b\xc3\x76\x72\x1e\x99\x16\x23\x0c\x62\x72\xc3\xc3\xe9\xc9\xe2\xfd\x89\x54\x95\x6d\x73\xf5\xc6\x5e\x69\x30\x38\x69\xcf\x25\x30\xb3\x91\x85\x89\xfa\x1c\xc5\x0f\x4e\x4a\x16\x01\xe9\x63\x3f\x8a\x71\x5c\x26\xf1\x5f\x5e\x1e\x17\xb0\x9c\xac\xd5\x4d\x65\xd0\xf0\x6b\xd6\xb0\x8e\x90\xea\xb9\x07\xcd\xc4\xc8\xf7\x62\xda\x9b\xf3\xdf\x32\x68\x1f\xdd\x8a\xdc\x58\x3c\xb5\xf9\xdf\xac\x1a\x87\x4c\x03\x7f\xc2\x19\x06\xfe\x74\x5e\xf4\x8f\x4d\xc3\x13\x71\xe2\x1a\xdd\x8e\x50\x2c\xd6\x6d\x43\x7f\xfc\x5e\x49\x76\xce\x3b\xc4\x6a\x7c\xdf\x4c\x1f\x85\xf2\x0d\x24\x54\x79\x28\x31\xba\x38\xa0\x3e\xce\x7b\xe1\x8e\x12\x83\x79\xea\xec\xdf\x9b\x69\x37\x5f\x38\x95\x79\xbc\x99\x0e\x8b\x26\x16\x95\x11\xb6\x7e\x43\xc5\x43\x31\x49\xc9\x8e\xf8\x54\xa8\x49\x9f\xe6\x20\x2c\xbd\x63\x85\xc7\x79\x80\x7e\x19\xb8\x64\x0a\xbe\x2f\x71\xa7\x8e\xe2\x07\x2f\xa5\xcb\x44\x5b\x6d\x36\xaf\xdc\x6b\xc0\x2c\xf7\x3c\x0c\xfd\xb7\x9b\x57\xf8\x67\x11\xe9\x16\xa9\x6c\x01\xb0\x6d\x1c\x4a\xd8\xaa\x18\x3c\x58\xe5\x87\x0b\x0e\xe1\xd6\xdf\xf2\x1c\xf6\xf5\x4e\x9a\x77\x51\x63\x80\x5f\x2c\x0e\x72\xee\x61\xbb\x48\xc0\xdd\x13\x85\x64\x4b\xdc\xe5\x5a\xeb\x11\xa2\x81\x54\xf3\x64\x8e\xcb\xcf\xdc\xa4\x03\x29\xcc\xa6\xac\xd8\x9c\x86\xa1\x3b\x05\x06\xcb\xab\xdc\xf0\xd4\x14\xbd\x3b\xd3\xed\x97\x72\x34\x47\xd2\xb9\xd9\x7c\x27\xb8\x81\x70\x40\xed\xcc\x9e\x8e\xec\x26\xb4\x69\x12\x57\x0d\x9a\x54\x95\xed\xda\x7b\x22\xdd\xa5\x6a\xe6\xbd\xe0\x83\xdf\x80\x51\x61\xad\x5e\xcd\xb4\x92\x6c\xee\x87\x55\xe3\x33\xe2\x9d\xb5\x58\xad\x67\xf1\x8d\x7b\x22\x4f\xbc\xa2\x59\x0f\x56\xcc\xa4\x93\x99\x43\x93\x02\x97\xfd\xb3\x39\x59\xc5\xf7\xf7\xfc\xf8\xe0\x06\xb5\x33\xc3\xdb\xfc\x35\x68\xd3\x79\xbd\x14\x66\xf4\xf0\x0b\xf6\x60\x4d\xec\x6a\xf9\x7b\xf8\xe5\x96\x4c\x15\x92\xcd\xd3\x70\x64\xfa\x19\xd8\x13\x57\xa2\x67\x62\xda\xcd\xee\x74\x92\x1f\x58\x8a\xb7\xbc\x3a\xf7\xa3\x3f\xcc\x34\xb3\x37\x0e\x24\x23\xe4\x87\x34\xf3\xbb\xb1\x4c\x97\x87\x34\x35\x00\x1c\xb0\xaf\x15\xd0\x43\x2b\x69\x82\xf7\xf7\x05\x94\xa9\xcf\xc4\x85\x84\x70\xa9\x98\x24\x45\x80\x2f\xeb\xd6\x69\x44\x64\x86\xc5\x00\xc8\x74\xa9\x09\xb2\x48\xf9\x6d\x55\xa6\x6a\xdc\x57\x7d\xa1\x6c\x42\xec\x69\xd6\x62\x87\x6e\xe7\xec\x6f\xfa\x22\xef\x33\x52\x65\xd7\x9b\x90\x79\xa9\x74\xd3\x08\xd8\x45\x75\xe1\x0d\x17\x05\xfd\x8a\x2d\xd0\xed\x5c\xff\xf7\x34\xff\x18\x60\xbb\x87\x31\xdc\x46\x14\xb2\xea\xda\x34\xf7\xf0\x81\x24\x0c\x2e\xf9\xb3\x38\x58\x11\x16\x14\x21\xee\xd7\x6c\x3f\xc8\x79\xec\xcc\xb8\x2f\x56\x0b\xec\xe4\xd7\x06\xec\xf6\x38\x77\x7a\xfe\x35\x97\x34\x54\xb0\x61\x1a\x29\x44\x88\x30\x55\xe5\xd6\x2f\xd9\xf6\xa9\xda\xe8\x33\xad\xba\x3c\x3e\x2c\x87\xc3\x20\x40\x76\xca\x3f\x14\x05\xb5\x1e\x71\x4b\x37\x3e\xe9\x38\xb0\x05\x59\x9d\x03\x0a\x6b\xb7\xda\x9c\xf6\x71\x76\x45\x35\xd8\x13\xdf\xa7\x50\x97\x7c\x4f\xd5\xe6\x92\xef\x59\xee\x65\x2f\xed\x55\x72\xb4\x37\xf2\x94\xab\x55\x14\x76\xea\xf2\x68\x75\x9d\x15\x51\x8d\x61\xcd\x70\x1d\x9d\x5f\x56\x45\x2b\xa2\xea\x19\x9c\xd3\x59\x67\xbb\xf4\x3a\x1c\x71\xcc\x73\x7d\xb4\x29\x2d\xce\xe8\x35\xef\xe5\x4b\x19\xfc\x42\x11\xbd\xb6\x28\x5f\xf2\x09\x13\x30\xdd\x71\xbb\xc9\x87\xef\xbc\xa9\x9b\xec\x52\x1f\xbb\x25\x6d\x63\xee\x58\x36\x9f\xd8\xe4\xab\x7d\xaf\xe1\xd6\x3c\x26\xad\x6d\x9c\xfd\x33\x6c\x97\xc1\x2d\x9d\xe1\x47\xb9\x13\x04\x9b\xb8\x89\xcc\xda\x6f\x1e\x73\xd9\x41\x0f\x46\x17\x57\x9a\x1d\x48\x69\xf7\x2a\xbb\x28\xfb\x79\xed\x84\xf7\x4e\x56\x2d\x38\x99\x36\x2e\xc9\x8b\x96\xf6\x18\xc5\x07\x3f\xaa\xd1\x16\x16\x95\x76\x48\x91\x2d\xf8\x99\x30\xa1\xba\x23\xdd\xd1\xaa\xb2\x89\xcf\xb8\x9b\xbd\x5d\xb7\x3e\x27\x62\x9a\x37\xeb\x76\xe5\x64\x5a\xb7\xc6\x47\x07\xa5\xf8\xde\xbf\x56\xb9\xe7\xea\xcc\x60\xa5\x01\x20\x4c\x2f\x20\x95\xdb\xfa\xcc\x52\x8f\xf0\x92\x9e\x8b\x97\x3a\xeb\x97\x52\x49\x78\x11\xf0\xc3\xf7\xb9\x79\xac\xba\xda\x08\xe3\x62\xf5\x22\xb4\xe9\x5c\xd4\x19\xa8\x8b\xad\xf2\xd4\x59\xf8\x2f\xd2\x68\xc5\xbf\x39\x5f\xe8\x48\xa9\x6a\xfe\xe6\x8a\xbd\x80\x8c\x3b\xb5\x6b\x30\x2b\x39\x7a\x7d\x87\xf5\xee\x75\xdc\x6b\xfe\xb2\x66\xf5\x2b\xf9\xcf\x8d\x07\xb0\x81\xc8\x7a\x76\xbb\x02\xe7\x7a\x09\x5c\x03\x01\xe0\x3a\x02\xdb\x91\xa4\xee\xca\x46\x38\x41\xf1\x8a\xc5\x8f\xc8\x6a\x7b\xa4\x5a\x14\x89\x75\xd0\xe5\x5b\x5d\x22\x33\xe0\x8c\x13\xd6\xd4\xb9\x06\xd1\x14\x7b\x46\x39\x57\xb8\x74\x7d\xc2\xf2\x69\x8b\x73\x56\x61\x59\x1d\xb5\x52\x8b\xd2\x47\xb0\x92\x14\xc7\xd6\x8c\xbc\x18\x59\x5c\x20\x79\xd6\x74\x03\x75\xf0\x2c\xb8\x7a\x28\x7f\x46\xd7\x73\xe4\x5d\x42\x73\x94\x23\xe7\xee\x21\x4d\x0d\x74\x7d\x96\x0c\xeb\x66\xd8\xb6\xe0\xba\x28\x45\x86\x7b\x7d\x06\xa7\x8e\xf4\x87\xed\x32\x90\x64\x95\x25\xed\xe9\x4a\x54\x54\x23\xa5\x38\xdb\x6a\xd6\x94\xe7\xe5\x6c\x82\x1f\xf1\x35\xf2\x0d\x93\xa0\x17\x39\x29\xfb\xc6\x87\x35\x6f\x37\xaf\x94\xd8\x4f\xcb\x21\xbc\x40\xc7\xe5\x24\x11\xe5\x54\xd3\x8c\x31\x2f\x87\xad\xa9\x44\xdb\xef\x3f\xd6\x00\xfb\x95\xa5\xf4\x6c\xd7\xdf\xec\xf8\x56\xf1\xbc\xd7\xeb\x22\xea\x4d\x55\xcf\xe8\x30\xf6\xb9\x9d\x0a\xe7\x28\x88\x5e\x51\x52\x87\xf3\x45\x23\xb8\xa3\xcf\x81\xe8\x23\xc6\x8b\x39\x56\x44\x71\x4b\x24\x59\x85\x81\x3c\x10\x14\xa1\x20\x05\x2b\xf0\xe4\x3a\xb0\x0f\x79\x32\x6c\x5f\x40\xf9\x8a\xdc\x67\x9d\x9c\x21\x7d\x97\x6b\x04\xcd\xb7\x5c\x73\x9c\x02\x43\x6a\x4c\xac\x73\x48\x9d\x5a\x84\x22\xd7\x04\x3e\xcf\x82\x3b\x88\x9e\x21\xf5\x82\xa2\xc7\x85\x8a\x66\xeb\x18\x7c\x87\x96\x51\x6e\x8c\xd8\xff\x91\x8d\xa7\x38\xde\xa5\x6a\xe4\x15\xfa\x9d\xb7\x39\x79\xce\x5a\x25\xe4\x27\xa0\x78\xb8\x4c\x39\x8f\x9c\xd7\xdf\x42\xd4\x47\x12\x46\xb4\xf5\xca\xe7\x11\xa7\xbf\xa0\x38\xe7\xa3\x09\x34\xc8\xce\xfe\xc0\xa2\x41\xbe\x5d\xc9\x2b\x1c\xdd\x55\x68\x9b\x60\xda\x71\x44\x56\x1a\x82\x65\xfb\x44\x8e\x68\x3b\x79\xa0\xb6\x71\xc4\xac\xa0\x6d\x55\x05\xf1\x84\x1b\x13\xec\x9c\x70\x17\x61\x9d\xf0\x14\x66\xc6\x19\x10\x6c\x2e\x31\x72\x0d\x9c\x8b\x6c\x98\x44\xfb\x8c\x24\x48\x76\xf9\x0a\x60\xdc\x15\x78\xb9\x22\xca\x69\x00\x34\x50\x73\x1b\x0f\xbb\x84\x4d\xf8\xdb\x35\xf1\xf1\x0a\x31\x4e\xc5\xf9\x65\xa8\xec\x8a\x93\x08\x72\x97\x28\x33\x06\xcb\x29\x43\x0d\x9b\xdd\xc5\x28\xab\xa0\xac\x0b\x5d\xa1\xd7\xae\x82\xb5\x04\x9f\x75\xf9\xe2\x00\xaf\xf4\x09\xdf\x62\x46\x8a\xd7\x07\x54\x84\x75\x10\xda\xad\x43\xd5\x53\x1c\x35\xb5\xcc\x79\xbc\xb5\x05\x9c\x43\x51\x6b\xec\x5c\x89\x28\xf8\x8c\x8b\x51\x81\xe9\x78\xa5\x53\xa0\x13\x77\x64\xc2\x60\xa4\xc3\x36\x39\x6c\x49\x19\x2a\x04\xe3\x8e\x50\x67\xc6\x49\xc7\xa9\x2c\xce\xe6\x55\x71\xe8\xc3\x94\xae\x3e\xf8\x15\x04\xd1\xb5\x1e\x66\x7d\x1d\xb6\xc8\x09\x61\xaa\x49\x46\x17\xab\x6b\xca\x10\x34\xde\xb9\xf9\x2b\x34\xec\x6f\x6c\xc9\x8b\x41\xe4\xac\x9c\xb7\x0a\x37\x6d\xde\xff\xdb\x1b\x06\xff\x68\x90\x13\xc7\xa8\xea\x0d\x23\x5e\x84\xdf\xb0\x03\x3f\x9a\x15\xfe\xf1\x78\x80\x0b\x76\x97\x7e\xa0\xbb\xc6\x32\xed\x25\xdf\x77\xe1\x7a\x32\x59\x15\x85\x6f\xdc\x51\x96\xb1\xdc\x45\x65\xba\x53\xc4\x97\x89\x71\xe5\x2d\x6e\x2e\xc3\x0d\xd5\x2a\x61\x73\x39\xd6\xd1\x52\xb7\x8e\xb3\x4e\x61\xac\x54\xe3\x13\x84\x2e\xde\xcb\x50\x14\xde\x15\xb4\xc4\xe5\x5d\x09\xda\x6b\x1e\x1f\x9b\xa7\x02\xf5\xe9\xa6\x35\xa3\xca\xf8\x48\x53\xe0\xe3\xae\x80\xcd\x15\x5f\xc6\x93\x34\x07\xcf\x21\xd9\x19\xd0\x19\xe7\x3f\x97\x3c\x9f\x8b\x8f\xcf\xa7\xd2\xa8\x2a\xe7\x72\x6c\x5f\xc7\xf4\x49\x4b\xa3\x56\xed\x0f\x3e\xba\xf6\xa7\x24\x6b\x1f\xac\xa4\xb2\xae\x7c\x16\x13\x87\x17\xb5\x03\x27\x3c\xd8\x25\x84\x88\xa9\x61\x4a\x51\x93\xc4\xfa\x5b\x0d\x22\x41\xe3\xc3\x8d\xc6\x07\x1d\xcd\x6f\x38\x50\x39\x5a\x1f\x79\x30\x1a\x6f\xfa\xa9\x8e\x20\x27\x02\x9e\x19\xe3\x44\x33\xb6\x06\x9f\xd5\x97\x8f\xc4\xb4\xa1\x3f\x71\xec\xe8\xcf\x23\x5b\x5f\x44\xa6\x13\xe5\xfa\x07\x93\x35\x89\x75\x85\xc8\xc0\x66\x97\x59\x15\xd4\x33\x66\xca\xa4\x74\x02\xea\xc6\x91\x44\xa8\x1d\x09\x5f\x1b\xbc\x95\x2e\x41\xd0\xb2\x0c\xc7\xd6\xb7\x65\x98\x92\x76\xd8\x26\xa7\xb2\x31\x09\x85\x6a\x2b\x14\xea\x42\x63\x94\xd8\x61\x9b\x9c\x3f\xa6\x11\x93\x61\x52\x0a\x66\xc5\x85\xd5\x22\x2d\xaf\x89\xe4\x29\x5b\x40\xa3\x4f\x38\xe0\xd0\x3e\xf8\x44\xe3\x7c\x08\x9c\x51\x4d\x84\x7a\xed\xa9\x20\x12\x81\x9b\xd0\xf6\x4d\x93\xa8\x46\x70\x55\x47\x57\x44\x0c\x95\xe2\xd7\xa4\x8a\x06\x55\x7e\x5a\x07\x5c\x15\x74\x09\x55\xa1\xd9\xdc\x82\x57\x61\x69\x98\x75\x67\x64\x0e\x5d\xe1\x55\xe0\x04\xc8\x0a\x63\x25\xc7\x59\x05\xde\xaa\x88\x16\x1e\x34\xbf\x8e\xba\xfc\xd0\xa7\x80\x17\x45\xc1\x68\xf0\x95\xa6\xc4\xff\x49\xc5\xaa\xee\x26\xef\x6c\x4e\x90\xae\x93\x88\x2b\xdc\xdb\x9c\xa2\x6a\x04\xd9\x0a\xdb\x9b\xe3\x5b\x5e\x13\xd1\x56\x7c\xc3\xf3\xbf\x09\x60\x15\xfa\xd6\x62\x2b\x27\x0f\xc0\x0a\x41\x1b\x6b\x1e\xf6\x7f\x91\x0d\x8b\x8f\x42\xe9\xce\xc8\xdc\x97\x9a\xd1\x29\xfb\x6c\x73\x15\x79\xb9\x38\x34\x89\xea\x68\x9e\xd5\x42\x60\x69\xcc\x35\x10\xd9\xcf\xff\x05\x00\x00\xff\xff\x1d\xf1\xaf\x80\x29\x38\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 14377, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4, 0xa6, 0xd2, 0x23, 0x26, 0x23, 0x84, 0x4, 0x8c, 0xf8, 0x6b, 0xfe, 0xd6, 0xc, 0x84, 0xb8, 0xc, 0x4c, 0xc2, 0x51, 0xbf, 0xb7, 0x52, 0xec, 0x7d, 0x56, 0x69, 0xe6, 0x6, 0x44, 0x32, 0xd7}}
	return a, nil
}

var _typeAccountGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xca\xcc\x2b\x28\x2d\x51\x70\x4c\x4e\xce\x2f\xcd\x2b\x09\x4b\x2d\xca\x4c\xab\xf4\x04\x0b\x55\x73\x29\x28\x28\x28\x94\x16\xa7\x16\xf9\x25\xe6\xa6\x5a\x29\x04\x97\x14\x65\xe6\xa5\x2b\x82\x45\x8b\x53\x93\x8b\x52\x4b\xe0\x62\x0a\x5c\xb5\x5c\x5c\x25\x95\x05\xa9\x30\x73\x1c\x4b\x4a\x8a\x32\x93\x4a\x4b\x52\xa1\xa6\xe4\x97\x14\x38\xe7\xa7\x20\x19\x52\xcb\xc5\x05\x08\x00\x00\xff\xff\xf2\x6b\xca\xb2\x7a\x00\x00\x00")

func typeAccountGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAccountGraphql,
		"type/account.graphql",
	)
}

func typeAccountGraphql() (*asset, error) {
	bytes, err := typeAccountGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/account.graphql", size: 122, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa5, 0x7b, 0xea, 0x36, 0x2c, 0x1e, 0xdb, 0xc6, 0x77, 0x8, 0x69, 0x13, 0xff, 0xc0, 0x7b, 0xf7, 0x18, 0x1a, 0x63, 0xed, 0x3a, 0xb4, 0x8d, 0x54, 0xab, 0x5d, 0x3a, 0x97, 0x23, 0x4c, 0x14, 0x60}}
	return a, nil
}

var _typeAcknowledgementGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\xce\x31\xca\xc2\x40\x10\xc5\xf1\x7e\x4f\x31\xdf\x35\xd2\x7d\x68\x63\xa3\x85\x5e\x60\x99\x7d\x09\x43\xdc\x99\x65\x9c\x20\x22\xde\x5d\x48\x54\x88\x17\xb0\x7c\x3f\x5e\xf1\x4f\xa2\x6d\x0a\xfa\xe7\x51\xed\x7a\x46\x19\x50\xa1\xb1\x71\xe4\x00\xdd\x13\x11\x11\xcf\xa3\x74\x74\x92\x8a\xbf\x85\x4c\x2f\x53\x85\xef\xb6\x1d\x1d\xc3\x45\x87\xc5\x1d\xbd\x43\x19\x7b\x0b\xe9\x85\x73\x88\xe9\xfa\xa1\x16\x78\xcb\x0c\x99\xc7\x43\x5b\xff\x1e\x29\xc5\xad\xe1\x3b\xea\x95\x23\xe5\xf3\xa4\x1f\xf5\x3d\x03\x00\x00\xff\xff\x69\xfe\xb5\xcd\x35\x01\x00\x00")

func typeAcknowledgementGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAcknowledgementGraphql,
		"type/acknowledgement.graphql",
	)
}

func typeAcknowledgementGraphql() (*asset, error) {
	bytes, err := typeAcknowledgementGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/acknowledgement.graphql", size: 309, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3d, 0x95, 0xb7, 0x84, 0xac, 0xcb, 0x58, 0x66, 0xa0, 0x15, 0xcb, 0x30, 0x63, 0x9b, 0x60, 0x5b, 0xe7, 0xde, 0xbb, 0xd4, 0xc7, 0x86, 0x28, 0xb5, 0xc5, 0x8b, 0x54, 0x4d, 0x47, 0xd0, 0x36, 0x2e}}
	return a, nil
}

var _typeActivity_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xd1\x6e\xe3\xb6\x12\x7d\xcf\x57\x4c\x90\x97\x7b\x81\x8b\xfb\x01\x7e\x93\x29\x3a\x26\x2c\x4b\x59\x49\xde\x5d\x6f\x51\x18\x8c\x34\xb6\x89\x95\x48\x95\xa4\x92\x75\x8b\xfd\xf7\x82\x94\x14\x4b\xa9\x9d\x0d\xd0\xbe\x14\xed\x1b\x39\x9c\x73\x66\x38\xc3\x39\xd2\x0d\xca\xb6\x86\xa0\xb0\xe2\x49\xd8\x53\x7e\x6a\x10\x7e\xbb\x01\x80\x3b\x10\xb2\x14\x4f\xa2\x6c\x79\x05\xa6\x51\xda\x1a\x70\xf6\x4f\x41\xb4\x62\xf1\xfd\x4d\xe7\x93\x1f\x11\x5a\x83\x1a\x84\x81\x67\x5e\x7d\x15\xf2\x00\xdc\x02\x87\x5a\x95\xa8\xb9\x45\xb0\x0a\x8e\xe2\x70\x84\x86\x17\xf8\x3f\xd8\x2b\x0d\x7b\x61\x25\x1a\xf3\xff\x11\xdb\x6e\xc1\xf2\x98\x66\xd9\x05\xd6\x06\xf5\x5e\xe9\xda\x11\xc7\x4a\x97\xa2\x78\x89\xf3\x9f\x67\x61\x8f\xd0\xa8\x0a\xcd\x7f\x27\x64\x71\x92\x86\x8c\xbc\x91\xe1\xf3\x51\x54\x08\x4d\x6b\x8e\x3e\x5f\x30\x56\xab\xaa\x42\x3d\x61\xc9\xf2\x34\x89\x22\x9a\xbe\xc1\xa3\x24\x70\xb0\x1a\x79\x59\x8b\xaa\x1a\x83\xf3\x94\x06\xe1\x9a\x45\xd1\x05\xb4\x47\x3d\x1f\x11\x2b\x28\x8e\x5c\xf4\x51\x97\x94\x46\x64\x19\xb0\x8b\xf1\x84\x2c\xc1\xb4\x7a\x2f\xe4\xa1\xf3\x66\x71\x98\x6d\xd2\xc5\xe5\x46\x8c\x4a\xb6\x55\x07\x0e\x8d\x32\xd8\x95\x7b\x9b\xdc\x07\xaf\x00\xe6\x15\xe2\x4b\x5b\x3f\x72\xc0\x6f\xa8\x0b\x31\xc0\xbe\x6c\xd6\xf3\x0e\x97\x6e\xe2\xd8\x05\x05\x00\xb2\x25\x51\xbf\xa4\x9f\x09\x4d\x09\xcb\xa8\xdb\x04\x29\x59\xd2\x74\xeb\x96\xf3\xe4\xd3\xe0\xb2\xa0\x31\xe9\x97\xf7\xdb\x75\x1c\x64\x39\x23\x99\xdb\xe5\x69\x40\x56\xbb\x20\x0e\x77\x0b\x46\xa3\xb0\xcf\xce\x22\xaf\xfb\x57\xe7\x39\xd7\x34\x65\x24\x88\x77\x8b\x24\xc9\xe7\x41\x14\x79\xe3\x26\xcb\x53\x1a\xb1\x57\xe6\x79\x90\xd1\xd1\x7a\x45\x5f\x4e\x48\xca\xc8\x8a\xe6\x6e\xb9\x0c\xe2\x70\x30\x2f\x13\xb2\xa2\x3e\xdf\x28\x20\x69\x92\x75\xd7\x48\x37\xf7\x73\x6f\xcc\x12\x42\x68\x0a\xdd\x72\xe1\xc9\xe0\x52\xd1\x2b\x7e\x72\xf5\x7b\x72\x2f\xe9\xf4\xc8\xab\xca\x97\xee\xa3\x7b\x43\xdb\x1f\x81\x1e\x91\x17\xc7\xeb\xd0\xdd\x9c\x06\x64\xf9\x06\x5e\xc8\x52\x29\xfd\x06\x01\x8b\xc3\x24\x19\x9e\x16\x7e\x2b\xba\xee\x02\x97\xe5\x30\x8e\xbe\x40\x49\x4a\x77\x79\x1a\x30\xd7\x63\x7f\x63\x1a\x45\xec\x21\x67\x24\x88\xfc\x76\xcd\x3e\xd3\x70\x47\x82\x34\x64\x49\x57\x91\x3c\x60\xe9\x8e\x44\x6c\x3d\x1f\x20\xde\x94\xf5\x4b\xfa\x30\xe5\xbb\x03\x63\xdb\x52\x28\xe0\xbd\xe0\x78\x6b\x18\xc4\x84\xc2\xf0\x40\xfd\x22\xa0\x69\x32\x67\xa4\x0b\x1a\x87\xfe\x81\xcc\x93\x70\xeb\x0f\x1f\x58\x14\xe4\xd4\x3f\x9f\x35\x0d\x59\x1e\xe4\x2c\x89\x2f\x94\xc7\x54\x88\xcd\x30\x33\x59\x44\xe9\xc3\x05\x27\x21\x81\x4b\xe0\xcf\xfc\x2b\xba\x39\x10\xaa\x74\x26\x7b\x44\xa8\x45\x59\x56\x08\x6a\xdf\x11\x9d\x59\x76\xc1\xa7\x60\x45\xaf\x70\x41\x89\xd8\x74\x08\x28\x4e\x45\x85\x23\x5c\x78\x3d\x05\xa8\xc4\xe1\x68\xaf\xe0\x22\x76\xbf\xcc\xaf\x01\x53\xba\xbe\x02\x4b\xe9\xba\x07\xd5\x5c\x5b\xc1\x2b\xe0\x83\x8c\xcf\x93\xcf\x43\x4f\x56\x8c\xac\x76\xa3\x7d\x1e\xb0\x1d\x59\xb2\x4e\xed\x53\x9a\xe5\xd1\xb9\x7b\x9a\x17\x5f\xd1\x8e\xbf\x07\x73\xa7\x73\x71\x9e\xc4\x7e\x97\x06\xe4\xc3\xe6\x3c\x71\xd9\x87\x4d\x90\x2d\x7b\xd6\x79\x44\x77\x39\x8d\x63\xd6\x3d\x8e\xd1\x32\x20\x39\xfb\xc8\xf2\xed\x2e\xdf\x3e\xd0\x5d\x92\x2f\x69\x7a\xf3\xfd\xe6\x46\xc8\xa6\xb5\x2f\x9f\xa6\x14\x0b\xa5\xcb\x0f\x2d\xea\xd3\x03\xd7\xbc\xee\x3e\x53\x50\x28\x69\xda\x1a\x35\x0b\x67\x90\x59\x2d\xe4\xe1\xd6\xdb\xf9\xe8\x8b\x36\x9b\x7c\xdf\xfc\xb1\x51\xda\xce\x20\x53\xda\xce\x4f\xde\x50\x89\x5a\xd8\x19\x30\x69\xaf\x85\x26\x1a\xdd\x07\xad\x0b\x7b\x07\x0b\xad\x6a\x38\x22\xaf\xec\x11\xb4\x77\xf0\x07\x92\xd7\x38\xcd\xe4\x5a\x86\x25\x9a\x42\x8b\xc6\x0a\x25\x87\x03\x6f\x57\x45\xd1\x6a\x8d\xe5\x0c\x72\x51\xe3\x6d\x9f\x6e\xab\x8b\x33\x2f\x40\xe7\xa9\x0f\x5c\x8a\x5f\xf9\x98\xa2\x3f\xea\x00\x5d\xe2\x3e\xf0\x64\xcf\xdc\xf5\xbc\x9f\xc6\x3d\x6a\x94\x05\x9a\x19\xfc\x94\x0e\x9b\xa5\xbf\x56\xef\xed\x7c\x6f\x7f\xee\x8a\xa4\x8a\x3e\xd8\x3d\xaa\xa8\xdf\x74\x64\x7d\x55\x5e\xe6\x7a\x54\x92\xeb\xad\x18\x0a\x54\xe2\x0c\x88\x2a\xf9\x63\x85\x44\xc9\x02\x1b\x7b\xce\x70\xaf\xf1\x97\x16\x65\x71\xf2\xcd\x81\xa9\x6d\x23\x5d\xd3\x26\x37\xbf\x83\xb2\xd5\x3e\x31\x37\xb9\x6e\x8e\x87\xf8\x5d\xd5\xfb\xc3\xae\xd5\xaf\x00\xad\x14\x76\xe2\x35\xe6\xef\x9d\xad\xb2\xbc\x82\x52\x18\xcb\x65\x81\x50\xa8\x27\xd4\x58\x3a\x84\xcb\x61\x1c\x0f\xc4\x1e\x78\xd3\x54\xa2\x70\x17\xeb\x78\x7b\xd8\x38\xba\x8b\xe1\x52\x1d\xce\x26\x8e\x7f\x48\xc0\x58\x6c\xcc\x18\xee\xf4\x40\xb6\xf5\x23\x6a\x47\x82\xc6\x8a\x9a\x5b\x2c\xa1\xe0\x95\xd2\x02\x0d\x3c\xb6\x5a\x5e\x4e\xb0\xab\x7e\xef\x37\x83\x45\xa5\xf8\xc0\xda\xf6\x49\xd5\xc8\x4d\xab\xb1\x46\x69\xfd\xcf\x9b\xf7\x1e\x01\x4f\x17\x2a\x34\xcd\xa8\x16\xb2\xb5\x68\xdc\xf2\x49\x1c\x94\x56\xad\x99\x26\x30\x58\xaf\x5f\x6a\x44\xf1\xf2\x5f\x39\xa1\x18\xac\xef\xa2\xe8\x84\x76\x82\xf7\xa6\x77\x81\x0d\x96\x28\x2d\xd7\xa7\x29\xc1\x8b\xb9\x23\x71\x12\x62\xdd\xaf\xf4\x54\x41\x40\xd4\x4d\xe5\x6b\x69\x60\x3c\x62\x3f\xd2\x14\x51\xbe\x4f\x51\x1a\x8d\x4f\x42\xb5\xa6\x63\x9d\x74\xa5\x63\xeb\x26\x70\x1c\xfa\x3c\x85\x56\x73\x69\xdc\xa5\x94\xbc\xe0\x36\x3d\xbc\xbd\x22\x75\x7f\x4a\xd2\xfa\xf9\x2d\xbc\xcc\x4e\x5c\x2f\xe9\xdc\x3b\x54\x6e\x4c\x37\x3f\xbd\x2a\xc7\x8f\x64\xef\x2d\xc5\xfb\xab\xc5\xee\x9f\xa1\x73\x2f\x54\xe7\xe8\x7f\x47\x91\x83\x7f\x55\xae\x57\xb9\xef\xbf\x07\x00\x00\xff\xff\xbb\x07\x0e\x8a\x3c\x10\x00\x00")

func typeActivity_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeActivity_recordGraphql,
		"type/activity_record.graphql",
	)
}

func typeActivity_recordGraphql() (*asset, error) {
	bytes, err := typeActivity_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/activity_record.graphql", size: 4156, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf2, 0x18, 0xf6, 0xa5, 0x96, 0x1c, 0x4d, 0x8c, 0xfd, 0x37, 0x65, 0xdc, 0x97, 0x3c, 0x64, 0x44, 0x25, 0x6b, 0xff, 0x64, 0x7e, 0xd9, 0x3e, 0x28, 0x7a, 0x2c, 0x99, 0x3e, 0xd6, 0x1, 0xaa, 0x11}}
	return a, nil
}

var _typeActorGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\xcf\xb1\xca\x83\x30\x10\xc0\xf1\x3d\x4f\x71\xbe\x86\x5b\xf0\xfb\x28\x19\x1a\x25\xda\xa5\x5b\xb0\xa7\x04\xf4\x2a\xd7\x73\x28\xc5\x77\x2f\x5a\x25\x58\x4a\xa1\x63\xfe\x77\xfc\x92\x20\x8d\x3d\xe8\x5a\xae\x5c\xdd\x07\x84\x87\x02\x00\xc8\x72\x5b\x9e\x8e\xff\x6e\x39\x14\x4e\x67\x95\xa9\x4c\x6e\xd7\x90\xbb\x83\xb6\xe6\xac\xe7\xa4\x26\xa5\x02\x0d\xa3\x80\xc3\x06\x19\xa9\xc6\x05\x33\x4b\x7b\x69\x7e\xd3\xd3\x78\x51\x12\x27\xe6\x2f\x85\x52\x38\x50\x9b\xcc\x9a\xcc\xcf\xd8\x63\xab\x13\x2e\x71\xf1\x77\x37\x90\x20\x37\xbe\x46\xf8\x66\x36\x81\x6f\x62\x7d\x8f\xfb\xdc\xf9\x4f\x15\x7b\x1f\xba\xf7\x45\x6a\x47\xdf\x62\xc1\xdb\x0f\xb6\xb9\x9a\x9e\x01\x00\x00\xff\xff\xf0\x42\x8e\xe6\x6b\x01\x00\x00")

func typeActorGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeActorGraphql,
		"type/actor.graphql",
	)
}

func typeActorGraphql() (*asset, error) {
	bytes, err := typeActorGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/actor.graphql", size: 363, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd, 0xe5, 0xc4, 0x7, 0x6d, 0xf5, 0x9c, 0x10, 0xdd, 0xb2, 0xf6, 0x3d, 0x84, 0xd, 0x45, 0x5c, 0x5a, 0x2e, 0x8a, 0x59, 0x7a, 0x7a, 0xf1, 0x1d, 0x74, 0x49, 0xca, 0x3c, 0x68, 0x7, 0xe, 0x92}}
	return a, nil
}

var _typeAddressGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x8e\x41\x0a\xc2\x40\x0c\x45\xf7\x39\x45\xbc\x46\x77\xe2\x42\x04\x71\xe3\x09\xc6\x4e\x90\x80\x4d\x86\x4c\x66\x51\xa5\x77\x17\xc7\x16\xeb\x9c\xa0\xcb\xff\xfe\xfb\xf0\x01\x58\x52\x71\xdc\xc7\x68\x94\xf3\xa9\x86\x17\x20\x22\x4a\x18\xa8\xc3\xab\x1b\xcb\xbd\x82\xec\x46\xe4\x97\x32\xdc\xc8\x96\x62\xb7\x6e\x56\x83\x2f\xef\xd9\xc7\xd6\x0c\xde\x4a\x5a\xc4\xad\xf1\x9e\x9c\x0e\x1a\x7f\xe6\x87\xc1\x04\xe0\x63\xa2\xe5\xec\xfc\x93\xe3\xff\x74\x53\xbf\x2b\x7c\x68\x1f\x9c\x55\x3a\x3c\x92\x9e\xe7\x00\x13\xbc\x03\x00\x00\xff\xff\xe7\x81\x54\x70\x7d\x01\x00\x00")

func typeAddressGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAddressGraphql,
		"type/address.graphql",
	)
}

func typeAddressGraphql() (*asset, error) {
	bytes, err := typeAddressGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/address.graphql", size: 381, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0x19, 0x37, 0x21, 0x90, 0x26, 0x12, 0xae, 0x24, 0x57, 0xe, 0x88, 0x8e, 0xfe, 0x27, 0xe9, 0xb8, 0x9, 0x98, 0xc2, 0x90, 0x24, 0xcc, 0x9b, 0x9f, 0x99, 0x66, 0xd7, 0xb0, 0x7f, 0xc, 0x4e}}
	return a, nil
}

var _typeAdverse_event_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\xc1\x6e\xdb\x3a\x10\x3c\x3f\x7d\xc5\x1a\xbe\xbe\xa2\x77\xdd\x5c\xd7\x6d\x02\x14\x68\x90\xe4\x56\x14\x05\x4d\x4e\x6c\x16\x12\x29\x2c\x97\x2e\xd4\xc2\xff\x5e\x90\x94\x63\x29\xb0\xe3\xb4\xe9\x51\xb3\xc3\x59\x72\x76\x47\xd5\x9c\x16\x2b\x7a\x43\x0b\xb3\x03\x07\xd0\x6a\x07\x27\xff\xd3\x4d\x06\x6f\xbc\xc0\x89\x55\xcd\xb4\xfc\x5f\x05\x17\xdb\x03\x96\xa1\xa5\x12\x6c\x3c\xf7\xf4\xab\x22\xa2\x53\x9a\x09\x5f\xac\x4a\xf5\x82\x3a\x51\x62\x94\x03\xdf\x3e\xdf\x5f\xad\x6e\xab\x7d\x55\x59\xd7\x45\x99\x34\xbd\x85\xf6\x6c\x96\x0c\x25\x28\x8d\x93\xf8\x07\xf6\x2d\x6d\xa1\x1a\xd9\x12\x67\x46\xae\x38\xd5\xa2\xa6\x3b\x61\xeb\x36\xb3\x8c\x68\xef\x42\x6c\xc1\xd7\xef\xa7\xb8\x41\xd0\x6c\x3b\xb1\xde\x1d\x0a\x19\xf7\x5a\x47\x66\x98\x9a\xee\x6d\x8b\xc2\x0d\x3e\xb2\x3e\xea\x12\x15\x26\x6f\x94\xb3\x3f\xd5\x58\x62\x28\x95\x03\xe5\xe6\xb9\xf1\xe4\xfb\x3a\xbd\x31\xf3\x18\x0f\x60\x38\x8d\x50\xd3\x97\xdb\xc3\xc7\x55\x7e\xd6\xc0\x4e\xdc\xd9\xd7\xcc\x6e\xbc\x1e\x9a\x7d\x84\xff\x34\x7c\x14\xb1\x5c\x9f\xab\xc1\x61\x1c\x46\x41\x7a\x98\x58\x7d\x72\x8e\xb3\x09\x67\xe9\x0d\x6a\x5a\x7a\xa3\xd6\x0d\x96\xde\x69\x74\x72\xbc\x6a\xd6\xbc\xef\xbb\x27\xf6\x3e\xc2\x67\x4f\x17\x47\xe6\xf4\x63\x0b\x06\x59\x29\x0e\xc3\x5c\x7a\x52\xf6\x11\x6c\x7d\x0c\x0e\x21\xd4\x74\x87\x1d\xd8\x4a\x5f\xcc\x8f\xa2\xfd\x71\xd6\x63\xec\xc2\x4d\xca\xb6\x80\x6b\x7a\x34\x7c\xa1\xc5\x73\xe9\xba\xaf\x52\x56\x46\x5e\xa5\x0d\xd7\x12\x55\x43\x9e\xa9\x3b\x2c\xf3\x5b\xb5\xf3\xd6\xc0\x94\xf7\x93\x56\x31\xa4\xe9\x47\x67\x9d\xc0\xa5\x42\x35\xa7\x6e\xdb\x07\xab\x55\x43\xd6\x7d\x8f\xdc\x13\x23\xc4\x46\x12\xef\x21\x6d\xaf\xe7\xb4\x9c\xc2\x76\x1d\x05\x86\xc4\xd3\xba\xa7\x16\x26\x1f\xd1\x8a\x51\x49\xdf\xe1\x44\x16\xc8\xb6\x5d\x83\x16\x4e\x02\x8d\x77\x65\x48\xc7\xd9\x70\x58\xf3\xb2\x68\x74\x8c\x5d\xb2\xbd\xa8\x4e\x2c\x2e\x6a\x65\x0d\xc6\xad\x13\x52\x0e\x0b\x2b\x17\x94\x4e\x73\x3c\x41\x9b\x16\x67\x67\x32\xfb\xaa\x6c\x0e\x11\xd4\xf9\x87\x31\xa1\x9e\x0a\xec\x0b\xe2\x3a\x96\x7b\xd7\x3f\xb1\xe3\x52\x7e\x9f\x8b\xee\x90\x5a\x9a\xc4\x76\x3c\xb0\xd7\xa6\xf7\xaf\x83\xfb\xc7\x91\xfd\xb7\x69\x7d\x36\xa7\xd5\xbe\xfa\x1d\x00\x00\xff\xff\xa7\xb5\x30\x8c\xcf\x06\x00\x00")

func typeAdverse_event_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAdverse_event_recordGraphql,
		"type/adverse_event_record.graphql",
	)
}

func typeAdverse_event_recordGraphql() (*asset, error) {
	bytes, err := typeAdverse_event_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/adverse_event_record.graphql", size: 1743, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1c, 0x14, 0x80, 0xea, 0x7f, 0xc0, 0xf, 0x89, 0x53, 0x8e, 0x4c, 0x35, 0x28, 0x53, 0xa6, 0xc0, 0xa8, 0x42, 0x92, 0x5f, 0x64, 0x2e, 0x81, 0xd1, 0xb3, 0x3, 0x6, 0x68, 0xb, 0xac, 0xd7, 0x88}}
	return a, nil
}

var _typeAllergy_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\xd1\x6e\x9b\x30\x14\x7d\xcf\x57\xdc\xa8\xcf\xfb\x01\xde\x52\x42\x53\x24\x0a\x12\x64\xad\xa6\xa9\xaa\x5c\x73\x93\x5a\x03\x1b\xd9\x97\x6e\x6c\xda\xbf\x4f\xd8\x4e\x13\xb3\x64\xa9\x96\x3d\xec\x0d\x8e\xaf\x8f\xed\x73\xcf\xb9\x28\xfb\x16\x16\x4d\x83\x7a\x3b\xc4\x8c\x70\xab\xf4\x00\x3f\x66\x00\x00\x8b\x2c\x4b\xca\xd5\xa7\xa7\x9b\xa2\x58\x06\xc0\x5d\xb2\x4c\xe3\xc5\x3a\x2d\xf2\x00\x4e\xf2\xfb\xb4\x2c\xf2\xbb\x24\x5f\x07\xf8\x75\x5a\x64\xc5\x2a\x8d\x67\x3f\x67\xb3\xe0\x38\x2d\x48\x70\xd6\x08\x9a\x9e\x98\x15\x0f\xc1\xff\x6d\xba\xba\x0d\x80\x8f\xf9\xe2\x3a\x4b\x9e\xd6\xc5\xd3\xa2\xaa\x92\x6a\xca\x5c\x11\xa3\xde\x4c\x48\x17\xf1\x3a\xbd\x4f\x02\x28\xcd\x8f\x80\x65\x52\x15\xd9\x7d\xb2\x1c\x49\x85\xec\x7a\xda\xb1\x16\xd2\x20\xc5\x1a\x19\xa1\xa7\x56\x23\xb2\x64\x84\x11\xac\x45\x8b\x7b\x6c\xb1\xc5\x08\x2a\xd2\x42\x6e\xf7\x60\xae\x68\x8f\x4e\xc9\x4b\x64\x9c\x84\x92\xa9\x05\x1d\xbd\xe9\x9f\x0d\x31\xc9\xdf\x76\xcd\x43\x38\x56\x35\x46\x10\xab\x9a\x3d\x37\x18\x2b\xc9\xb1\x23\xb7\xdf\xd6\xb5\x4c\x8a\x0d\x1a\x62\x23\x6f\x48\x11\x2c\x9d\xa1\xc1\x6f\x9d\x32\xbd\xc6\x52\xf5\x34\xb9\x49\xb0\x74\x86\xa6\x46\xc3\xb5\xe8\x0e\xef\xe2\x5e\x83\xaf\xa8\x05\x0d\x11\x54\xfe\x6b\xd4\x86\x86\x0e\xa7\xd2\x5c\xa0\xca\xc5\x7a\x5c\xac\xc4\x5f\x68\x70\x05\x0f\x2f\x28\x81\x39\x15\x40\x69\x10\x92\x54\x83\x7a\x7c\x25\x7c\x65\x06\x44\x8d\x92\xc4\x46\x60\x1d\x08\x66\x8d\xfa\x4f\x2c\x3a\xf5\x28\x57\xba\x0e\x12\x70\x05\x37\x5a\xb5\xf0\x82\xac\xa1\x17\xd0\xb6\xc0\x2e\x48\xd6\x4e\x24\xe2\x4a\x9a\xbe\x45\x9d\x2e\x43\xfc\x94\x28\x8a\xf3\x5e\x6b\xac\xdd\xc5\x7d\x93\x55\xaf\x0f\x1a\x0f\xce\x5a\x4a\x6f\x99\x14\xdf\x83\xbe\xfa\x25\xb7\xc1\x5d\xdc\x1e\x1c\xfc\x5b\x7b\xda\x3a\x8d\x1b\xd4\x28\x39\x9a\x08\x3e\x97\xbb\x9f\x5b\xfb\x2c\x5f\x3d\xd6\xce\x1f\x6d\x75\xa3\xb8\x3f\x6c\x85\x2a\xf3\x3f\x8e\xec\x50\x15\x2f\xdb\xb4\x0f\xbf\x8f\x13\x47\xca\x0c\x15\xee\xcd\xd6\xdc\x6f\xed\xe2\x7e\x2c\x47\xd3\x39\xed\x75\xdd\x8f\xd1\xe8\xc8\x68\xf5\xc2\xd9\x89\x18\x85\x03\x72\xd7\x97\x13\xb9\xf5\xc2\xb8\xf0\x8d\xba\x1c\x1b\x55\xf3\x47\x67\x55\xbf\x06\x1f\x60\x8b\x12\x35\x6b\x9a\x21\x82\x52\x98\x2f\xa0\x36\xc0\xea\x57\xd4\x06\xdf\xc8\x80\x14\xb0\x7d\x62\x27\x69\x1f\xd5\x06\xd1\x76\x0d\xb6\x28\xc9\xc0\x61\x17\xce\xd9\x4e\xd4\xef\x33\x5d\xa7\xf1\x55\xa8\xde\x38\xd6\xc0\x77\x8e\x6d\x3d\x74\x18\x05\x47\x8f\x88\xdb\x4c\x9a\x49\xe3\x5e\x72\xa4\x2c\x5c\x9c\x9f\x48\xc3\x45\xae\xf7\xe6\xe6\xd6\x3c\x41\xe9\xb1\x28\xbc\x23\x08\x87\x74\xd7\xc3\x44\x8e\x73\xc9\xf8\x53\x28\x76\x79\xd8\x0d\xb1\x83\x56\x9d\x48\xc4\x7f\x97\x05\x38\x97\x03\x17\x81\x5f\x01\x00\x00\xff\xff\x94\xc4\x08\xa4\x49\x09\x00\x00")

func typeAllergy_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAllergy_recordGraphql,
		"type/allergy_record.graphql",
	)
}

func typeAllergy_recordGraphql() (*asset, error) {
	bytes, err := typeAllergy_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/allergy_record.graphql", size: 2377, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x3, 0x3b, 0xc, 0x9a, 0x18, 0xe6, 0x10, 0x89, 0xe6, 0x4d, 0x25, 0x3d, 0x92, 0x30, 0x7b, 0x13, 0x8b, 0xa9, 0xfc, 0xf9, 0xac, 0x13, 0x51, 0x65, 0xc9, 0x99, 0x48, 0xa5, 0x9e, 0x33, 0x8}}
	return a, nil
}

var _typeApplicationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\x41\x4b\xc4\x30\x10\x85\xef\xfd\x15\xe3\xdf\xc8\xad\x75\x0b\x16\xba\x5a\xea\xaa\x88\xc8\x32\x9b\x9d\x96\x60\x9a\x84\x74\xa2\x2c\xe2\x7f\x97\x66\xad\xb4\xc5\x5e\x3c\xed\x6d\xf8\x5e\xe6\xf1\xe6\x91\x84\x4c\xe8\x20\x75\x4e\x2b\x89\xac\xac\xd9\x9d\x1c\xc1\x67\x02\x00\xb0\xbd\xcb\x8a\x32\xdf\xdf\xa6\xbb\xe2\x31\xdf\xa7\x55\x35\xa5\x37\xcf\x59\x5d\x6c\x7e\xe9\x53\x9e\xc5\xf9\x2b\x49\x94\x71\x81\xa7\x96\xd7\x9e\x90\x47\x53\x83\x1d\x09\xb8\x67\xaf\x4c\x7b\x15\x49\x1f\x9c\xb3\x9e\xf3\x0e\x95\x1e\x95\x28\x48\xd4\xfa\x80\xf2\xed\xa1\x2e\x67\xfc\x48\x0d\x06\xcd\x25\x9a\x36\x60\x4b\x02\xc6\x29\xaa\xda\xb6\x76\xf1\xbc\x97\x5e\xb9\x21\xc9\x8c\xdb\x0f\x43\x5e\x40\x4d\x0d\x79\x32\x92\x52\xc9\xd6\x17\x43\xf8\x73\x2e\x3e\x39\x12\xcb\x6a\xa2\x82\xcc\x5e\x1d\x02\x53\x2f\xe0\x65\x4b\x8c\x1b\x64\x3c\x6f\xbe\x0e\x0d\x0c\x9b\xd3\xc5\x9f\xd3\xd5\x71\x7e\xf8\x85\x57\xf1\xaf\x16\xfe\x2e\xa0\xf2\xb6\x51\x7a\xfd\x0b\xbc\xa3\x0e\x0b\xb4\xea\xfe\x1d\x00\x00\xff\xff\xad\x76\xb7\x35\xb2\x02\x00\x00")

func typeApplicationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeApplicationGraphql,
		"type/application.graphql",
	)
}

func typeApplicationGraphql() (*asset, error) {
	bytes, err := typeApplicationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/application.graphql", size: 690, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x55, 0x83, 0x40, 0x6a, 0x20, 0xd6, 0x1c, 0xf4, 0xf0, 0x86, 0xc1, 0xef, 0x3f, 0x17, 0x68, 0x64, 0xf5, 0xea, 0xa9, 0x6, 0xdd, 0x50, 0xf8, 0xdf, 0x35, 0xf1, 0xec, 0x2d, 0x4e, 0x9e, 0x65, 0x20}}
	return a, nil
}

var _typeAppointment_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x54\x41\x4f\xf3\x46\x10\xbd\xe7\x57\x4c\xd4\xcb\xf7\x49\x2d\xdc\x7d\x0b\x8e\x03\x16\xc1\x8e\x9c\x50\x54\x21\x84\xb6\xeb\x49\x18\xd5\xde\x71\x67\xd7\x48\x69\xc5\x7f\xaf\xd6\x36\xc2\x8e\x29\x89\xa0\xfd\x4e\xf6\xbe\x79\x3b\xb3\xfb\x76\xe6\x4d\xd0\xd4\x25\xcc\xaa\x8a\xc9\xb8\x12\x8d\xdb\xec\x2b\x84\xbf\x27\x00\x30\x5b\xad\xd2\x38\xd9\xdc\x44\xc9\xe6\x31\xbc\x8a\xc2\xeb\xdb\xd5\x21\x1c\xdd\x44\xd9\x65\x94\x84\xbf\x1d\x06\x16\xe9\x72\x99\xde\x8d\x37\x64\xe9\xed\x26\x4e\xa2\x43\xf8\x6e\xb6\xbc\x8e\x93\xc9\xcb\x64\x74\x9c\xb5\x53\xae\xb6\xe3\x03\xad\xb2\x74\x95\xae\xa3\xf9\x08\x8f\x92\x79\x9c\x5c\x1e\xc2\x17\x69\x7a\x3d\x26\xcf\xb2\x2c\xfe\x75\x0c\x2f\x6e\x97\x8b\x78\xb9\x1c\x07\xc2\x59\x12\xbd\x87\x27\xe9\xfa\x2a\xbd\x1b\x89\x93\x6c\xa2\x2c\x9a\x3f\xc6\xc9\x63\x94\x65\x69\xe6\xaf\x47\xa6\xaa\x5d\xff\x7e\x19\x6a\x96\x3c\x14\x54\xae\x93\x1d\x7e\x82\x85\x70\x09\x4f\xa8\x0a\xf7\x04\xd2\x10\x9a\x80\x51\x25\x06\xb0\x76\x42\x66\x37\x6d\x10\xcd\xc6\xd6\x25\x4a\x3c\x1f\xe2\x39\x5a\x2d\x54\x39\x62\xf3\x1a\x68\x70\xd6\xba\x16\xc1\x3c\x80\x0d\x95\xd8\x72\x2d\xd7\xa2\xdf\xf2\x02\xb4\x4c\xd9\x29\x43\x7f\xa9\x7e\x8a\x2e\xd4\x6e\x68\x0f\xde\x14\x1e\xac\x63\x7f\xc3\x86\x27\xb8\x45\x41\xa3\xd1\x06\x70\x9f\xbd\x2e\xae\x9a\x6b\x75\x6c\xcf\x9d\x3e\x34\xec\x82\x75\x57\xec\x12\x79\xd9\x2d\xda\x64\x9d\x2a\x3d\xd5\xfa\xaa\xd8\xa6\x43\x82\x71\xd3\x4c\x7b\xe1\x90\x73\x0c\x20\x2c\xc8\x90\x56\x85\x5f\xbd\x9d\xd3\x56\xa8\x49\x15\xe4\xf6\x01\xdc\x77\x2a\x3c\x1c\x44\xda\xfd\xf7\xa3\x04\x1d\x51\x0d\xe7\x27\x38\x1c\xa8\xee\x28\x28\xcf\xa4\x31\x54\x0e\x77\x2c\xe3\x6a\xc3\xf0\x91\x92\x82\xca\x7a\xb5\x86\x39\x5a\xf4\xc8\x56\x32\x39\xbd\x8a\x7d\xfc\x61\xc8\x68\x2e\xc9\xec\x1a\xa2\xa8\xa2\xbf\x27\x32\x8e\xdc\xbe\xcf\xae\x84\x58\x1a\x29\x57\xfe\x8f\xdd\xbe\x81\x4b\x32\xb5\x43\x3b\xaf\xa5\xab\x1b\x9b\x4e\xfc\x82\xdd\xc7\x19\x35\x97\x5e\xc6\x41\x1f\x57\x4a\x1c\x69\xaa\x94\x71\x83\xe6\x9a\x69\xc7\x32\x54\xe9\xcf\x1a\xad\xc3\x7c\x85\x42\x9c\x07\xd0\x7e\x5b\x8a\x1f\xc8\x61\x5b\xfd\x02\x33\xf8\x9d\xf9\x0f\xdf\xec\xbc\x05\xd5\x0d\xa1\x56\x82\x80\xcf\x9e\xa1\x4a\x36\x3b\xa8\x94\x23\x34\xee\x9b\xfd\xfe\x33\x54\xa2\xb4\x23\x7f\x2b\x94\x06\x10\x2c\x94\xc3\x1c\x2a\x14\xcb\xe6\x9b\xfd\x0e\xca\xe4\xe7\x2c\x90\xa3\x7f\x5f\x0f\x6c\x59\x40\xb5\xed\xb5\x25\x0d\xb9\x72\x78\xee\xa8\xc4\x33\xd8\x3c\x91\x85\x52\xed\x41\xd0\xd6\x85\x03\x32\xc0\x06\x81\x05\x4a\x16\x84\xc8\x68\xae\x8d\x6b\x2a\x9d\x4d\x9c\xf7\xea\x91\x99\x00\x95\x55\x81\x7e\x6d\xa1\xff\xa8\xc7\xec\x85\xf2\xd3\xcc\xa5\x12\x7c\x26\xae\x6d\x9b\x75\xf0\x2e\x6d\xb6\x76\x04\xfa\xa5\xdf\x66\xc0\x89\x32\xd6\x0b\xc6\xe6\x1d\xda\x30\x38\xfd\x17\xd7\xfb\x92\xbb\x75\x26\xa6\x1b\xc7\x1d\x50\xdf\xb3\xbc\x13\x0c\xaf\x9f\xee\x62\x7f\x20\xc7\x31\x07\xfc\xc8\xfc\xfe\x1f\xdf\xfb\x8a\xe5\xfd\x58\xb7\xfb\x9c\xd1\x9d\xec\x71\x27\xdb\xdb\x7f\xea\x6c\x9f\x35\xb5\x8f\xfd\x6c\x3a\x79\xf9\x27\x00\x00\xff\xff\x86\xc6\xe6\x5d\xc9\x09\x00\x00")

func typeAppointment_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAppointment_recordGraphql,
		"type/appointment_record.graphql",
	)
}

func typeAppointment_recordGraphql() (*asset, error) {
	bytes, err := typeAppointment_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/appointment_record.graphql", size: 2505, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x57, 0x91, 0x27, 0x67, 0x73, 0x2f, 0xd6, 0x65, 0x95, 0xbb, 0x88, 0x91, 0xba, 0x46, 0x28, 0xee, 0x1e, 0xbc, 0x4, 0x81, 0x7, 0x8d, 0x6, 0xea, 0x7b, 0x34, 0x10, 0x27, 0xc8, 0x48, 0x16}}
	return a, nil
}

var _typeAppointment_responseGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x90\xbd\x6e\x83\x30\x10\xc7\x77\x9e\x02\x5e\x83\xcd\x32\x37\x58\x4a\xce\x96\x7d\xed\x8a\x10\xb9\x56\x1e\x30\xc8\x1c\x43\x54\xf5\xdd\x2b\xf2\xa1\x32\x24\x22\x52\xeb\xed\xec\x9f\xef\xff\xc1\x69\x19\x4a\x35\x4d\x63\x4c\x32\x70\x12\xcf\xf3\x34\xa6\x99\x83\x74\xb2\xcc\xe5\x57\x51\xae\x47\x39\x67\x0d\xd2\x11\x90\x5a\x0f\xc1\x59\x0c\xd0\x06\x52\xf4\x16\x5a\xa5\x35\x38\x82\x66\x9f\x6c\x40\x1f\x0c\xbe\x42\x12\x20\x29\x32\xef\xb0\x8f\x1a\x74\xde\x6a\x08\x61\x1f\xd5\xf6\xe8\x0e\xf0\x92\x55\x04\x68\x82\xd2\x64\x2c\xee\xc3\x80\x04\x1e\x1a\x83\xe0\xbd\xf5\xc5\x77\x51\xc4\x34\x2d\xf2\xa8\x56\x9d\xb9\x13\xbe\xd5\x3a\x5f\x3a\xae\x9f\xd7\x5f\x5d\xb0\xee\xf7\xb9\x2e\x3d\x7f\x70\xe6\xd4\x33\x24\x89\x72\x36\xab\x50\x75\xdf\x96\xa5\x2e\x29\x0e\x7c\xbd\xe0\x74\xda\x8e\x5d\x2f\x63\xde\x2c\x50\xeb\xbc\xf9\xdf\x8f\xc3\x55\x22\x48\x8e\xe9\x73\x8d\x21\xe7\x89\x1f\xb9\xbb\xf9\x8f\xa7\x3b\x5c\xfd\x57\x9e\x3f\x44\x79\x9a\xe2\x27\x00\x00\xff\xff\xa7\x44\x39\xeb\xe3\x02\x00\x00")

func typeAppointment_responseGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeAppointment_responseGraphql,
		"type/appointment_response.graphql",
	)
}

func typeAppointment_responseGraphql() (*asset, error) {
	bytes, err := typeAppointment_responseGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/appointment_response.graphql", size: 739, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5d, 0x97, 0x76, 0xa8, 0x77, 0x26, 0x5e, 0xe6, 0xf7, 0x3, 0xc, 0xcf, 0xd3, 0x5b, 0x46, 0xbf, 0xe6, 0x67, 0xf2, 0x67, 0x95, 0x7a, 0x38, 0x18, 0x8c, 0x30, 0x19, 0xf5, 0x84, 0x88, 0x54, 0x97}}
	return a, nil
}

var _typeClinical_trialGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x51\x41\x6a\xc3\x30\x10\xbc\xfb\x15\x93\xe4\xda\x9a\x16\x7a\x68\x7d\xf5\xa9\x17\x53\x1a\xf7\x01\x8a\xb5\x71\x16\x1c\xc9\xac\x36\x2d\xa1\xe4\xef\x45\xb2\x48\x62\x08\xbd\xf5\x56\x5d\xc4\x0e\xc3\xcc\xee\xcc\x0a\xef\x34\x0a\x05\x72\x1a\x60\xd0\x0d\xec\xb8\x33\x03\x54\xd8\x0c\x05\xbb\xf1\xa0\xa8\x33\xd8\x46\xac\x16\x32\x4a\xf8\x2e\x00\xac\xd0\xee\x08\x8d\x51\xf6\xce\x0c\x67\x1e\x12\x11\xee\xb0\xdf\x90\x94\x89\xb3\xf5\xb2\x37\x1a\x3f\xe8\x8e\xf0\xb1\x9e\x8b\x86\xb2\xf7\x9f\x88\x92\x58\x41\xa8\xe7\xa0\x72\xcc\x02\xe0\x80\x65\x53\xb7\x4b\x6c\xfd\x30\xf8\x2f\xb2\xd8\x1c\x61\x1c\x9e\xef\x2d\xf7\xac\x99\x76\x07\x2a\xfb\xb2\x42\x53\xb7\x0f\xf1\x3d\x3d\xbe\x94\x49\xb0\xa9\xdb\x0a\x6b\x15\x76\xfd\x22\x3b\xc4\x8d\x82\x1a\x51\x18\x67\x41\xce\x42\x79\x4f\x01\x7e\x9b\xb6\x1b\x8d\x28\x77\x3c\xa6\xbb\x26\x90\x03\xe2\x48\x4e\xc1\x2e\x91\xe6\x49\x4d\x56\x23\x09\x7b\x5b\xe1\x2d\xfd\xaf\x31\xbc\x6b\x4b\x76\x96\xbb\x2c\x2a\x10\x32\xc1\xbb\x6c\x98\xa5\x43\xf2\x3e\x5b\x5e\x49\x4f\xec\xcb\x21\xa7\xa2\xf8\xbd\x3a\x3d\x8e\x34\x0f\x79\xea\x0c\x6c\x6f\xc5\xf1\x5f\xe2\xed\x12\xff\xaa\xbf\x0b\x56\x7b\x4b\xd5\x39\xc9\x38\x2d\x8a\xd3\x4f\x00\x00\x00\xff\xff\x99\xf1\x95\xb8\x97\x03\x00\x00")

func typeClinical_trialGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeClinical_trialGraphql,
		"type/clinical_trial.graphql",
	)
}

func typeClinical_trialGraphql() (*asset, error) {
	bytes, err := typeClinical_trialGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/clinical_trial.graphql", size: 919, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x20, 0xdd, 0x3f, 0x5f, 0xae, 0xfa, 0x17, 0x77, 0xb5, 0x39, 0x49, 0x8, 0x57, 0x35, 0x6e, 0x1d, 0xae, 0xc3, 0x4a, 0xf2, 0x2e, 0x1d, 0x77, 0x5d, 0x97, 0x5a, 0xb6, 0xe5, 0x9e, 0xe6, 0x85, 0x9e}}
	return a, nil
}

var _typeClinicalassesment_observation_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x6f\x13\x31\x10\xbd\xe7\x57\x4c\xd4\x6b\xf8\x03\x7b\x0b\x4b\x09\x91\xa8\x40\x49\x6f\xa8\x07\xd7\x3b\x24\x96\x6c\x8f\x35\xf6\x06\x05\xc4\x7f\x47\xfe\x28\x5d\x87\x6c\x36\xa2\x39\x7a\xe6\x79\xde\xf8\xf9\x3d\x65\x5d\x1f\xa0\xd5\xca\x2a\x29\xf4\xd2\x7b\xf4\x06\x6d\xf8\xf2\xec\x91\x0f\x22\x28\xb2\x2d\xa3\x08\x08\xbf\x66\x00\x00\x56\x18\x6c\x60\x1b\x58\xd9\xdd\x3c\x55\x0e\x42\xf7\x27\x25\x2f\x89\xb1\x81\xb5\x0d\xe9\x28\xa9\xc3\x06\x5a\xea\xc4\xb3\xc6\x96\xac\x44\x17\xd6\x91\x76\xf6\x7b\x36\x0b\x47\x87\x17\xe9\x0b\xb1\xea\x6a\x8e\x5b\x2d\x02\x71\x89\x69\x11\x36\x28\x89\xbb\x4a\x8a\x3b\xf8\xc8\x64\x60\x8f\x42\x87\x3d\x70\x02\x8c\xac\x26\xc9\xfa\xde\x20\xaf\x3f\xd4\xf5\x0e\xbd\x64\xe5\x22\xc1\x4b\x23\xd5\x49\xca\x9e\x19\xbb\x06\x1e\x95\xc1\xf2\x16\xea\x59\xbe\xce\x05\xc8\x48\xde\x09\xab\x7e\x8a\xe1\x88\xd2\xca\x17\xf2\xe2\x89\xb8\x3a\xe7\x0f\x88\x38\xc6\xef\xc8\x68\x25\xfa\x06\xbe\x6d\x5e\x0e\x9f\xd2\xb3\x0a\x3a\x62\xe7\x4f\x09\xad\x49\x16\xb2\x15\xd2\xe7\x72\xc8\xc3\x8a\x2a\x34\xf8\xbb\x81\x2a\xe3\x2e\xc8\x5d\x13\x15\xaf\x54\x30\x18\xf6\xd4\x9d\x29\xb5\x17\x47\x29\x1b\x90\x1d\x63\x10\xff\xea\xfa\xba\x5a\x7c\xec\xb4\xeb\xe7\x4f\xd1\x1e\x77\x57\x58\x03\xde\xfd\x05\x81\x88\xa8\x04\x83\x40\xa4\x3d\xf8\x5e\xee\x41\x78\x58\x7e\x5d\x2d\x37\x0b\x58\x69\xe1\x77\xf4\x03\x5a\x32\x02\xb6\xd1\xa3\x0b\x78\x20\xea\x10\xee\xa3\x89\xd3\xd4\x05\x3c\x6c\xef\xa7\xd3\x51\xc8\x95\x71\x1a\x63\xcb\xc3\xf0\xe3\xa6\x9c\x7a\x1a\xaa\x31\x9f\x3a\xc6\x83\xa2\xde\xe7\xa9\x95\xa4\x79\xda\xe3\xd1\x61\x53\x51\xc7\x4a\xbe\x1c\x58\x58\x2f\x64\xdc\xf6\x0c\xac\x6e\x8e\x65\xfb\x4d\x41\x29\x79\x90\xe9\x47\x2b\xe8\xb9\xf4\x5c\x91\x9d\xe1\xb8\xf7\xc7\x13\x39\xa6\xc2\x74\x29\x47\xff\x11\x21\xb8\x4d\x7c\xe0\x86\xd1\x89\xa1\xf9\x13\x00\x00\xff\xff\xab\x56\x71\x2a\x57\x06\x00\x00")

func typeClinicalassesment_observation_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeClinicalassesment_observation_recordGraphql,
		"type/clinicalassesment_observation_record.graphql",
	)
}

func typeClinicalassesment_observation_recordGraphql() (*asset, error) {
	bytes, err := typeClinicalassesment_observation_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/clinicalassesment_observation_record.graphql", size: 1623, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0x8b, 0xa2, 0x33, 0xb6, 0x89, 0x5c, 0x45, 0x98, 0xbc, 0x76, 0x87, 0x1e, 0x47, 0x6f, 0xa2, 0xb5, 0x64, 0xb1, 0x2f, 0x1c, 0x7b, 0x9d, 0x88, 0xa5, 0xfd, 0xea, 0x9f, 0x6f, 0x26, 0xf4, 0x1}}
	return a, nil
}

var _typeCodable_conceptGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xc1\x6e\x24\xb9\x0d\xbd\xfb\x2b\x38\xeb\xcb\x0c\xd0\x6b\x64\x8f\x71\x4e\x4e\xcf\x2c\x62\xc0\xf6\x38\xb6\x27\x08\x10\xe4\xc0\x92\xd8\x55\xca\xaa\xa4\x82\xa4\x6a\xbb\x12\xe4\xdf\x03\x52\x52\xb5\xda\x3d\xb3\x59\x6c\x10\x64\xb3\x98\x93\x6d\x95\x44\x91\x7c\x8f\x8f\x94\xcf\xc8\xcd\x23\x6c\xbd\xa6\xc7\x25\x26\x1a\x9f\x96\x89\xe0\x1f\x67\x00\x00\xe7\x70\x7d\xf7\xf4\xe1\xe1\xee\xea\x06\x7c\xe8\x41\xd3\xce\x38\xd2\x90\x28\x8c\xc6\x79\xeb\xfb\x05\xa2\x9c\x91\xdd\x75\xef\x59\x39\xfb\xfd\x1f\xae\x1f\x20\x26\x74\x1a\x83\x5e\x0f\xcb\x4f\x93\x8c\x77\xed\x59\xde\x5b\xcf\x5d\x6f\xdf\x83\x89\x80\xe5\x3b\xcc\x91\x34\x74\x0b\x4c\xc3\x12\x8d\x32\xe8\x22\xa0\xd3\xe0\xd3\x40\x01\x06\x42\x9b\x06\x85\x81\x60\x0a\x7e\x6f\x34\x85\x08\xc9\x83\xb2\x18\xa3\xd9\x2d\xb2\x55\x79\x4d\x80\xd6\x82\x36\xd8\x3b\x1f\x29\x6e\x20\x2e\xe3\x94\xfc\x98\x6d\x4d\xc1\x2b\xd2\x73\xa0\x08\x81\x94\x0f\x9a\x34\x18\x07\xca\xbb\xbf\xcd\x4e\x89\xb3\xcf\x26\x0d\x30\xf8\x38\x99\x84\x16\xe4\x42\xe3\x20\x0d\x04\x9f\x9c\x49\xa4\xe1\x31\x61\xa2\x78\x91\x53\xb1\x7d\xff\xdd\x77\xbf\xb2\x78\x7e\xf3\xeb\x8a\xe7\xb7\x35\x9c\xc7\xbb\x8f\xb7\x1f\xde\xc3\xd6\x1a\x67\x14\x5a\x78\xa2\x30\xc6\x36\x40\x4c\xbc\x6e\x17\xae\x01\x74\xe6\xef\xc4\x0e\x8f\xd3\x9c\x28\x64\xc7\x62\xc4\xce\x12\x28\x6f\x2d\x65\x67\xfc\x0e\x46\xd2\x62\x2e\x89\xb9\x1c\xbb\x71\xbd\xc4\x1a\x37\x79\x99\xa3\x74\xde\x2d\x25\xca\x43\x69\xc4\x9c\x54\x0e\xb1\xba\xa5\xbd\x9a\x47\x72\x09\xe5\x02\xde\x1e\x68\xf2\x21\x19\xd7\x4b\x20\x39\x8c\xed\x53\x0d\xeb\xe6\xe3\xf5\xdd\x16\xbe\x85\x1b\xdf\xcb\xf9\x8f\x5d\xa4\xb0\xcf\xa7\xaf\x35\xb9\x64\x76\x86\xb1\xb8\xc3\x91\xf2\xf5\x2c\x01\x11\xde\xca\xc1\x77\x39\x01\x1a\x13\x76\x18\x49\xbe\xcf\xce\xec\x29\x44\xb4\x87\xa2\xde\xf9\x00\x26\x1b\x5b\x38\xb8\x1a\xb4\xc5\xce\x07\x4c\x3e\x2c\xe0\x0f\xf7\xc6\x0b\x10\xe7\xe4\x86\xea\xe7\x27\xc7\x8e\x68\xb8\x2d\x47\x6f\xd0\xf5\x33\xf6\x04\x59\x8d\xe0\xed\xa7\xdb\x9b\xc7\x77\xf0\xc4\x40\xde\xde\x3c\x82\x71\x89\xfa\xc0\x50\xe6\x9c\x99\x98\x82\xe9\x66\xfe\xfb\x07\x5a\x5a\x6d\xda\x54\x92\x19\x75\x48\x9a\xf2\x82\x42\x8d\x20\x6e\x64\x15\x63\xf4\xca\x20\xd3\x24\x50\xf4\x73\x50\x24\x2c\x9d\x82\x1f\x7d\x22\x50\x81\x70\x05\xd6\x07\x02\xda\xed\x18\xea\x7d\xce\x0c\xfb\x14\xfc\x44\x41\x78\xd0\x19\x5f\xf3\x60\xdc\xce\x87\x11\x1b\xb5\xcb\x5e\x73\x4a\x8c\x62\x1e\x18\xa7\xec\x2c\x2e\x11\x93\x27\x78\x67\x54\x29\x9a\x42\xf5\x42\x59\x0e\xbe\xe6\x6c\x3b\x87\x40\x2e\xc1\x7d\x29\x8b\xc2\xda\xaa\xc9\x6f\xb7\xf7\x4f\x05\xc0\xea\x88\x54\x58\xa4\x04\x69\xc0\xc4\x9f\x84\x5f\xc9\x17\x12\xd5\x7d\x1b\x88\x73\xe8\xf3\x6f\x39\xbb\x52\x8f\xc9\xa8\xb6\x04\xdb\x08\xd8\x06\xe3\x9f\x0c\x45\x88\xb3\x1a\x00\x63\xa3\x04\x9b\x1a\x8b\x71\x71\x0e\xe8\x14\x49\xed\xa0\x33\xc5\x0e\x2a\x15\x48\x9b\x42\xeb\x52\x61\x85\x2d\x12\xed\xf6\x7e\xa5\xf4\xc3\xcb\x9d\x0f\x23\x7b\x9f\x9e\x3d\xa4\xc1\xb8\x3e\x5e\x02\x82\xe3\x1c\x5b\x29\x4c\x87\xa3\xc0\x9b\xb9\xc3\xf4\xec\xc9\x51\x30\x4a\x2e\xeb\x02\x3a\x96\x0e\x1d\xe6\x3e\xfe\x2e\xdf\x0f\xc9\x7b\x2b\x3b\xe3\x3c\x95\x82\x82\x48\x23\x3a\x8e\xfa\x80\xac\xf8\xd7\x51\x7a\x26\x72\x62\xa0\xa1\x5a\x0d\x66\x1a\x30\x8c\xa8\x16\xf8\xc1\xf9\x67\x4b\xba\x27\x90\xea\x29\xd0\xe7\x80\x1e\xfe\x7c\xf7\xf1\xe1\xf6\xec\x9f\x67\x67\xe7\xb0\xf5\x4e\xd1\x94\x32\x51\x29\x9e\x19\x37\xcd\xa9\xae\x6e\xf3\xe2\xb5\xac\xe5\x86\xac\x8e\xbe\x5c\xc2\x5f\xda\xad\xb2\xf1\xcd\x5f\xd9\xf2\xa9\x9d\x3f\xce\x14\x96\x7b\x0c\x38\x16\x53\x0e\x47\xba\x84\xc7\x14\xaa\x80\xd0\x4b\xa2\xe0\xd0\x5e\xbf\x3f\x5a\x46\x6b\x2f\xe1\xf7\xde\x5b\x42\x97\x9d\xe6\x52\x7c\x55\x59\x7e\x07\x58\x9d\xbb\xf8\xcc\xed\x4d\x0c\xa7\xd7\xbc\x39\x7b\xe5\x8e\x2c\x68\x8a\x2a\x98\x89\xcd\x5f\xc2\x13\xbd\xa4\x1c\x1e\xbb\xf0\x53\x7c\x48\x3c\xc5\xb4\x2e\xe4\xdb\x8d\x3e\xba\xe4\x67\x3b\xf3\x26\xa7\xe2\x4a\x44\x93\xab\xbe\x22\x19\x68\x0a\x14\xc9\x25\xae\xbe\x3d\xda\x99\x9a\x92\x9b\xa5\x8d\x30\xcf\xac\x29\x3d\x73\xed\x0b\x08\x81\x76\x14\x88\x4b\x24\x79\xf0\x8e\xc0\x87\x2c\x36\xc7\x44\xf3\x01\xbc\x4b\xe5\xaf\x0d\x74\x73\x82\x11\x17\x40\x1b\x3d\x74\xb4\xce\x59\xdd\x22\xcd\x4f\x2e\x88\x25\x3f\x89\x5e\xd2\x05\xac\xf8\xe8\xc6\xf1\x96\x65\x70\x0e\xf7\x16\xb9\x7b\xd2\x4b\x13\xd1\x9a\x66\xb6\x5b\x12\x9d\xf7\xf3\xbe\x95\x34\x79\xa9\x65\xea\x51\x2a\x45\xbf\x58\x8d\x1a\x47\xf1\x4b\x23\x65\x91\x6b\x21\xba\xa6\x86\xe0\xff\xb7\xb9\x3f\x87\x0f\xa8\x86\xda\x86\x44\xa3\x7f\x34\xc1\x2c\xa7\x99\x7d\x1d\x69\xc0\xce\xef\xe9\x22\xb3\xbf\x7c\xe7\xfb\x3b\x12\x81\xd7\x30\xce\x36\x99\xc9\x12\x24\xc3\x5d\xdd\x38\xd0\x66\x27\x91\xa5\xd2\x02\x4a\x13\x7a\xeb\x03\xd0\x9e\xdc\x67\x4e\xf0\xe5\x11\x47\x3a\x3a\xb0\x81\xe7\x81\x02\x1d\xb6\x73\x5f\x8b\x20\x63\x9d\x8f\xd1\x74\x96\x36\xab\xfc\xcb\x28\x56\xc7\xaa\xa7\x77\xd9\xdf\x23\x47\x58\xb9\xc5\xf3\x01\xf7\x04\xd1\x9a\x7e\x48\x76\x69\xf6\xf4\x01\xdd\x6c\x31\x98\xb4\x80\x9e\x05\x95\xd4\x18\x51\x07\x57\xdb\xa1\xa9\xa4\x6e\x76\x9a\x82\x5d\xd6\x69\x4b\x1c\xe0\x79\x30\x82\xf3\x30\x12\x3a\x01\xfd\xd0\xf3\xc5\x61\x3e\xc9\x93\x25\x33\x95\x2d\x15\x88\xf8\x9b\x71\x80\xaf\xd9\x76\x01\x57\x90\x96\x49\xba\xeb\x1c\x89\x4f\xbc\xe6\xa3\x91\xee\x18\xc9\x69\x31\x6e\xfd\xda\x89\x85\x96\x2d\xca\xcf\x18\x0b\x84\x7c\x5f\x19\x4a\x98\x55\x47\x5c\x0c\xe8\xa2\xcd\xcd\x51\xa6\x93\xb9\xb3\x46\x71\xde\x0a\xef\x8e\x20\xae\x68\xe4\x41\xd0\x87\x03\x22\x17\xf0\x48\x4e\x82\x3b\xb8\x14\xcb\x50\xb0\x9b\x6d\x1e\x69\x46\xee\x85\xe8\x92\xb4\x46\x61\xf3\x1c\x26\x1e\xcd\x39\x52\x4d\xdd\xdc\xf7\x92\xc5\x32\xfe\xf4\x02\x15\xce\xda\x70\x03\x5d\xf5\xb7\x95\x98\xaa\x2e\xaf\x34\xf8\x17\x2b\x37\x59\x69\x8a\xd0\xfc\x48\xb5\x62\x93\xff\x1c\xe8\x1c\xb3\xaa\xc4\x65\xec\x78\xb8\x08\x7e\x6c\x76\x7d\xd3\xc0\xf4\xcd\x41\x8c\xa9\x95\xe0\xf3\x16\xcb\x83\x3a\xc9\xb7\xbc\x78\xf9\xea\xc9\xfe\xa6\x4e\x49\x7f\xa2\x10\x9b\xcc\x15\x13\xdf\x82\xd9\x41\x20\x4b\x7b\x74\x39\x8d\xfb\xbc\xaf\x66\x0b\xd6\xe1\x72\x25\xa8\xa9\xcf\x84\x78\x78\x86\xb4\x40\xb0\x8b\x87\x64\x97\xe3\xdc\x1d\x99\x9c\xda\xc4\xc9\xe2\x52\x2b\x77\x8e\x14\x64\x47\x59\x3f\x39\x77\xe5\x80\x5e\x26\x8b\xee\x08\xf7\x5a\xac\x9f\xa1\xc1\xa1\xf0\x4f\x42\xb8\xd2\x5a\x3e\xa0\x05\xe7\xe5\xa5\xd0\xf9\x39\xc1\xe0\x9f\xd9\x1d\xae\xd6\x6c\x4c\x53\x89\x63\xe4\x97\xd5\x89\x19\x5b\x9f\x22\xc6\xc1\xf3\x60\xd4\x00\x46\x8a\xba\x00\x29\xbb\xea\x9e\xcb\xc3\xc3\x65\x7d\x27\xb3\xcf\x26\xae\x42\xc2\x25\x3e\xf8\xc8\xe3\xa3\x09\xa4\x58\xf0\x4a\xa3\x58\x93\xc3\xbf\x3c\xca\x43\x80\xf4\x3a\x75\x41\xdb\xf0\xfe\x6b\x3c\xac\x05\x5b\xff\xf7\xd3\x56\xe9\x57\x4a\x7e\xa5\xe4\x29\x25\xcf\xd9\xf3\x2c\x5f\xed\x00\x25\x2c\xe1\xa6\x71\xf4\x8a\xad\x3a\x57\x40\x3b\xd5\xbb\xff\x11\xc6\xdf\xcb\xdb\xb1\x41\xee\x0b\x40\xe6\x66\xf2\xb3\x50\x68\x1b\xd5\xbf\x2f\x22\x2e\x9c\xd3\x42\x92\x74\x37\xd9\xe0\x14\x73\x35\xb7\xe3\xc1\x71\xf7\x9f\x48\xe5\x1c\x62\x33\x72\x28\xe4\x37\xec\xfa\xcf\x25\x84\x09\x43\x32\x8a\x27\x2d\x4e\xb1\xcc\xa8\x45\x09\x1a\xa0\xbe\xac\x08\xbf\x78\xd0\xfe\x03\xc0\xe0\x73\x88\xd5\xea\x21\xe8\xc8\x7a\x9e\x62\x93\xff\x29\xe0\xfd\x2b\x00\x00\xff\xff\xfb\x6e\x67\x13\x65\x17\x00\x00")

func typeCodable_conceptGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCodable_conceptGraphql,
		"type/codable_concept.graphql",
	)
}

func typeCodable_conceptGraphql() (*asset, error) {
	bytes, err := typeCodable_conceptGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/codable_concept.graphql", size: 5989, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xeb, 0x2a, 0xb0, 0xa, 0x81, 0x5e, 0x47, 0xeb, 0x3d, 0xb5, 0xc6, 0x35, 0xdf, 0xcd, 0x4d, 0xc2, 0x2b, 0xa2, 0x4c, 0xd7, 0x70, 0x9, 0x73, 0xa3, 0x76, 0xb5, 0x87, 0xb3, 0x55, 0xde, 0x82, 0xe3}}
	return a, nil
}

var _typeCommentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x4f\x6b\x84\x30\x10\xc5\xef\xf9\x14\xd3\xaf\x91\x9b\xfd\x43\x11\x0a\x85\xd6\x5b\xe9\x21\xc4\x69\x37\xa0\x13\xc9\xbe\x05\x65\xf1\xbb\x2f\x26\xea\x2a\xab\x7b\xda\xe3\xcc\xbc\xcc\xfc\xde\x8b\x72\xd2\x9c\x40\x2f\xbe\xae\x59\x90\xc7\xe2\xac\x88\xc8\xa6\x4e\xc1\x2d\x34\x7d\x23\x38\xf9\x7f\x4a\x7d\x41\xec\x7d\xf1\x1f\x07\x16\xcb\x6f\x02\x87\x2e\x3e\x8d\x0a\x03\x18\x7b\x18\x1e\x1f\x35\xfd\x64\x73\x95\x14\xbf\x8b\xe5\x5c\x3e\x77\x8b\x45\x99\x85\x0f\xd7\x3d\x95\xb7\x06\xce\x8b\xa6\x77\xf6\x1f\x63\x11\xc7\xaa\x57\x6b\xee\x4f\xb9\x35\xc0\x2d\x38\x88\xa9\xf2\xd7\x99\x9f\x1e\x86\xd7\x2b\x85\xae\xe1\xe9\x7e\xba\x48\xae\x5c\x45\xb5\x8b\x40\x36\xb0\x01\x97\x19\x34\x15\xae\xe6\xa4\xde\x4b\x76\x9a\x6e\xff\xc7\x3d\xd8\x95\x60\x70\x3b\xe2\x26\x97\xbb\x49\x8c\xe3\xcd\xfc\x55\x7f\x09\x00\x00\xff\xff\x82\x99\x7c\x02\x32\x02\x00\x00")

func typeCommentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCommentGraphql,
		"type/comment.graphql",
	)
}

func typeCommentGraphql() (*asset, error) {
	bytes, err := typeCommentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/comment.graphql", size: 562, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0x91, 0xa9, 0xe1, 0x32, 0x57, 0x58, 0x5a, 0x19, 0xd1, 0xc1, 0x81, 0x1b, 0x71, 0xb5, 0x4f, 0x4d, 0xe3, 0xb8, 0x1e, 0x60, 0x4a, 0x49, 0x2f, 0xe8, 0x88, 0xd7, 0x61, 0x5d, 0x7e, 0x3, 0x13}}
	return a, nil
}

var _typeCommonGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x54\xdd\x8e\xa3\x36\x14\xbe\xcf\x53\x78\xd4\xb7\xc8\x9d\x07\x4e\x82\xb5\x06\x53\xdb\x24\x3b\xbd\x41\x2c\x78\x67\xad\x06\x13\x81\xb3\x55\x5a\xcd\xbb\x57\xd8\xfc\xcf\x44\x6a\x57\xad\xf6\x0a\xfc\xf9\xf8\x3b\xdf\xf9\xdd\xed\x94\xb9\xd5\x28\x6d\x75\xd3\x36\xf6\x8e\xfe\xda\x21\x84\x10\x67\x99\x24\x09\xb8\xff\x8c\x1f\x21\x91\xee\x17\x0b\x9c\xba\x1f\x88\xa1\x47\x83\x97\xdd\xdb\x40\x20\x9a\xd6\x3e\x8f\xcf\x29\x16\x32\xcf\xd2\x10\x4b\x08\x27\x0b\x30\x56\xdb\xbb\xbc\x5f\xd5\x60\x05\x89\x24\xf2\x25\x0f\x58\x22\xb2\x18\xf8\x12\x4b\x39\x0e\x24\x91\x84\x25\x6b\x9c\xf1\x23\x4e\xc8\x6f\xb8\xbf\x59\xe2\x11\x60\x2a\x23\x0e\x01\xe3\xe1\x96\x7b\x14\x3f\x40\xbf\x66\x20\xfa\xe7\x09\x26\x1c\x1e\x5e\xe4\x1c\x44\xda\x3f\x5e\xb1\x51\x92\x90\x00\xd3\x5c\x72\x82\xe9\x5a\x57\xb8\x15\x1a\x02\xcf\xe1\xb4\x71\x9e\x72\x16\x66\xc1\x0a\x4a\x98\x24\x07\x12\xbc\x0b\x09\x07\x9f\x12\x76\xa6\x10\x1e\x21\xde\xb0\x88\x20\x82\x30\xa3\x2b\x6d\x82\xb2\x95\x0d\x87\x03\x70\x8e\x69\xce\xc1\x05\xb6\xbc\x0b\xe1\x44\x02\x78\x8f\xe4\x31\x48\x4e\x82\x95\x8a\x34\xa5\x1f\x88\x8b\x41\x08\x7c\x84\xb5\xc3\x13\x81\xf3\x3a\xf9\x71\xaf\x1c\xad\xad\xa8\x23\x13\x11\x49\x97\x38\x65\xde\x09\x7a\x5f\x55\x11\x60\x0e\xc0\x9d\xe4\xb7\xdd\xd8\x6e\xea\xbb\x6a\xf5\xd4\xaf\x02\x4e\xc0\x9d\x30\x42\xc3\x0d\x02\x21\xc9\xe2\x35\x16\x91\x63\x34\xf5\x25\x7e\x55\xc7\xb6\xb9\x5d\x3d\x55\x02\xe7\x67\xc6\x5d\xb0\x24\x39\x60\x9f\xf8\x20\x22\x34\xe4\xe0\xd0\x17\x96\x25\xc7\x1c\x87\x19\x75\x57\xd3\x8f\x80\x84\x30\x3e\xb1\x06\x8d\xb1\x45\x69\xd3\x46\x1b\x2b\xee\x9d\x55\xf5\x20\x35\x8d\xd8\x30\x58\x07\xfc\x79\x18\x26\x4c\x7c\x37\xa5\xf8\x38\xb4\x91\x88\x85\xfb\x9e\x21\x88\xb0\x2f\x5e\x9f\x73\x48\x7a\x83\x8f\x7c\x64\xdd\x38\x56\x11\x8b\x3d\xff\x99\xf1\x4f\xfe\x25\x7b\x26\x43\xb7\x30\x3a\x0f\x64\xac\x6b\xb5\x18\x47\x09\x9f\x65\x9e\x52\x4c\x92\xf9\x18\xc9\xd8\x2b\x23\xf1\x58\xee\x13\x09\x81\x79\xb5\xe1\x61\xe2\x72\xfb\x63\xae\x47\xca\x09\x9b\x33\xbd\x42\x16\xf5\x98\x30\xca\xce\x3d\x93\xed\xc5\x70\xd5\xdd\x2e\x76\xe0\xe9\x6e\x65\xa9\xba\x6e\x8f\x9e\x9b\xe6\xa2\x0a\xf3\xd4\x9b\x69\x73\xbd\x59\xc4\xd5\x57\xd5\x2a\x53\x2a\xbf\x57\x88\x03\xdd\x2b\x35\x2d\x9a\xfd\x62\xe9\x3c\xcd\x57\x24\xdc\x23\x61\x5b\x6d\x5e\x9f\x16\x6e\x57\x74\x9e\x49\x57\xb3\xe1\x0f\x10\x0f\x4a\xb1\xb5\x45\xf9\xad\x56\xc6\x2e\x44\xa2\xb2\x31\x56\x19\xeb\xd9\xc6\x52\x38\x2e\x74\x29\xcc\xeb\xad\x78\x55\x23\x99\x03\x6f\x9c\xae\xc4\xa0\x4e\xff\xa9\xf6\x88\x18\xeb\x4e\x56\xdb\x8b\x5a\x1b\x94\xad\x2a\xac\xaa\x98\x41\x7b\x24\x75\xad\xe6\x60\x67\x45\x83\x98\x4d\xa0\x3f\x4b\x9c\xcf\xd7\xb2\xad\x97\x19\xeb\xdc\x18\xed\x3f\x18\x2d\x4f\xf9\xbd\xb8\xdc\x36\x5e\xda\xc2\xfc\x3e\xcb\xe8\x6c\xd1\x5a\xef\xce\x9d\x95\xa9\x86\xd3\x98\x98\x25\xf5\x83\xd4\xfc\xbf\x2a\x7c\x06\xc4\xbd\xbe\xda\xa6\x5e\x06\x8f\x4c\x51\x6f\x68\x51\xd9\x54\xaa\x17\x52\x15\x5f\x2e\x2a\x68\x4c\xa9\xae\x3e\x61\x3b\xf4\xb6\xdb\x21\x17\xd1\x40\x35\xb2\x6c\xa3\xf9\xa7\xb4\x9e\xd1\xab\x63\xa6\x53\xab\xc2\x54\x85\x55\x8b\x80\xb6\xcd\x61\x1a\x3b\x03\xfd\x58\xfc\x82\xce\xdf\x94\xe9\x9b\xac\xd2\x56\x37\x06\xfd\x51\x74\x48\x57\xfd\x0c\x7d\xd5\xaa\xf2\xa5\x70\x5e\x1e\xd4\xe0\x5f\x3a\x1c\xc6\xf0\x4b\x61\xd5\x76\x0a\x8b\x11\x9c\x56\xcc\x8f\x38\xf8\x30\xa0\x56\xd5\xba\xeb\x74\x63\xc6\x88\x26\x01\x0f\xa2\xfa\x6f\xb4\xfc\x1d\x00\x00\xff\xff\xaa\xc9\xd7\x91\xd1\x09\x00\x00")

func typeCommonGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCommonGraphql,
		"type/common.graphql",
	)
}

func typeCommonGraphql() (*asset, error) {
	bytes, err := typeCommonGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/common.graphql", size: 2513, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x74, 0xf6, 0x2f, 0x37, 0x28, 0xe0, 0x24, 0x69, 0x50, 0xef, 0xb9, 0x10, 0x45, 0x33, 0x5d, 0x2f, 0x73, 0xe6, 0x50, 0x41, 0x6b, 0x6f, 0x3c, 0xef, 0x9b, 0x7d, 0xd4, 0xad, 0xd, 0xe4, 0xdc, 0x9e}}
	return a, nil
}

var _typeCondition_collection_definitionGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\x31\x4f\x03\x31\x0c\x85\xf7\xfc\x8a\x57\xf1\x2f\x6e\x3d\x96\x4a\x6c\xb0\x21\x86\x34\x31\x87\xa5\xd4\x8e\x2e\x0e\x52\x85\xf8\xef\xa8\x69\xee\xa4\x03\x86\x8a\xb2\x59\x8e\x9f\xfd\xbd\x17\x77\x87\xbd\x44\x7e\xe7\x58\x7d\x42\x50\x89\x6c\xac\x02\x3b\x65\x2a\x30\xc5\x81\x10\x34\x25\x0a\x46\x11\x55\x22\xcd\xb0\x37\x2e\x30\x3a\xe6\xe4\x8d\x1c\x4b\xae\x86\x71\x51\x3e\x9d\x32\xed\x5b\xeb\xc3\x01\x80\xf8\x23\x0d\x78\xb4\x99\x65\xda\xb5\x4e\xd0\x48\x03\x46\x8d\xfe\x90\x68\x54\x09\x94\xed\xa2\x70\x9f\xee\x76\x9e\xf3\xe4\x16\xa7\x93\x70\xdc\x72\x5c\x47\x76\x61\x5a\xf7\x2d\xc7\x1b\x53\x3f\x59\xbe\x67\x70\x4f\xaf\x2c\xad\x1a\xd7\xe9\x3f\x66\xd2\x5e\x8b\xd6\x39\xac\x0a\xb4\x5e\xf2\x32\x55\x3f\xd1\x80\x87\x5e\x2d\x9b\x3a\x44\x19\xf0\xfc\xf3\x57\x76\x2f\x57\x19\xda\x86\xf8\x9b\x9f\xdb\x42\xfd\x3f\x57\x67\x43\x5f\x01\x00\x00\xff\xff\x4e\x5d\x14\x1d\xc5\x02\x00\x00")

func typeCondition_collection_definitionGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCondition_collection_definitionGraphql,
		"type/condition_collection_definition.graphql",
	)
}

func typeCondition_collection_definitionGraphql() (*asset, error) {
	bytes, err := typeCondition_collection_definitionGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/condition_collection_definition.graphql", size: 709, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0x7b, 0x18, 0xdb, 0xca, 0x32, 0xc4, 0xcc, 0x73, 0xb5, 0x29, 0x54, 0xbb, 0x44, 0xda, 0xf, 0x13, 0x9a, 0x8c, 0xa6, 0x31, 0xd6, 0x64, 0x5, 0x20, 0xe6, 0x8a, 0x71, 0x84, 0x31, 0xf1, 0xe7}}
	return a, nil
}

var _typeCondition_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\x5d\x6b\xdb\x30\x14\x7d\xf7\xaf\xb8\x65\xff\x42\x6f\x99\x92\x6d\x86\xce\x06\x3b\xeb\x4b\x19\x43\x91\x6e\x53\x41\xf4\x81\x24\x07\xbc\xd2\xff\x3e\x2c\xc9\x24\x72\xeb\xb5\xac\xb0\xa7\x44\xe7\x1e\x9d\x7b\x75\x7c\x0f\xea\x41\x01\x35\x5a\xc8\x20\x8d\xee\x03\x0b\x83\x87\xa7\x0a\x00\x80\xb6\xcd\xb6\xde\xd7\x6d\xf3\x6b\x43\xf7\xf5\xdd\x6e\x01\x76\x3b\xfa\xa3\xeb\x76\x0d\x5d\x16\xea\x66\x85\xff\xbd\xee\xfb\xba\x6d\x5e\xe0\x7d\x7b\x7b\xb7\xdb\x56\xf0\x5c\x55\x20\xb5\x1d\xc2\x65\xa0\x0e\xb9\x71\x82\x3a\x64\x01\xf3\x58\x9f\xe0\x8b\x33\x0a\x1e\x91\x9d\xc2\x23\xb8\x48\x88\x05\xcd\x14\x12\xe8\x83\x93\xfa\x78\x13\x11\x6e\xb4\x1f\x14\xba\x7a\x5b\xe2\x02\x3d\x77\xd2\x4e\x0d\xe6\x42\xc4\x0d\xe7\x83\x73\x28\x08\xec\xa5\xc2\xc4\xf5\x66\x70\xfc\xa2\x0b\x90\x98\xee\xc8\xb4\xfc\xcd\xae\x25\x72\x29\x5d\x48\x83\xc7\xc6\xc5\xb9\x9e\xde\x17\x79\x0e\x1f\xd0\xa1\xe6\xe8\x09\xdc\x77\xf3\xe1\x5b\x7c\x56\x66\x4f\xdc\x9b\x9f\x91\x7d\x32\x3c\x37\xfb\x8a\xe6\x36\x1f\x92\x58\x76\x85\xcf\x9e\x81\xb7\xc8\xe5\x83\xe4\xd9\x03\x81\x04\xa8\x11\xec\x70\x42\x6a\x34\x47\x1b\x2e\x43\xf8\xf8\xc1\xc9\x72\x03\xf2\xd3\xf1\x8c\x4e\x86\x91\x40\x9f\xff\x45\xf8\x60\xc4\xd8\xcb\x80\x85\x75\x33\x48\xdf\x6a\x77\xc4\x8d\xf7\xe8\x15\xea\x50\x08\x94\xa5\x55\x99\x6c\xbf\xf6\x18\x08\xb4\xd3\xcf\x45\x9d\x1d\x58\xc0\x24\xbc\x99\xff\x5e\x5d\xc2\xb3\x14\x93\xc5\x04\xee\xfb\x51\xd9\x60\xd4\x6c\xf0\x73\x55\x85\xd1\xe2\x72\xed\x40\x2a\x7b\x8a\x2a\x1e\xae\xbf\x0b\x3c\xcd\x9e\x17\x4b\x58\xfa\x2e\xc5\xfb\x76\xd1\x3a\x3c\x4b\x33\xf8\x24\x5d\x58\x92\x64\xf7\xa3\x45\x52\xf4\x9f\x90\x74\x39\x38\xa6\x3d\xe3\xd3\xc8\xaf\xd0\xca\xe2\xcd\x4a\x48\x3e\x14\x86\xbc\xf3\x3c\x06\xb4\xa0\xbe\x96\x90\x77\xe4\xe3\x5a\xee\xf3\xb8\xb0\xe3\xad\xc0\xfc\x2d\x2b\xff\x10\x93\xff\x97\x90\x8f\x87\xe3\x45\x2c\x56\x13\xb1\x16\x86\x29\x07\x7f\x02\x00\x00\xff\xff\x79\x5e\x5a\x3f\x0e\x06\x00\x00")

func typeCondition_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCondition_recordGraphql,
		"type/condition_record.graphql",
	)
}

func typeCondition_recordGraphql() (*asset, error) {
	bytes, err := typeCondition_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/condition_record.graphql", size: 1550, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0xc3, 0xb1, 0x35, 0xa, 0xfd, 0x65, 0x56, 0xe9, 0xc3, 0x96, 0xe5, 0x42, 0x97, 0x1d, 0x25, 0x6a, 0xaf, 0x1a, 0x46, 0x1f, 0x7a, 0xe5, 0x17, 0xbd, 0x9a, 0xd7, 0xb7, 0x2b, 0x14, 0x2e, 0x19}}
	return a, nil
}

var _typeConsentGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x58\x5f\x6f\xe3\xc8\x0d\x7f\xf7\xa7\xe0\x22\x0f\xdd\x05\x92\x2c\xfa\xe7\x29\x6f\x82\xa2\x66\x8d\x3a\xb1\xab\x38\x77\x38\x1c\x16\xc1\x64\x86\xb6\xa7\x2b\xcd\x68\x67\x28\x67\xdd\xc3\x01\xfd\x1a\xfd\x7a\xfd\x24\x05\x39\x92\x2d\x79\xb3\xdd\xbb\x64\x5b\x1c\xfa\xe2\x28\xa3\x19\x92\x43\xfe\x48\xfe\xa8\xc9\x09\x64\x9a\xac\x77\x11\xb4\x77\x14\x7c\x55\xa1\x81\x87\x1d\xd0\xc6\xca\x52\x44\x47\x93\x13\xc8\xf9\x85\x26\x38\x83\x2b\x45\x1b\x0c\x6f\x95\xfe\xd8\xda\x80\x60\xdd\xca\x87\x5a\xb1\x08\x3e\xa6\x1c\xa0\x23\x4b\x3b\x20\x0f\x4a\x6f\x2c\x6e\x11\x14\x44\x52\x84\x06\x9a\x36\x34\x3e\xa2\x28\xd5\x18\x23\x9c\xc1\x22\xf8\xad\x35\x38\x38\xa8\xd2\x2b\xf2\x23\xd9\xff\x59\xdc\x5d\x44\x38\x93\x5f\xbf\x82\x48\x3e\xa0\xf9\xb2\x65\x2b\x0f\xb4\xc1\xcf\x85\x5c\xda\xa8\x2b\x2f\x92\x4a\xac\x50\x45\x84\xb7\x40\x41\xb9\xb8\xc2\xc0\x82\x8f\xed\xe9\x25\x8a\x7f\x42\x48\xfe\xc9\xaa\xca\x3f\x5a\xb7\x1e\xbb\x42\x77\xef\x15\x34\x8a\x2c\x3a\xfa\x5d\x1c\x8a\x9b\xa0\x6b\x6b\xc8\x93\xbb\x53\x40\xe0\xa7\x09\x00\xe4\xf3\xd9\xac\xc8\x97\xfc\x98\xe5\x79\x71\x7b\xcb\x4f\x77\xb7\x05\xff\xb9\x9c\xde\xe6\xb3\x79\x7a\xce\xe7\x65\xc9\xfb\x7e\x9e\x4c\x4e\x60\x91\xae\x34\x5f\x25\xb7\xe4\xde\x11\x7e\x22\xbe\x81\xd2\x64\xb7\x96\x2c\x72\x6c\xb7\x18\x06\xb1\xc6\x4f\x1a\x1b\xb1\xe5\x04\xde\x15\xd9\x6c\xf9\x2e\xcf\xca\xe2\xfe\x3a\x2b\xff\x52\x2c\xa7\x37\x57\x70\x06\x4b\x0f\x0d\x06\x36\x1a\xbc\x43\xf0\x01\x6a\x1f\x10\x7c\x83\x41\x25\x0c\x79\x37\x72\xd2\x8a\xb7\xa8\xf0\x01\x89\x1d\x12\x31\x6c\xad\xc6\x08\xca\x19\x68\x82\x37\xad\xa6\x08\x01\x2b\x89\x03\x79\xd8\xa0\xaa\x68\x03\x5a\x05\x3c\x1f\x5b\x31\x5f\x14\x65\xb6\x9c\xce\x6f\x6e\x9f\x63\x46\x1b\xd1\x88\x2d\xda\x3b\x56\x2a\xd1\x31\xb5\x75\x36\x12\x1f\x61\x4c\x39\x93\x12\x40\x69\x6a\x55\x05\x93\x93\xa1\xaf\x06\x36\x32\x72\x1a\xc6\x6c\x64\xc9\x7e\x75\x6c\xf4\xe5\xfc\x46\x0c\x7d\x99\x9d\xca\xa8\x2d\x06\xab\xc1\x87\xb5\x72\xa7\x80\x3b\x39\x4f\x36\xc6\x16\xc1\x78\x27\x07\x58\xdf\x9f\xcb\xec\xee\xf2\x45\xca\x56\x41\xb5\x06\x0c\x12\x26\xdc\xa5\xe8\xe0\x96\xc1\xeb\x1d\x5f\x96\xf3\x11\x23\x6b\xbb\x9a\x7f\x57\x94\x37\xd7\xc5\xcd\xf2\xd9\x2a\x1f\x2d\x6d\xac\x83\x35\xc3\xcf\xd5\xe8\x68\xac\x21\x05\xfd\x3e\xcb\xf3\xb2\xb8\x9c\x3e\xd7\x93\xc7\xc1\x7e\x32\x94\x35\x62\xf7\x56\x07\x34\x96\xd2\x51\x1d\x2c\x61\xb0\x6a\x60\x4c\x3e\xbf\x5e\xcc\xa6\xd9\x4d\x5e\x7c\x33\xf4\x0d\x0d\x92\x42\xba\xb7\x08\x14\xd4\xca\x19\x45\x09\x4e\x45\x5e\x5c\xbe\xc4\xdd\xac\x78\xa3\x9c\xa9\x58\xad\x41\xcd\x65\xcd\xf4\x45\x08\x6a\x45\x84\x41\x1c\x3f\x2b\xae\xb2\xd9\xb7\xf6\x75\x77\xb5\x87\x1d\x54\xb8\x56\x55\x0a\x35\x1a\xeb\xd6\x03\xf7\xce\xef\x96\xf9\xfc\xba\xb8\xbf\x2e\xb2\xdb\xbb\xf2\x65\x3e\x56\x8c\xa3\xc8\x76\x04\x8c\x6d\x45\xa9\xd8\x4c\x4e\x40\xfb\xba\x51\x5d\xb2\xe3\x6a\xc5\x58\xdf\xa2\xe3\x46\xd3\xb5\x15\xb1\x72\x90\xcc\xd0\x70\x2d\xd8\xd7\x2b\xeb\x08\x43\x97\x13\x43\xa0\x2e\xca\xf9\x55\x99\x5d\xdf\x97\xc5\x62\x5e\x3e\xb7\x4e\x7e\x05\x22\x3d\x32\x9a\xe0\xd7\x41\xd5\x0c\x58\xdf\x3a\x4a\xb7\x14\x17\x73\x1e\x0d\xad\xfa\xeb\x5d\x36\x9b\x2e\x7f\xb8\x9f\x5e\x2f\xca\xf9\x77\xc5\x8b\x12\xf6\x2b\x85\x73\x64\xa6\xad\xb9\x36\xe2\xc8\x8f\x1f\x5b\x55\x59\xda\x1d\x55\xf4\xb2\xb8\x2d\xb2\x32\x7f\xf7\x0d\x10\x17\x35\x63\xd9\xae\xac\x06\xeb\xb6\x18\xc9\xae\xbb\x73\xe4\xc1\x3f\x90\xb2\x6e\x64\xd0\x07\xe7\x1f\x2b\x34\x6b\x49\xb0\x7c\x36\xbd\x99\xe6\xd9\xec\x7e\x59\x4e\xb3\xd9\xff\xc6\xac\xc9\x09\x58\x27\x51\x0c\x46\x39\x8d\x52\x13\x41\x57\xd6\x59\xad\x2a\xa0\x60\x53\xaa\x90\xd7\xbe\x7a\xc6\x2d\xc6\xc6\x0f\x0f\xa9\x08\x8d\x0a\x42\x05\xb8\x91\x7d\x41\x25\x4b\x2c\xae\x8b\xf2\xaa\xb8\xc9\x7f\xb8\x5f\x96\x45\xb6\x7c\x2e\x82\xd8\x27\xa3\x76\x69\xeb\x1a\x8d\x55\x84\xd5\x0e\x1c\xa2\x41\x33\x32\x50\x72\xd8\x01\xd6\x18\xd6\x5c\xa0\xd8\x9f\x36\xf5\x3a\xa1\x48\x23\x6a\x23\x0c\xe9\x29\xae\x72\xb4\x7e\x60\x0f\x42\x9b\xba\x0e\xcd\xcf\xd2\x3d\xf9\xe1\xd0\xd8\xee\x3b\x76\xf5\x79\x23\x1a\xac\x1e\x3a\x82\x48\xec\x8a\x34\x3f\x4b\x19\x1d\xec\x3c\x2a\x6e\x83\x37\x9f\x55\x8e\xc1\xbb\x27\xf2\xf7\xe8\x4e\x3d\x50\x85\xfc\x8d\xa2\xcf\x2b\x4f\x45\x8f\xb9\xa1\x30\x55\x21\x99\x50\x22\xc3\x8f\x09\x2b\x84\xf4\xc8\xfc\xb0\x0b\x86\xc4\x82\xd9\x7f\x5b\x63\xf8\xd7\x3f\xfe\x19\xa1\xf1\x95\xd5\x3b\xd0\x1b\xcf\x25\xf1\x14\x1e\x37\x56\x6f\x18\x0c\xb5\xa5\xc8\x40\x30\xe8\xb8\x08\x58\x93\x40\x8f\x86\xc5\xda\x86\x73\xe0\x75\x7c\xc3\x98\xf7\xe1\xb0\x04\xc1\x57\xc8\xeb\xf4\x34\xa2\x54\x37\x94\x74\x6c\x41\xc1\x9a\xcb\xf5\xde\x8a\xc4\x68\x4f\x05\x2e\xb1\x41\x2d\x59\xd6\x31\xf9\x8e\x5f\x62\xb0\xde\x44\x41\xba\xad\xf1\x7c\x32\xb1\xae\x69\xa9\xbf\x7e\x1e\x50\x51\x87\x20\x90\x1f\xa7\x6a\xbc\x80\x5b\x0a\xd6\xad\x65\x41\x94\x38\xda\xaf\xc9\xe2\x09\xe4\x95\x8a\x91\xf5\x25\x80\xf7\x99\xd4\x79\x55\x86\x0a\x61\x35\x67\x62\x9c\x75\x06\x3f\x59\xb7\x7e\x1b\x90\x82\xc5\xad\xaa\x92\x6c\x45\xb8\xf6\x61\xd7\x0b\x7f\xd5\x09\x97\xb9\xa4\x7d\xf8\x1b\x6a\xea\x6d\x90\x10\x4c\x2f\x8f\x76\x76\x1e\x10\x1d\x29\x14\x43\x2b\x6c\x04\x52\x1f\xd0\x1d\xee\xf1\x89\x2e\xa0\xc4\x15\x06\x74\x1a\x0b\x19\x4b\xa6\xec\x8f\x4e\xef\x42\xbc\x05\xb4\x51\x34\x9a\xfc\x40\x35\x4d\x65\x31\xca\xb6\xe4\xd2\x8b\x6e\xf3\xf0\xf8\xf7\x1b\xcf\x3a\xd5\x3a\x20\x72\xe9\xeb\x79\x72\x8a\x16\x87\x63\x3f\x5d\xc4\xfd\xbd\x50\x3a\xd8\x42\x05\xda\x5d\xc0\x8f\x7b\xe3\x32\x4d\x3e\x88\xf0\x57\xef\x7b\x97\xb7\x91\xbc\xb1\xca\x31\x1d\x3e\xf2\x78\x12\xd7\x6f\x18\x05\xf0\x17\x8d\xb6\xbc\x31\x81\xed\x62\x3c\x7f\xf5\xba\x7f\xe5\xf0\x24\x8e\x4a\x40\xbc\x18\x55\xab\x3e\xc4\x1f\x5b\x6e\x05\xde\x39\xc5\xe3\xf3\xca\x8a\x55\xa6\x0d\xe2\xb7\x2f\xc5\x70\x74\xa8\xc4\xd8\xf0\xa6\xa3\xcb\x7e\xbf\x41\x97\xac\xe9\x53\xfc\x51\x45\xd0\x02\x74\x03\x3d\x16\xd1\xc8\x76\xe6\x97\x4b\xcb\x88\xe7\xdf\x57\x93\x34\x38\x2e\x37\xc8\xb9\x27\x75\xb8\xe5\x42\x4c\x56\xdb\x46\xce\xb7\x9c\x58\x8c\x36\xb6\xf1\x50\x43\xa2\x6f\x83\xc6\x53\x50\x55\xc5\x2e\x4a\x50\x64\x01\x8f\xc1\x12\x21\x47\x0c\xb6\x18\x1e\x54\x95\xd0\x21\x44\x45\xc6\xf1\x61\xa5\x11\x7e\x96\x90\x0e\x3f\xae\x83\x72\xe4\xc3\x7b\x3e\xaa\x18\x74\xd1\x3b\x55\x41\xc0\x26\x20\x6b\x15\xde\x71\x0a\xb5\x32\xd8\x4d\xe1\xaa\xa5\x8d\x0f\xf6\xef\x68\xfa\x89\x3b\x09\x41\x7c\xcf\x72\x35\x06\x27\xcc\xe5\xb0\x4d\x4a\x51\xa4\x60\x35\xdf\xad\x1b\xf6\xfa\x7a\x03\xca\xed\xa0\xb2\x75\x37\x11\x48\x4f\xeb\x42\xca\x77\x6c\x23\xdf\xd7\x99\x03\xad\xb6\x2e\x52\x68\xf5\x9e\x73\x1c\x12\xf2\x73\xcb\xea\x36\x92\x90\xd1\x6a\x77\x31\x39\x81\xdf\x9f\xc3\x22\xd8\xad\xd2\xbb\xbd\x53\x2f\x6d\x48\xec\xf4\x02\xb2\xde\x65\xe9\x13\x82\x7c\x82\x39\xed\x3e\x90\x9c\xb2\x21\x52\x78\xfb\xcf\x16\xaf\xe3\x46\x05\x7c\x33\xec\xbf\xdc\xc9\xff\x70\x0e\xd7\x68\xa4\xcd\x2f\x19\x0c\x22\xef\x09\x65\xfd\x12\x79\x68\x9d\xc1\xb0\xf6\xa0\x0e\xc5\x95\xf6\x47\x5f\xa7\x3a\xde\x75\x8c\x80\xab\x36\x32\x83\xf0\x3d\x72\xdf\xb0\xd2\x3f\x9e\x33\x38\x50\x05\xbd\xf9\x8a\x2e\xe6\x23\x1d\xca\x98\x15\x85\xfe\x54\x4f\x46\x3a\xf6\x7d\xa0\x14\x7c\xcb\x01\xf5\x35\xac\xee\x4f\xe7\x90\x99\xad\x70\xa9\x9c\x01\xb5\x57\x15\x47\xba\x46\x81\x12\x6a\xe2\xb9\xc4\x5b\x55\x1d\xd8\x48\xdd\xf9\x6a\x70\x61\x3c\x5f\x9f\xc3\xe5\x4d\xf9\xe6\x7c\x42\xbb\xe6\x00\xff\x9f\xfa\x9e\xd0\x31\x98\xce\x2b\xbd\xcf\xe4\xa5\x35\x87\xca\xfd\x5b\xe9\x33\xfd\x6a\xee\x0d\xc7\xa2\x23\x81\xfc\xdf\x51\x73\x09\xbe\xde\x83\x79\xd0\x14\x7e\x51\x7b\xf9\xb5\x1d\xed\x39\x3d\xe8\xbf\xd5\x7e\xfe\x1f\x3b\x4f\xf7\xea\x4b\x31\xff\x8d\xf6\xa5\x9f\xff\x1d\x00\x00\xff\xff\x56\x9a\x40\x62\xa1\x16\x00\x00")

func typeConsentGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeConsentGraphql,
		"type/consent.graphql",
	)
}

func typeConsentGraphql() (*asset, error) {
	bytes, err := typeConsentGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/consent.graphql", size: 5793, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xef, 0x77, 0xa2, 0x13, 0xd7, 0x89, 0x13, 0x29, 0x5b, 0x0, 0xe1, 0x2a, 0xaf, 0xa8, 0xae, 0xfb, 0x9a, 0x4b, 0xf7, 0xc3, 0x25, 0x6a, 0x76, 0x51, 0x32, 0xef, 0xac, 0x6e, 0x23, 0x14, 0x30, 0x5a}}
	return a, nil
}

var _typeConsumerGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x56\xdf\x6f\xdb\xba\x0e\x7e\x6e\xfe\x0a\xae\x7b\xb9\x17\x48\x0b\xdc\xd7\xbc\x79\x8e\xdb\xfa\xce\x71\x82\x24\x6d\x31\x1c\x0c\x01\x63\x33\x31\xcf\x64\xc9\x90\xe4\xb6\xc1\xb0\xff\xfd\x40\x92\xdd\xe6\xd7\xd9\x06\x74\x4f\x89\x25\x8a\xe4\xf7\xf1\x23\xa5\x01\xc9\xb6\x86\x39\x16\x04\xdf\x07\x00\x00\x1f\x21\xaa\x49\x73\x81\x12\x52\x59\x32\x4a\x50\x1a\x22\x81\xe6\x1b\x42\x8e\x96\x9f\xe8\x1a\x22\x68\x48\x1b\x25\xa1\xc2\x27\x96\x5b\x50\x9a\xb7\x2c\x0d\xb0\x04\x94\x3b\x50\x1b\xb0\x15\x75\xab\x28\xa0\x21\xd5\x08\x32\x6e\x3d\x57\xda\x56\x80\xb2\x84\x85\x6a\x6d\xd5\xc7\x82\xff\xb0\x2c\x44\x5b\x3a\x67\x31\x49\xab\x51\xf4\x5b\xff\x1d\x7a\xf3\xe7\x4a\x41\x8d\x2c\x2d\xba\x40\x56\xf3\x1a\x05\xe0\x66\xc3\x82\xd1\xb2\xf2\x59\x16\xaa\xae\x5b\xc9\x76\x07\x68\x2d\x16\x55\x4d\xd2\x5e\x7b\x50\xd1\x24\x99\xa7\x71\x94\xaf\xd2\x7c\x9c\x46\xf9\x6a\x3a\x5f\x45\x59\xb4\xf8\x1c\xe5\xab\x3c\x5a\xa6\x0f\xc9\xa0\xc7\x6e\x18\xe5\x7b\x00\xba\xf5\x1b\xd4\x90\xa0\xb1\xc3\x00\x92\xd0\x58\xef\x78\xe8\x92\x74\x06\x1d\xb1\xa6\x5d\x17\x4a\x5a\x96\x24\x2d\xbc\x12\x30\x84\x8d\xd2\x40\x2f\x58\x37\x82\x86\x10\x63\xbd\x56\xa5\x3b\x1c\x57\x2c\x71\x18\x0e\x0f\xe1\xff\xd8\xa0\x1c\xc2\x67\xa5\x09\x87\x30\x41\x81\x3b\x1f\x62\x86\xdf\xd8\x58\xb7\xe5\x22\xcd\x2a\x16\xdc\x34\x2c\x09\x52\x23\x50\x96\x66\x08\xcb\x0a\xd9\xfd\x0d\xc4\x3e\x30\x59\x89\x75\xc7\xd3\x22\x8d\x72\xe8\xc9\xf8\x24\xb0\xf8\xe6\xcb\xbf\x09\x82\xe8\x95\xf1\xbb\x04\xad\xbd\x03\x8d\x05\xa3\x80\xad\x56\x6d\xe3\x39\x0a\xee\xae\x61\x49\xba\x36\x60\xda\xa2\x02\x34\x70\x79\x87\x6c\x19\xe5\xa5\x8b\x78\x99\xd3\x56\xab\x4b\x70\x51\xd7\x04\xad\xa1\xd2\xfb\x2e\x4b\xf6\xd5\xb6\x0a\x2e\xff\x3d\xbd\x4b\x0f\xe0\x53\x16\xc5\x9f\x7d\xa9\x6f\xe6\x49\xec\xca\xde\xcb\xa0\x07\x78\xc7\xa6\x41\xc9\x85\x73\x92\xa1\x65\xa9\xf6\x90\xa9\x0d\xc4\xed\xda\x11\x39\xa1\x17\xe7\x76\x08\xb3\x96\xb4\x55\x30\x0f\x5f\x41\xc1\x4a\x1f\x2b\x56\xfa\x3a\x2b\x5b\x91\x86\x85\xf3\x6f\x2a\x28\x5a\x61\x5b\x4d\x7e\xc3\x53\x35\x04\x4d\x5b\xd4\xa5\x20\xe3\x39\xd1\x58\xd0\x35\x2c\x2b\x02\x4b\xba\x1e\xc2\x65\x7f\xb2\x33\xff\x39\x15\x67\x80\x04\x0e\xee\xd2\xc5\x2c\xca\xd3\xd8\xd1\x90\x45\xcb\x34\x9f\xf6\xd8\x43\x2f\xc3\x1d\x3e\x23\x77\x5d\x3e\xf5\x29\xcf\xb0\xe0\x0d\x17\x9d\x5e\x48\xbf\xa7\x1b\x82\xf7\x21\xdc\xb6\x58\x0f\x61\x81\xb5\xc2\x3d\x72\x0e\x23\x99\x20\xc1\xd0\x8f\xab\xbb\xe8\x31\x4a\xbb\x56\x9d\x2e\xef\x92\xf9\x6a\x16\xc5\xe9\x4d\x1a\xaf\xd2\x45\x16\xe5\xe3\x64\xde\x03\x79\xac\xd8\xbe\x6b\x26\x25\xad\x56\x0d\x85\x7e\x99\x70\x59\x0a\xea\xba\x57\xe9\x6e\x5e\x75\x82\xf5\x01\x1f\xef\xd2\x65\x02\x83\x1f\x83\x30\x39\x6f\xc9\x71\x14\x66\xe7\x24\xca\x12\xf7\x7b\x93\xf8\x7f\xbd\xc9\x04\xb5\x66\x8b\x62\x61\xd1\xb6\xe6\x6d\xcc\x42\xd1\x6a\xed\x5a\xbf\x76\x06\xb8\x25\x70\xd3\x40\x63\x61\x81\x0d\x60\xe1\xea\xe3\x6d\x27\xd1\x7c\x9e\x26\xe3\x1e\x70\x1c\x8e\x89\x1d\x48\x65\x3d\xbe\x53\x0f\x21\xd7\xfb\xfc\xe8\xe8\xe4\x24\x52\x85\x06\xd6\x44\x12\x4a\x2a\x04\x6a\x2a\xa1\x64\x63\x94\x78\xa2\xd2\x8f\x07\x96\x7b\x89\x8c\xd3\x87\xe9\x3c\x7e\x73\xf7\xc8\xa5\x7a\xa6\x12\xae\xbc\x70\x4d\xa3\x5a\x43\xde\x63\xc9\x54\x06\xb6\xd2\xf1\xf4\x31\x19\xbf\x8e\x94\xb1\xaa\xc9\x58\x2e\xa0\x41\x6d\x25\xe9\x8b\x2b\x98\x85\xb2\x75\xf1\x0d\xd8\x0a\x2d\x20\x94\x47\x96\xa0\x49\xf8\x49\x6f\x2a\x6e\x80\x5e\xd8\xd8\x4e\x31\xe3\xe9\x24\x59\x2c\xd3\x78\x35\x8b\xe6\xcb\xfc\x4d\x18\x33\x25\x76\x5b\xac\x55\x6b\xe0\x0a\x26\x4a\x93\x73\x2d\xe1\x7f\xaf\xbc\x87\x84\xbd\xf5\x6c\x9a\x7d\xb9\x8d\x26\xd3\xfb\xc5\x6b\xaa\x19\x6d\x51\x88\x1d\x2c\xa8\x41\x8d\x96\xca\x8b\x93\x15\x6f\x99\x25\xb7\x51\x96\x7d\x59\x2d\x92\x59\x34\x8f\x96\x7b\x60\x53\x69\x49\x0b\x55\xb4\x56\xe9\xdd\xc5\x15\x2c\xda\xf5\xdf\x54\x58\xd7\xb1\xfe\x76\xdd\xdb\x85\x31\x15\x9a\x28\x00\x4a\xf3\x65\x32\xcf\xa6\xf1\xfd\x72\x3a\xff\xf2\xea\x2d\x92\xb2\x15\x82\xca\x8b\xab\xdf\x2a\xa3\x33\xf6\x15\xb4\xca\xeb\xa4\xc2\x27\x0a\xb4\x75\x79\x47\x79\x7e\x9f\x65\x2e\xdd\x1f\x83\x81\xdd\x35\x04\xb1\x92\xd6\x39\x0b\x0a\xe5\x72\x04\x0b\xab\x59\x6e\x3f\xf8\x6f\x89\x35\x1d\xae\xec\x57\xe4\x70\xa7\xa9\x94\x3c\x32\xa6\x1a\x59\xbc\x2d\xfd\x18\x0c\x58\x36\xad\x85\x4c\x6d\x59\xa6\x72\xa3\x52\xff\xf9\xfd\x9c\xb1\x77\x89\xc6\x3c\x2b\x5d\x9e\x71\x11\x2b\x69\xda\x9a\x74\xac\x09\x6d\xff\x8e\xd9\xb0\x36\x36\x77\x39\xef\x7b\x11\x78\x66\x31\x44\x3b\x1b\xac\x5f\x0c\x35\xa0\x17\x4b\xda\x4d\x0f\xa3\x5a\x5d\x10\x70\x60\x32\x7c\xa5\xe3\x91\xbb\x12\x74\x41\x7d\x3e\xe9\xd8\x63\xf2\x36\x58\x96\x9a\x8c\x19\x41\x14\xfe\xbc\xed\x90\xad\x24\x17\x6c\x77\x3d\x32\xbf\xba\xf5\x73\x65\xd4\xcd\x97\x40\x37\x16\x34\x0a\x4f\xb5\x0e\x8b\xdc\xb6\xb8\xa5\x99\xa6\x0d\x69\x92\x05\x1d\x78\xa8\x0f\xc6\xce\xe8\x68\x0c\x79\x93\x12\x2d\x4d\x37\x9f\x58\xdb\x6a\x04\x4b\xae\x43\x2f\x34\x9a\x6b\xd4\xbb\x4e\x0d\xcb\x5d\x43\xa3\x5e\x1a\x33\xc5\xd2\x2e\x76\xc6\x52\x7d\xc6\xf4\x01\x45\x7b\x98\x43\x53\x29\xab\x5e\x57\x4e\x0a\x76\xdf\x94\x6f\x05\x3b\xd6\xdb\x71\x01\xcf\xd5\xef\xa4\x7c\x83\x3f\x4f\xf6\x1f\xe2\xfa\x84\x8a\xbe\xe5\x3c\x13\xc0\xee\xb5\xe7\x1e\xac\x06\xa2\xc2\x2a\xdd\x5f\x13\x1f\xdd\x45\xa0\xf4\x2f\x18\x82\xb3\x1a\xff\x59\xff\xfd\x02\x54\x1f\xbc\xe8\xf3\x73\xd2\x97\x86\x95\x3c\x50\xbc\x19\xc1\x5f\xc7\x9a\xff\xf0\xf5\x14\x2f\x7c\x04\x5b\xb1\x81\x67\xd5\x8a\xd2\xbd\x62\xdc\x5d\x7b\x3f\xcf\xdc\x70\x72\x7f\x4b\xed\xde\x22\xcf\x15\x69\x82\x0d\x0b\x72\x17\xa0\xb1\x4a\x77\xa3\xea\xb8\x9e\xef\x2a\xe5\x1f\xea\x8b\xc3\x9e\xe8\xd3\xf4\x4f\x32\x14\xdd\x96\xa3\x67\xdf\xaa\xa3\x86\x6a\xd2\x5b\x92\xc5\xee\xd4\xec\xc3\x57\x27\x8d\xc1\x3f\x01\x00\x00\xff\xff\x7f\x38\xe3\x32\x96\x0d\x00\x00")

func typeConsumerGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeConsumerGraphql,
		"type/consumer.graphql",
	)
}

func typeConsumerGraphql() (*asset, error) {
	bytes, err := typeConsumerGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/consumer.graphql", size: 3478, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0xdd, 0xd6, 0xf2, 0x63, 0x42, 0x64, 0xc4, 0x48, 0xc1, 0x84, 0x14, 0xdc, 0xff, 0x72, 0xcc, 0x1b, 0x5, 0x95, 0x9e, 0xa1, 0x7a, 0x5c, 0xeb, 0x50, 0xbb, 0xcf, 0x1d, 0x60, 0x12, 0x8, 0x6b}}
	return a, nil
}

var _typeCustomerFeecbackGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8f\x3d\x8a\xc3\x30\x10\x85\x7b\x9d\x62\x7c\x0d\x75\xc6\xec\xc2\xb6\xbb\xdb\x2d\x2e\xe4\xd1\xac\x33\x49\xf4\x83\x34\x2e\x4c\xc8\xdd\x83\xa4\x04\x1c\x5c\xa4\x4a\x27\xde\xfb\xe6\xa1\x4f\xb1\x8f\x8b\xc0\xb0\x64\x09\x8e\xd2\x27\x91\x9d\x0c\x9e\xbe\x6a\x7a\x51\x00\x00\xd3\xaa\xe1\x9b\xfe\x29\x91\x47\xea\x51\x42\xaa\x6d\x57\x4b\x13\xe3\x99\xd1\x08\x07\xbf\xa1\x3e\xbc\xb0\xac\x1b\x2c\x2f\xd3\x91\x50\x34\xfc\x48\x62\x3f\xb7\xd0\x52\xc6\xc4\xb1\xdd\x6e\x0b\x59\x23\x3d\x12\xa8\x09\x3b\x33\x53\xd6\xf0\xd7\x8b\x18\x3c\x38\xf2\xd2\xd6\x47\x75\x55\xaa\xf0\x3b\x85\xfb\xef\xd9\x3e\x6f\xef\x6d\x5e\x8b\xbc\xcd\xa1\x1b\x6b\x83\x89\x8c\x90\xed\x45\xc3\x2f\x3b\x6a\x03\x18\x5c\x41\xca\xc1\xd0\x9e\x45\xf6\x16\x00\x00\xff\xff\x8d\x1e\xd8\x87\xb0\x01\x00\x00")

func typeCustomerFeecbackGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeCustomerFeecbackGraphql,
		"type/customer-feecback.graphql",
	)
}

func typeCustomerFeecbackGraphql() (*asset, error) {
	bytes, err := typeCustomerFeecbackGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/customer-feecback.graphql", size: 432, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe7, 0x4c, 0x8b, 0xab, 0xaa, 0xfd, 0xdb, 0x7b, 0x4c, 0x73, 0xda, 0x53, 0xbe, 0x4a, 0x93, 0xfd, 0xac, 0xf8, 0xbb, 0x1e, 0x9, 0x10, 0x53, 0x74, 0xe3, 0x45, 0x3c, 0x84, 0xa7, 0x81, 0x2d, 0xf0}}
	return a, nil
}

var _typeDeviceGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x53\x4d\x6f\x9b\x40\x10\xbd\xfb\x57\x6c\xd5\x3f\x10\xcb\xae\x13\x71\xa3\x80\x25\x54\x1b\x47\x6b\x48\x8f\xd1\x1a\xc6\xee\x54\x30\xeb\x2e\xb3\x49\xac\x2a\xff\xbd\xe2\x4b\x80\x6b\xfb\xd4\x43\x73\x83\xf7\xde\xcc\xbe\x7d\x3b\x33\x01\xb2\x85\x48\xfc\x30\x3e\x1d\x41\xfc\x9e\x08\x21\x84\x1f\x3c\x85\x5e\xf0\xfc\xd5\x95\xde\xc6\x0f\x86\x90\x5c\x86\xfe\xf0\x7f\xed\x46\x89\xbb\x1a\x22\x9e\x2b\x47\x8a\x6d\xb0\x5a\xca\xe0\x71\x23\xe3\x60\x84\x27\xd1\xb7\x68\xf3\x3d\x9a\xbc\x4f\x1a\x07\x3e\xbc\x60\x0a\x5b\xb5\x07\x3e\xb5\x36\xbc\xe9\xdd\xe2\x6e\xbe\xa8\x3e\xc5\x67\xb1\x56\x07\x02\xc6\x54\x48\x28\x35\x29\x4a\x41\x78\x9a\x32\x64\xd4\xa4\xf2\x41\xc1\x97\xeb\x05\x55\xfb\x81\xf2\xfe\xba\x32\xa1\xb2\xd7\x4e\x67\x0f\xf3\x79\xab\x5d\xa9\x1d\xe4\x48\x07\x91\x69\x28\x05\x69\xae\x5c\xb0\x42\x12\x6b\x19\x8a\xd6\x7f\x48\x7b\x6d\x0a\x55\x59\xeb\x8e\x9b\x2e\xee\x67\xc3\x16\x90\x09\x55\x76\xb5\x55\xbf\x48\xb1\x35\x2a\x17\xd2\xee\x76\x60\xc4\x4a\x31\xbc\xf5\x5e\x67\x0f\x6d\x71\xa4\x59\xac\x55\x06\xe2\x15\xf9\xc7\xe5\xa2\xb3\x48\x59\xb1\x2d\xc7\x2f\xbb\x8d\xdd\x38\xd9\x3e\xbb\x5e\x1c\x3e\x05\x17\x88\x30\xba\x4a\x05\x51\x1c\xc8\xc0\x0f\xa3\x40\xca\x8d\xbc\x20\x18\x3c\x2c\xd2\xd1\x72\x6b\x23\x21\xfc\x65\x21\xcc\x80\x18\xf7\x08\x26\xac\xb9\xc6\x55\x56\x2b\x7a\xce\x11\x5b\x36\x48\x87\x9a\x24\x55\x40\x07\x88\x1a\xf9\x69\x0d\x96\x19\xa6\x55\xbc\x63\x26\x55\xc6\x20\x18\x4f\x2e\xc7\x38\x96\xa5\xed\xdb\x36\x18\x10\x9b\x53\x35\xf4\x4e\x37\xfd\x95\x65\xae\xb6\xe0\xb2\xe3\xff\xcf\xec\x30\x5f\xcf\x80\xe2\x6e\x81\x6d\x86\xce\xad\xdc\x6b\x51\x59\x0f\x86\x33\x1a\x93\x4f\x35\xc3\xf5\x41\xcd\xf9\x3d\xe2\xe9\x0c\x1c\xe1\xe5\x48\x98\xaa\xbc\xfa\xeb\x7b\xe5\x9a\x23\x5b\xec\xce\x6d\x17\x8a\xec\x5e\xa5\x6c\xcd\x2d\xc6\x57\x0c\x8e\x88\xb1\x80\xf6\xb2\x6f\x47\x34\xf5\xf2\x9c\x33\x85\xce\x20\x1f\x37\x7a\x01\x53\xfe\x1d\xad\xa6\xd2\x16\xd5\x99\x12\xf6\x60\x80\x52\x70\x53\xd6\xcd\xe5\x9b\x1b\xe9\x57\xba\xc2\x77\x1d\x58\xa5\xec\x34\x1b\x9a\xf2\xa3\x46\xe2\x86\x1e\x4f\x49\x9b\x38\x66\xe3\xc0\x6e\xbc\xc0\x3f\x0a\xff\x23\xe5\x7e\x23\xf2\xeb\x69\x4f\xde\xff\x04\x00\x00\xff\xff\xcb\xb2\x4b\xe5\x9c\x06\x00\x00")

func typeDeviceGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeDeviceGraphql,
		"type/device.graphql",
	)
}

func typeDeviceGraphql() (*asset, error) {
	bytes, err := typeDeviceGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/device.graphql", size: 1692, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xea, 0x12, 0xe6, 0xe5, 0x3c, 0x75, 0x7c, 0x4b, 0xbe, 0x6d, 0x29, 0xd7, 0xcd, 0x58, 0x92, 0x6e, 0xfc, 0x5d, 0xc6, 0xfb, 0x6e, 0x9b, 0x10, 0x80, 0xfe, 0x3e, 0x14, 0xf4, 0xad, 0xdf, 0xb7, 0xd0}}
	return a, nil
}

var _typeDevice_data_sourceGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x91\x31\x4f\xc3\x30\x10\x85\x77\xff\x8a\x57\xf5\x5f\x64\x43\xc0\xc0\xc0\x42\xba\x21\x06\xcb\xb9\x10\x8b\xc4\xae\xce\x2f\x48\x01\xf5\xbf\x23\xdb\x51\x55\x45\x45\x74\x64\xb5\xde\x3b\x7f\xdf\x9d\xf1\xe1\x38\x13\x0f\x96\xb6\x5d\x82\x6b\x69\x39\xa7\xa7\xf2\xf6\x6d\x00\xec\x51\x9f\x10\x7b\x70\x10\x4c\x31\x11\x2a\x4e\x02\x91\x96\xe0\x72\x26\x95\x44\x83\x96\xea\xc3\xfb\x0e\xb5\x77\x18\x04\xa3\x4d\x04\xfd\x24\xa5\x9b\xf3\x83\xc6\xe0\xbf\x2c\x7d\x0c\xa0\x4d\x1f\x50\x1b\xd0\x47\x05\x07\x9f\x30\x27\xd1\xdc\xce\xbd\x8c\xd3\xe0\xe0\x27\xd9\x99\x93\x31\x5c\x8e\xb2\xc1\xac\x84\xbe\x3b\xff\xfc\xaf\x80\xd7\xc5\xca\xa7\x77\x52\xb8\xe3\xac\x4e\xee\x55\x2c\xa5\x92\xc3\xc5\x90\xe6\x49\xb4\xc1\x8b\xf4\xa2\x12\x9c\xdc\x39\x46\x2d\xfb\x2f\x36\x48\xa5\x55\xa7\x5c\xc4\x1e\x03\x3d\x97\x8b\x5c\x57\x12\xcf\x42\xf5\x2e\x35\x78\xbd\x9a\x7c\xab\x23\xcf\x0b\x6c\xae\xdd\x3d\xb3\xef\x61\xd7\x89\xe8\x2c\xed\x4a\x01\x46\xb8\x38\x8e\xe2\x58\x9e\xd7\x9b\x6c\x0c\x57\xb7\xcd\x59\x7e\x75\xbd\x41\xf3\x26\xc3\x3f\xe5\xcc\xe9\x27\x00\x00\xff\xff\xef\x2d\xd7\x47\xec\x02\x00\x00")

func typeDevice_data_sourceGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeDevice_data_sourceGraphql,
		"type/device_data_source.graphql",
	)
}

func typeDevice_data_sourceGraphql() (*asset, error) {
	bytes, err := typeDevice_data_sourceGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/device_data_source.graphql", size: 748, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x48, 0x9f, 0x2c, 0x51, 0x1d, 0xf7, 0x91, 0x4c, 0x87, 0x6b, 0x2d, 0x21, 0x2c, 0xb8, 0x72, 0x3c, 0x7b, 0xfb, 0x5d, 0x45, 0x73, 0x71, 0x89, 0xd8, 0x86, 0x70, 0xf1, 0xec, 0x33, 0x3, 0xbd, 0x6c}}
	return a, nil
}

var _typeDevice_metricGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x53\xdd\x8a\xe2\x30\x18\xbd\xef\x53\xc4\xd7\xe8\x5d\x4d\x3e\x97\x80\x4d\xdd\x24\x5d\xd8\xab\xd2\xad\xdf\x4a\xc0\xa6\x12\xd3\x01\x19\x7c\xf7\xa1\x69\x98\xd1\xaa\x1d\xc1\x8b\xf1\x32\xe7\xe4\xfc\xd9\x24\x68\xfb\x96\x30\x7c\x33\x0d\xe6\xe8\x9d\x69\x8a\x03\xba\xda\x9b\xce\xd6\x7b\xe5\x6b\xdf\x1f\xc9\x7b\x42\x86\x1f\x83\x3f\x9c\x42\x95\x83\x96\x9c\x56\x4a\x67\xba\x54\x55\x21\xe6\xc0\xd5\x6a\x06\x55\x3a\x13\x6c\xf9\x77\x86\x01\x42\x83\x04\x56\x71\x51\x81\x94\x85\x4c\xce\xc9\x6d\x5e\x5a\x7b\xdc\x75\xee\x14\x63\x5e\x0b\xe5\x90\xa9\x52\x42\x0e\x42\xdf\x41\x15\x68\xcd\xc5\xaf\x3b\x08\xcd\xd6\xb4\x5c\x67\x9a\xc7\x7e\xd7\x68\x29\xd4\x06\x28\x5f\x71\x60\x0f\x22\xed\xcd\xbf\x71\xc4\x61\x42\xbc\x1b\x8d\x66\x6b\xbe\x94\xc1\xa2\x92\xf0\xbb\xe4\x12\xd8\x0c\x0d\x18\xf9\x46\x44\x14\xfa\x19\xa1\x81\x3a\x29\x60\xec\xa1\xf7\xb1\xc1\x45\x76\x1e\x8e\xc7\xec\xc7\xa1\x47\x3a\xdb\x72\x11\x88\xde\xb4\x98\x12\x6d\x5a\x5c\x90\x41\xdb\x9f\x0e\x78\x2b\x1d\x55\xcd\x36\x25\xca\x3b\x63\x77\x8b\xd7\x5c\x2e\x1b\xc4\x7b\x0e\xbf\x96\x1f\x42\x5c\x3b\xf5\xd6\xf8\x89\x77\xd7\xbb\x06\x53\x22\xf1\x3f\x3a\xb4\x0d\x82\xf5\xc6\x9f\xc2\x08\x23\xa3\x9b\xbe\x8c\x74\xfe\xe1\x84\x4b\x4d\xfc\x3c\xa7\xad\xc6\xd3\x40\x69\xb1\x3e\xf6\x0e\x5b\xb4\x7e\x83\xce\x74\xdb\xd0\xcc\xd8\x5d\xf0\x8e\x2a\x9f\x2b\xa4\x0f\xfe\xa8\xc9\xd8\xa3\xcf\x83\x9d\x5f\xd8\xe3\x87\xa6\x78\x62\x85\xe4\xfc\x11\x00\x00\xff\xff\x43\xb0\xcc\xbe\xcd\x04\x00\x00")

func typeDevice_metricGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeDevice_metricGraphql,
		"type/device_metric.graphql",
	)
}

func typeDevice_metricGraphql() (*asset, error) {
	bytes, err := typeDevice_metricGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/device_metric.graphql", size: 1229, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0x16, 0x1d, 0x7, 0xab, 0xde, 0xd2, 0x44, 0x1a, 0x88, 0x2a, 0xf3, 0xb8, 0x0, 0xa, 0x20, 0x44, 0xa7, 0x52, 0x5d, 0xe5, 0xad, 0xee, 0xeb, 0xb5, 0x4e, 0xd9, 0xcc, 0x97, 0xf2, 0x6e, 0x7f}}
	return a, nil
}

var _typeDiagnostic_report_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\xdd\x6e\xeb\x36\x0c\xbe\xf7\x53\x30\xc8\xe5\x80\x3d\x80\xef\xbc\x24\xed\x0c\x64\x6d\xe0\xe4\x66\x28\x86\x41\x95\x18\x87\x80\x2d\x19\x14\x9d\xcd\x5b\xf7\xee\x83\x25\xa7\xc7\x49\xf3\x87\x13\x9c\x2b\x5b\x24\x45\x7e\xfa\x48\x7e\xc9\x14\x18\x4b\xf2\x82\x8c\x06\x3e\xa0\x51\x2c\xa4\xaa\xfe\x8f\xb1\xa2\x9a\xac\xe2\x0e\x3e\x60\x4b\x56\x55\xf0\x53\x82\xb6\xad\x61\x4e\xaa\xb4\xce\x0b\xe9\x02\x1b\xc7\xb2\x16\x25\xad\x87\x7f\x13\x00\x98\xe7\xd9\xf3\xcb\xeb\x7a\x93\xcf\x8a\xc5\xea\xb5\xd8\xfc\x59\x2c\x9e\xf3\xf5\x66\x51\x2c\xe6\x67\xdd\xab\xac\xd8\xe4\xd9\xf2\xbc\xaf\x58\x2c\xf3\xdf\xf2\x97\xac\xf8\xfd\xac\xff\x29\x7f\xc9\x96\xc9\x7f\x49\x42\xb6\x69\xe5\x0b\xac\x15\xf2\xd6\x71\x8d\x9c\x07\x77\x80\x07\xec\x2a\x4c\x61\x2d\x4c\xb6\x9c\x7c\x5a\x66\xce\x60\x0a\x33\x67\xd4\x7b\x7f\xb0\x1a\x1b\x89\xb7\x20\xc4\x28\x2d\x8e\x53\x28\x70\x8b\x8c\x56\x63\xd6\x9f\x43\xc0\xa4\xaf\x2f\x5d\x83\x97\xcb\x0f\x95\xc9\x7c\xad\x7b\x1f\x92\x2b\x18\x26\x97\x9f\x5f\xa0\x76\x6c\x66\x8c\x4a\x70\x80\x30\x85\x27\x76\x35\xec\x50\x55\xb2\x03\x0e\x01\xc1\x61\x55\x7d\x82\x45\x3b\xeb\xdb\x9e\xbb\xf9\xb1\xdd\xa0\xd7\x4c\x8d\x90\xb3\x07\x47\xb0\x3b\xad\x5b\x66\x34\x29\x6c\xa8\xc6\x18\xeb\x5d\xcb\xfa\x5b\xde\x81\x4b\xc7\xa5\xb2\xf4\x8f\x1a\xa7\x18\x5c\xf1\x42\x04\x1e\x0a\x1f\x9d\x03\xdf\x91\xa8\x03\x07\x3e\x85\xb7\x4f\x42\x7e\x0d\xcf\x1a\xa2\x43\x6f\xfe\x08\xd1\x95\xd3\x43\xb1\x67\x74\xcb\xe1\x10\xbb\x9b\x0c\xb4\x98\x4f\xee\x3c\x70\x60\x2f\x38\xde\x95\x47\xf3\x6a\x47\xa4\x7f\xad\x11\x81\x87\x0d\x48\x2f\x6c\xc6\xc0\xa8\x12\x2c\x1d\x77\x27\x3c\x0f\xd6\x8b\x13\x78\xe8\x86\xe0\xdf\x72\x0d\x48\x64\x10\xb7\x5b\xd4\x42\x7b\x9c\x2b\xc1\xbe\x13\xb1\x1f\x27\xce\x15\x32\x39\x93\x42\xfc\x8e\xae\x93\xf7\xed\xa1\x87\xd1\xd2\x1c\xa6\x38\x85\xb7\xeb\x0b\x36\xb0\xcd\xe8\xdb\x4a\xee\xe9\x0b\xd5\xaa\x24\x5b\xae\xa5\x35\x5d\x0a\x6f\x99\x88\xd2\xbb\x1a\xad\x8c\x83\xb4\xb3\xba\x6a\xfd\x68\x56\x0e\xf3\x69\xd0\x0c\x80\xc8\x9f\xdf\xdd\xf8\x00\x46\x8f\x56\xd0\x3c\x39\xae\x53\x38\xa9\x02\xd0\x2f\xd0\x14\xb2\xd1\x08\x0c\x13\x00\xe4\x41\x76\x08\x1e\x05\xdc\x16\xc8\xf6\x6f\x0d\xb3\x03\xb2\x53\xc1\x9d\x4c\x41\xba\x86\xb4\xaa\xaa\x0e\x1a\x76\x7b\x32\x68\xe0\xbd\x03\x35\x4e\xe7\x91\xf7\xa4\x11\xfe\xda\xa1\x05\xb2\x7b\xf4\x42\x65\x48\xe4\x41\x31\x82\x76\x75\x53\xa1\xe0\xcf\x70\x5e\x48\x22\x73\x40\x7d\x54\x0f\xdc\xc3\x98\xd1\x5b\xab\x7d\x2a\x3b\x97\x16\xbb\x61\xdc\x93\x6b\x7d\xcc\x7a\xb4\xdb\x31\xdb\xa6\x6b\x30\x3d\x2a\xdd\x5b\xe2\x65\x61\x65\xbd\xd2\xfd\x9b\xce\x84\x1d\x3b\x27\x17\x14\xe7\x21\x65\x19\x04\x44\x07\xb5\x3b\x0a\x3d\x27\x37\x77\x88\xcd\x38\xdd\x2f\xdd\x09\x1d\xb7\xd4\xe7\x9a\xf0\x3c\x24\x39\x3f\x52\x6d\xee\x10\x9a\xef\xd7\x98\x87\xe4\xe5\x2e\x65\xb9\x25\x2a\x0f\xe9\xc9\x0d\x29\xe9\x55\xe4\xff\x00\x00\x00\xff\xff\xb0\xfe\x49\x0a\x4a\x09\x00\x00")

func typeDiagnostic_report_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeDiagnostic_report_recordGraphql,
		"type/diagnostic_report_record.graphql",
	)
}

func typeDiagnostic_report_recordGraphql() (*asset, error) {
	bytes, err := typeDiagnostic_report_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/diagnostic_report_record.graphql", size: 2378, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf9, 0xf6, 0xa1, 0x6, 0x6d, 0xc6, 0xd, 0x27, 0xa3, 0xb7, 0x4a, 0xec, 0xc3, 0x6e, 0x42, 0x3d, 0xa6, 0x39, 0xef, 0x49, 0x64, 0xb6, 0x84, 0xa6, 0x1e, 0xe0, 0x25, 0xa1, 0xd, 0x2b, 0x37, 0xa2}}
	return a, nil
}

var _typeDocumentReferenceGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\xcf\x8e\x9b\x30\x10\xc6\xef\x3c\xc5\x44\x7b\xef\x03\x70\x43\x84\x4a\x48\x09\x49\x81\x1c\xaa\xaa\x8a\x66\xcd\x6c\xb0\x04\x76\x64\x8f\xab\x46\xd5\xbe\x7b\x05\x26\x21\xff\x48\xba\x3d\x54\xbd\xc1\x37\x63\x7f\xf3\xd9\x3f\x07\x2f\x50\x30\xb2\xb3\x01\x29\xd7\xc2\x5c\x0b\xd7\x92\xe2\x9c\xde\xc8\x90\x12\xe4\x8b\xf0\x2b\x00\x80\xf9\x2a\xde\x2c\x93\xac\xdc\xc6\x9b\x3c\x4f\xb2\x12\x2e\xc4\x62\x53\xac\x93\x6c\x9e\xcc\x2f\xd4\x24\x2b\x93\x3c\x99\x6f\xd3\x6c\x9b\xe4\xf9\x2a\x0f\xde\x83\xe0\x05\x62\xdd\xee\xb5\x95\x2c\xb5\x02\x7b\x66\x7f\xa6\x9f\x1b\x43\xbc\x5a\xae\x57\x45\x5a\xa6\xab\xac\x28\xa3\x72\x53\x6c\xd7\x79\xb2\x48\x97\x69\x16\xe5\x5f\x27\x3a\x3e\xa7\x59\xb4\x98\xa8\x45\xeb\x71\xd4\x7b\xe5\xe5\xa3\xea\xbd\x48\x52\xed\x1d\xdf\x9e\xde\x17\x47\xe6\xb0\x46\x83\xed\x10\x84\x0f\x7b\x0a\xa1\x60\x23\xd5\xae\x17\x1a\x54\x3b\x87\x3b\x0a\x61\x31\x7c\xcd\x7a\x5d\x34\x68\xed\xb1\x73\x90\x9c\x65\x5d\x49\x54\xa3\xdc\x1f\xa6\xd0\x8a\x49\x31\xe8\x37\xe0\x9a\xa0\x1a\x86\xb8\x9a\x29\xf6\x5d\x69\x2f\xfa\x61\x86\x85\x97\x2e\xc8\x8c\xa2\x6e\x7b\x3d\x3a\x7d\xfb\x65\x9d\xdf\x03\xc3\x2e\xdc\xb5\xdf\x60\x25\xab\xab\x2c\x7f\x6e\x0d\x3e\x65\x74\x7b\xba\x60\xc8\x6a\x67\x04\x81\xb4\xe0\x2c\x55\xc0\x1a\x2a\xb2\xc2\xc8\x57\x02\x3c\x0d\x06\x5c\x23\x77\x3d\x2d\x56\x04\xf8\x03\x65\x83\xaf\x0d\x75\xdd\x08\x35\x61\xc3\xb5\x40\x43\x60\x0f\x96\xa9\xfd\x34\x75\x99\xe7\x47\x37\x75\x6d\x1e\xe6\x70\xea\x1d\x1d\xc3\x5f\x51\x1e\xde\x82\x3f\xbb\xc1\x65\x54\x62\x5d\x51\x08\x71\x23\x95\x14\xd8\x74\x7f\xfd\x68\x93\xdc\x74\xd2\xc4\x1a\x00\xdf\x62\x08\x99\xaa\x10\x4a\xd9\xd2\xcc\x6b\xe8\xb8\xd6\x26\x84\x53\x84\x48\xb0\x36\xa3\x53\x57\x27\xc5\x52\x20\x4f\xb4\x1d\x37\x1f\xb9\xbd\xd3\xe4\x67\xf4\xb7\xb6\xef\xf2\x1f\x87\x1f\x56\x5b\x12\xce\x48\x3e\x2c\xf0\x95\x9a\x07\x09\x8e\x40\x7d\xbb\x07\xfc\xec\xfb\xd8\xf4\x93\xcf\xe6\x48\x14\x4b\x3e\x8c\x74\xff\x53\xce\x2e\xde\xcb\xe8\x76\xff\xc5\xfc\x67\xc4\x7d\x10\xb6\x8f\x62\xf6\x9c\xb0\x27\x6c\x0d\xbb\xff\x15\x57\x4f\x88\x7a\x02\x13\x04\xef\xbf\x03\x00\x00\xff\xff\xc2\xaa\x8e\xcc\x55\x07\x00\x00")

func typeDocumentReferenceGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeDocumentReferenceGraphql,
		"type/document-reference.graphql",
	)
}

func typeDocumentReferenceGraphql() (*asset, error) {
	bytes, err := typeDocumentReferenceGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/document-reference.graphql", size: 1877, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x43, 0x7e, 0x59, 0x65, 0xf0, 0x10, 0x54, 0xea, 0xb1, 0x6d, 0xc3, 0x79, 0x79, 0xe0, 0xd0, 0x10, 0x4f, 0xff, 0xf5, 0xa4, 0x2a, 0xf3, 0xef, 0x59, 0x11, 0xf, 0xd2, 0x69, 0xa9, 0x1c, 0xb9, 0x62}}
	return a, nil
}

var _typeEncounter_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x53\xcb\x6e\xdb\x30\x10\xbc\xeb\x2b\xd6\xc8\x5f\xe8\x58\xbb\x8f\x00\x2d\x1a\xc4\x41\x2f\x45\x0f\x04\x39\x71\x16\x90\x48\x61\x49\x15\x75\x03\xff\x7b\xc1\x87\x6d\x51\x95\x0c\x14\x45\x6e\xe4\xee\x70\x77\x76\x67\x18\x8e\x03\xe8\xbd\xd5\x6e\xb4\x01\xf2\x55\x0c\x84\x5e\x1b\x22\x22\xab\x7a\xb4\xb4\x0f\xc2\xf6\xb0\x49\x11\xed\x0c\x5a\xda\x76\x6c\x59\xab\x6e\xeb\x0c\x52\x18\xbf\x06\xe8\x00\xb3\x53\x01\x2d\x3d\x71\x7f\x09\xb3\xa8\xc0\xce\xce\x12\x83\x38\x0d\x33\x0a\xb6\xa9\xde\xc3\xf4\x9a\x1b\x45\x52\xe7\xd6\xcd\xa9\x69\xd8\x0e\x63\x98\xb1\xdc\x0a\x54\xc0\x2a\xd7\xb7\x27\x55\x6f\xee\x11\xda\x89\x21\xee\x87\x0e\x3d\x6c\xf0\xf4\x09\xaa\x0b\x2f\x25\xfe\xda\xa4\x1a\x77\xf4\x92\xa2\x24\x39\xec\x07\x68\x7e\x66\x5d\x28\xe0\x27\xbb\xd1\xe7\x27\x97\x56\x31\x95\xe1\x4f\x89\xc1\xb4\x6e\x8c\x14\x76\xa2\xac\x57\x3a\x4e\xb6\x00\xab\x93\x9b\x95\x9d\x19\x78\x2d\x3c\x44\x58\xd5\xdd\x69\x3d\x8a\xc0\xe4\x75\x65\xac\x77\xa3\xe8\xeb\xfb\x18\xca\x1e\x49\xb2\x54\x50\x27\x07\x65\xf9\xb7\xfa\xab\x6e\xae\x91\x29\xde\xef\x5a\xda\x57\xf7\x69\xb9\x77\xc7\xd9\x3a\x9e\x21\xb0\x1a\xbe\xa5\xef\x8f\xe7\xcb\x74\xe2\xcd\x8f\x04\xec\x9c\x2e\x6d\x3f\xc2\x7d\x2e\x97\x2c\x05\x9b\xb9\xb9\xad\x1f\x7b\x48\x22\x32\x89\x0b\x94\x77\x36\x37\x8a\xa7\x52\xd9\xb0\x3a\x58\xe7\x39\x26\x76\xe7\x73\xc9\x0d\x72\x5d\x64\xcc\x7f\x81\xe1\xdc\xba\x00\x5c\x34\x70\xcc\xd4\x96\x2e\x59\x15\x02\xac\xc9\x43\x3f\x48\x94\x2d\x3e\x85\x2c\xfc\x84\x3c\x6c\xf5\x15\xee\xe8\x83\xb8\xbe\xf6\xd9\xea\x7f\x5e\x1e\xf9\xbf\x7c\xb0\x2a\x79\x49\xd5\xa2\xef\x8f\x3e\xa0\xbf\xe1\x8a\x6f\xaa\x1b\xf1\x8f\xe2\xdf\xc7\x25\xdd\x72\x40\x02\xd0\xf9\x4b\x5e\xb6\xb9\xa8\xf7\xb4\xd8\xa2\xe8\x53\xc0\xba\xf2\x59\xa3\xdb\xfa\x57\x98\xab\x0b\xae\xf2\x34\xa7\x3f\x01\x00\x00\xff\xff\xe5\x9c\xeb\x9b\xaf\x05\x00\x00")

func typeEncounter_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeEncounter_recordGraphql,
		"type/encounter_record.graphql",
	)
}

func typeEncounter_recordGraphql() (*asset, error) {
	bytes, err := typeEncounter_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/encounter_record.graphql", size: 1455, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x7, 0x50, 0x3d, 0xc2, 0x3f, 0x7, 0xff, 0x61, 0x71, 0xc4, 0x9a, 0xe1, 0x85, 0xf4, 0xb9, 0x5e, 0x4e, 0x7e, 0xbe, 0x32, 0xcc, 0x55, 0x98, 0xd0, 0xed, 0xeb, 0x15, 0x66, 0x78, 0xd1, 0xe3, 0x1a}}
	return a, nil
}

var _typeEndpointGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x5f\x6f\xd3\xc8\x17\x7d\x26\x9f\xe2\x22\x1e\x28\x12\xbf\x22\xf1\x82\xd4\xb7\x28\x31\xbf\x7a\xd5\x36\x59\x3b\x05\x24\x84\xa2\x9b\x99\x9b\x78\x16\x7b\xc6\xdc\x19\x07\xb2\x2b\xbe\xfb\xea\x8e\xed\xd4\x0e\x2d\x68\x25\x56\xe2\x61\x9f\xd2\x64\xe6\x9c\x39\xf7\xdf\xb9\x9d\x4c\xc8\x36\x15\x24\x56\xd7\xce\xd8\x90\x07\x0c\x8d\x87\xbf\x26\x00\x00\x4f\x60\x55\x18\x0f\xd4\x9d\x81\xfc\xfd\xa5\x26\x15\x48\x43\x70\xb0\x21\x40\x15\xcc\x9e\x00\xad\x06\x85\x56\x7e\x69\x3c\xe9\x08\x4e\x6e\xe6\xcb\x45\x7a\xb3\x5a\x4f\x67\xab\xf4\x4d\x32\x79\x88\x31\x50\x55\x3b\x46\x36\xe5\x01\x1a\x8b\x7b\x34\x25\x6e\x4a\x3a\x1f\x93\xe4\xb7\xf9\x32\xb9\x99\x27\xf3\xfb\x79\x0a\x14\x69\x8a\x48\x93\x06\xe5\xac\x25\x11\x66\xc2\x01\x42\xc1\xe4\x0b\x57\x6a\x1f\x55\x1a\x2f\xc7\xde\x68\x62\xd2\x60\x2c\xa0\x05\x62\x76\x0c\x3e\x60\xa0\xf1\xa3\x49\x96\x2d\xb2\x07\x85\x5b\x07\xa5\xb3\x3b\xe2\x2e\x17\x12\xf9\x89\xea\xc5\xeb\xd7\x23\xb8\xb1\x3e\xa0\x55\x04\xbe\x70\x4d\xa9\xc1\x3a\x91\xbe\x27\xd8\x10\x59\xa8\x91\x03\xb8\x2d\x04\xb9\x5a\x63\x30\x64\xc3\x53\x0f\x15\x69\xa3\xb0\x04\x26\xe5\xf8\x24\xb7\xc9\xcd\x2a\xc9\x92\xf9\x3a\xbd\xf9\xa1\xd8\x00\xc6\x06\xb2\x92\xa0\xad\x63\xa8\xd9\xe9\x46\x05\xe3\x2c\x34\x1e\x77\x27\x91\xaf\x92\x7c\x35\xf9\x7a\xd2\x1b\xb3\x2e\xaf\xce\xae\x0e\x35\x1d\x7b\x64\xc6\xce\x7b\x98\xb9\xaa\x6a\xac\x64\x7c\xd9\x2a\x87\xb9\xf1\xca\xed\x89\x0f\xb0\x64\xb7\x35\x25\xc1\xd9\xbb\xd9\x72\xfe\x2c\xc2\xd2\xcb\x64\x2d\xdf\x26\x0f\x90\x4c\x95\x22\xef\x87\xc8\xe9\x10\x38\x1d\xe1\xfe\x97\xd8\x40\x5c\xb3\xf1\x04\x73\xa7\x9a\x4a\x9e\xcf\xa8\x34\xd2\x48\x90\x7c\x51\x05\xda\x9d\x90\xcc\xb3\x01\xc9\x3c\xfb\x31\x49\x5e\x20\x1b\xbb\x13\x68\xfe\x0c\x06\xd8\xbc\xc7\xa6\x76\xef\x3e\x12\xa4\x15\xee\x48\x42\xae\x4b\x3c\xc0\x59\x9a\x0e\xe2\x4c\xd3\x63\x98\xf3\x74\xb6\xb8\xfe\x4c\x1b\xc8\x92\x7c\xb5\x6d\xca\x0e\x97\x51\x60\x43\xfb\xb6\x08\xf1\xce\xfa\xed\x74\xbe\x58\x67\xf9\x0f\x80\x9f\x1a\xe2\xc3\x00\xf5\x7b\xfa\x7d\x94\x89\x28\x4f\x56\x4b\x54\x32\x10\x3e\x38\xee\xcb\xdf\x72\xe4\xab\xc5\xdb\xfb\x38\xc6\x52\xe1\x54\xeb\x6d\x96\xde\xe5\x24\x10\xa3\x0a\xf0\xd9\x84\x02\x42\x21\x2f\xf2\x9e\x38\x76\x20\x6f\x51\xc9\xb0\x88\x80\xd7\x97\x69\xf6\xd4\xdf\xa9\xeb\x8f\xcf\x5b\xf6\xcb\xab\x57\x6b\xb9\xb2\x96\x0b\x3d\xf9\x35\x79\x8f\x3b\x63\x77\x8f\x6e\x3d\x0d\xc8\x7d\x64\xbb\x3b\x7e\x98\xed\x3a\xff\xff\x91\xec\xea\x6a\xf9\xe8\xf2\xea\xd5\xfe\x25\x54\x11\x48\x1e\xa4\x67\xc5\x16\xae\xae\x96\xb0\x9a\x2d\x8f\x76\xe2\x6c\x4f\xf3\xe6\xe5\x5a\x80\x3d\x49\x52\xa1\x29\x41\x53\x69\x62\xb7\xb7\xa1\x21\x68\xb3\x33\x01\x4b\x50\xc4\xc1\x6c\x8d\xc2\x40\xe2\x14\x64\x15\x1f\xea\x10\x95\x2b\x27\x23\x19\x3a\x88\xfc\x52\x37\x9b\xd2\x28\xf8\x48\x87\xe7\x32\xf0\x24\x94\x50\x35\xbe\xf3\x89\x78\x85\xcd\x5e\xb8\x3e\xd2\x41\xf8\x34\x7d\xc3\x17\x75\xe5\xc9\xec\x36\x4b\xd6\xc9\xf5\x34\xbd\x3a\xd6\xd2\x30\xa9\x20\x53\xf5\x87\x7c\x1a\xbb\x75\x5c\xe1\x31\xb4\x79\x9a\x25\xb3\xd5\x7a\x99\x2d\x7e\x4b\x66\x71\xfe\x8d\xad\x9b\x70\x34\x80\x34\x7e\x6b\xe7\xde\xc7\x45\x71\x71\xb2\x38\x1e\xc7\x33\x8b\x15\x5d\x40\x1e\x64\x74\x1e\x77\x4f\x2f\xd9\x05\xa7\x5c\xf9\xa2\x1b\xe9\x17\x79\x40\xab\x91\xf5\xc0\x3d\xfb\x7e\x19\x7a\xd7\x49\xf6\xd5\xc8\x83\x2e\x1e\xf0\xa6\xfe\xd1\x05\xef\xd0\x9a\x3f\x63\x84\x10\x0a\x0c\x50\xa1\x8d\x45\x1e\x3f\x72\x56\x99\x5d\x11\xa2\x49\x6e\xda\x24\xbb\x6f\x90\xf4\xa5\x76\x3e\x22\xe9\x08\x6c\x67\x3c\x72\x1a\xbb\x1b\xbe\x76\x01\x19\x6d\x89\xc9\x2a\x9a\xaa\xe0\x38\xa6\xae\x97\x35\x73\x36\xc8\x78\x68\x0a\x68\x4a\x1f\xfd\xd8\xbb\x86\x15\xc1\x19\x9d\xef\xce\x21\xb0\x6b\x36\xa5\xec\x2d\x17\x8c\xdd\x3d\xeb\x43\x17\xd4\x05\xbc\xef\xf0\xcb\x63\x4d\x1e\x7f\x18\x4e\xde\x1e\xcb\x91\xca\x7b\xf6\xb6\xab\x89\xa3\x4e\x2c\x23\xb2\x26\x36\x4e\x5f\xc0\x32\x7e\xb6\x75\x3e\xae\x12\x82\x20\x7e\xef\xb6\xc7\x7e\xed\x52\x79\x38\x16\x0e\xc3\x69\x46\x63\x1c\xef\xe6\x79\x5c\x03\x05\xb2\xd8\x4e\x53\x55\xc8\x86\x7c\x1b\x4f\x8d\x87\xd2\xa1\x6e\xeb\xf8\xbe\xeb\x96\x0f\xa7\x47\x33\xa7\x29\x86\xac\xc5\xcc\x67\xce\x2a\xaa\x47\x41\x8b\xe1\xca\xe5\x6b\x53\xd1\x09\x17\xdc\x7b\xe1\x7b\x8c\xa3\xa0\x49\x15\x36\x6e\xde\x0d\x7a\x02\xd4\x9a\x65\x25\x49\xb1\xfa\x2e\x94\xa1\x75\xe3\xc8\x23\x41\x77\xf7\x74\x06\x6e\xc5\x60\x40\x53\x4d\x56\x7b\x88\x8d\x45\x20\xcb\xc9\x52\x19\x73\x1c\xef\x15\x84\x9a\x78\x98\x92\xaf\x93\xc9\x13\x98\xda\xbb\xec\x6a\xf2\x8a\xcd\xa6\xeb\xc6\x3b\xa1\x7d\x43\xb9\x2d\x20\x94\x4e\x0d\xda\xb7\xfb\xf7\xac\x53\xde\x36\x82\x84\x22\x04\xbd\x75\xbd\xe0\xd6\xdc\xb1\x14\x86\x81\x3b\x9c\x43\xde\x6c\xb7\x46\xc5\xbd\x3e\xf8\x5d\x3a\x8b\xe9\x53\x63\xb8\x25\x24\xeb\x1b\xa6\xf6\x41\x1c\xcc\x6a\xff\x7a\x85\x5a\xec\x5a\x35\x4c\xe5\xe1\x79\xdc\x3f\x58\xd7\xec\x6a\x36\xe2\x68\x1a\x03\x42\x60\xb4\xbe\x32\x41\x34\xa2\x07\x4d\x5b\x63\x49\xc3\xe6\x30\xee\x69\xf7\xd9\x12\x9f\xc3\x24\xb6\x66\xef\x02\x9d\x37\x19\x3d\xce\xfc\x7f\x5e\xf5\x8f\xbc\xea\xdf\xb0\xa9\x9f\xec\x50\xbf\xb2\x39\xfd\x54\x5f\xfa\x65\x2d\xe9\xef\x00\x00\x00\xff\xff\x1f\xe7\x38\x99\x38\x0e\x00\x00")

func typeEndpointGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeEndpointGraphql,
		"type/endpoint.graphql",
	)
}

func typeEndpointGraphql() (*asset, error) {
	bytes, err := typeEndpointGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/endpoint.graphql", size: 3640, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0xfd, 0xd6, 0x99, 0xbd, 0xf, 0x2c, 0xa5, 0x51, 0xdb, 0x40, 0x56, 0xf9, 0x8, 0x15, 0x4a, 0xf9, 0x5, 0xaa, 0x7b, 0xc9, 0xc5, 0xbd, 0xec, 0xff, 0xaf, 0x83, 0x3c, 0x21, 0x23, 0xe3, 0x2f}}
	return a, nil
}

var _typeFamily_member_history_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x54\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\xd0\xe8\xbf\xf0\x31\x19\xd6\x16\xd8\x07\xd0\xf5\x56\xe4\xa0\x4a\x74\x4c\xc0\x12\x05\x4a\x1e\xe0\x15\xfd\xef\x83\x25\x27\xb1\xd2\xb8\x2d\xb2\xcb\x4e\x81\x1e\x1f\xa9\xc7\xa7\x17\x57\xe4\xfc\x10\xe1\xab\xb2\xd4\x8f\xdf\xd1\x3e\xa3\xdc\x51\x88\x2c\xe3\x56\x50\x45\x84\x97\x0a\x00\xe0\x66\x66\x80\x4d\x14\xe8\x32\x27\xd5\x32\xf4\x43\x59\x6c\xe0\x57\x14\x72\xfb\x3a\xe1\x7b\x74\x06\xa5\x81\xdb\xf4\x9b\x20\xa3\x22\xfe\x6c\x37\x24\xb1\x6b\xe0\x91\x2c\x66\x14\x35\xaa\x80\xa6\x81\x0d\x73\x8f\xca\x25\x54\xb0\x57\x91\xd8\x85\x8e\xfc\x61\xf0\x9b\xc2\x96\x0d\x36\xb0\x65\xa3\x9e\x7b\xdc\xb2\xd3\xe8\xe3\x7d\xda\x28\x51\x35\x3b\x43\x13\xb7\x54\x76\x84\x3f\x68\xe7\x21\x6a\x3e\xad\xb5\xc4\x56\x3b\x13\xc9\x71\x3c\x75\xbd\x56\x55\x1c\x3d\x5e\xf2\xf8\xe8\x6e\xbb\x74\x37\x61\x64\x4a\xcd\xff\x9b\xcb\x57\xfb\x7b\x8d\xb3\x93\x87\xeb\x49\x7d\x40\xcd\x62\xce\xf3\x2a\x6c\xa1\x43\xd5\xc7\x0e\x24\x11\xf2\xcb\xbc\x31\x50\xb3\x0b\x83\x45\xb9\xff\x52\xe2\x06\x83\x16\xf2\xcb\xed\xb2\x4c\xad\x07\x91\xc9\xc7\xc9\xda\xcc\x0d\x3c\x88\x3e\xcd\x85\x39\x3e\xb2\x57\x8e\xfe\xa8\xe5\x88\xb9\x94\x1b\xb2\xf0\x74\x71\x71\x3e\x05\x49\xb0\x45\x41\xa7\x31\x34\xf0\xf4\x70\x38\xdc\xa5\xb5\x66\xf6\xc4\xad\x77\x89\xdd\xb3\x9e\x2f\xbb\x45\xfe\x36\x1f\xf2\xb0\x4f\xfe\x8b\x67\x47\x1b\x78\x5a\xfd\x22\xd4\xbb\xea\xbd\x48\x67\x55\x40\xd6\xf7\x68\xd1\xc5\x00\x4b\xb5\xf0\x72\x50\x52\x3c\x0d\x04\x8f\x9a\x5a\xd2\x17\xa3\xbf\xf6\x42\x5e\xf0\x37\xf1\x10\xf2\xe8\xb3\xf4\x4e\xd0\xe3\xe8\xb1\x29\xee\x9f\x90\xdc\x1c\x45\xb9\xa0\xf4\xe4\xd0\x05\x5a\x59\xac\x57\xa2\xf3\x4f\x11\x99\x93\xa0\x93\xa9\x05\xf5\x52\x6e\x3e\x91\x9a\xe5\xb8\xcd\x78\x66\xc7\x47\x31\x7a\x2f\x41\xd5\x51\xec\x0d\x28\x11\x35\x02\xb7\x57\x46\xa8\xde\x55\xaf\x7f\x03\x00\x00\xff\xff\xfa\x12\x03\xe0\x73\x06\x00\x00")

func typeFamily_member_history_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeFamily_member_history_recordGraphql,
		"type/family_member_history_record.graphql",
	)
}

func typeFamily_member_history_recordGraphql() (*asset, error) {
	bytes, err := typeFamily_member_history_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/family_member_history_record.graphql", size: 1651, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x78, 0x75, 0x39, 0xf2, 0x24, 0x32, 0x79, 0x32, 0x9a, 0x47, 0xe2, 0x8, 0xc4, 0x46, 0x53, 0xf3, 0x49, 0x74, 0x82, 0x5e, 0xdf, 0x3e, 0x70, 0xff, 0x77, 0xc7, 0x5f, 0x57, 0x19, 0x6c, 0xb4, 0x6c}}
	return a, nil
}

var _typeGeolocationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x2a\xa9\x2c\x48\x55\x70\x4f\xcd\xf7\xc9\x4f\x4e\x2c\xc9\xcc\xcf\x53\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\x08\x2e\x29\xca\xcc\x4b\x57\x04\xf3\xf3\x12\x73\x53\x61\x22\x60\x81\x9c\xc4\x92\xcc\x92\xd2\x94\x54\x2b\x05\xb7\x9c\xfc\xc4\x12\x88\xaa\x9c\xfc\xbc\x74\x4c\xd1\xd4\x9c\xd4\x32\xb0\xd9\x50\x51\x05\xae\x5a\x2e\xae\xcc\xbc\x82\xd2\x12\x64\x8b\x3d\xc1\x02\xd5\xb4\xb0\x0d\x10\x00\x00\xff\xff\xe1\x4c\xd6\x51\xe5\x00\x00\x00")

func typeGeolocationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeGeolocationGraphql,
		"type/geolocation.graphql",
	)
}

func typeGeolocationGraphql() (*asset, error) {
	bytes, err := typeGeolocationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/geolocation.graphql", size: 229, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x79, 0xd8, 0x4a, 0xfb, 0x77, 0xe4, 0x17, 0x5a, 0xd2, 0xfd, 0xa5, 0xd5, 0xe8, 0xc3, 0x6f, 0x26, 0x34, 0x20, 0x96, 0xcd, 0xa1, 0x3a, 0xc6, 0x7d, 0x2b, 0x58, 0x8, 0x20, 0x67, 0x7b, 0xd8, 0x4d}}
	return a, nil
}

var _typeGoal_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\xc1\x8a\xdb\x30\x10\xbd\xe7\x2b\x26\xec\xb9\x3f\xe0\x9b\xd7\xc9\x26\x86\xb0\x09\x8e\xbb\xb0\x94\x52\x54\x79\xea\x15\xd8\x1a\x33\x92\x96\xba\xa5\xff\x5e\x2c\x29\x89\xdd\xa6\x8d\xa1\x3d\xec\x4d\xf3\xe6\x69\x66\xf4\x34\x0f\xb5\x6b\x61\x43\xa2\xc9\x84\xc5\x9a\xb8\x87\xef\x0b\x00\x80\x55\xbe\x2e\xd3\xe2\xf9\xd3\x66\x9f\xee\x3c\x70\x4c\x1f\xd6\xe5\x28\xbe\x5f\x6f\xd3\xa7\x7c\x5f\xa4\xbb\x0b\xf6\xf8\xbe\x38\xe6\x8f\x9b\x0b\x70\xd8\x3e\x1f\xf3\x7d\xb9\x5d\x17\xe9\x61\x74\xd7\x23\x21\xfc\xb1\x58\xdc\xf9\xfe\xf0\x0e\x84\xee\xe1\x05\x45\x63\x5f\x40\xb5\x1d\xd3\x2b\xb6\xa8\x2d\xd4\x24\x9a\x85\xd2\x9d\xb3\x9e\x58\xa0\x24\xae\x32\x46\x61\x31\x0e\x7b\x07\x0f\x4c\xed\xe9\x2e\x7b\x82\x4f\x68\xd1\x62\x02\x47\xcb\x4a\xd7\x4b\x8f\x48\xd2\xc6\xb5\xc8\xf9\x6a\x8a\x57\x68\x24\xab\xce\x2a\xd2\xa7\x84\xc7\x49\x4a\xc7\x8c\x55\x02\xa5\x6a\x31\x70\x0d\x39\x96\x97\xba\x00\x81\xc9\xb5\xd0\xea\x9b\x18\x97\x88\xa9\x70\x21\x0c\xee\x1b\x4f\xe2\x7c\x78\x9a\xe7\x31\x7e\x41\x46\x2d\xd1\x24\xf0\xa1\x38\x05\x5b\xff\xac\xc8\x1e\xb8\xcb\x8f\x9e\xdd\x90\x8c\xcd\x36\x48\xbb\x18\x78\x02\x2c\xa2\x2c\x83\x74\x63\x3d\x64\xfc\xe4\x64\xf2\xe5\xcb\x49\x2e\xa3\x0a\x13\xc8\xa8\x12\x9f\x1b\xcc\x48\x4b\xec\x6c\xac\x3a\xd0\x3a\x56\xc4\xca\xf6\x09\x1c\xe2\x29\x3c\xd1\x0a\xb6\x63\x91\x2a\x87\x2b\x61\x31\x40\x67\xc4\x71\x1c\x39\xd7\xe1\xc9\x2d\x0a\xe3\xf8\x97\x4f\x8a\xe0\x8d\x49\xac\xe0\x1a\x6d\x02\x4f\xa2\x71\x18\x84\xf1\x38\x7e\xed\x18\x8d\xc1\xea\xbe\x4f\xe0\xac\x62\x2a\x2d\xf1\x45\x6a\x72\x56\x52\x3b\x4f\x68\x4d\xf6\x3c\xe0\xec\x85\xb5\x7d\x87\xa3\x7d\x1d\x08\x8d\x4f\x1b\x18\xf7\xb9\xb5\xc1\xaa\x9a\xb7\xbf\x1d\xe3\xab\x22\x67\x42\xd5\xc9\x0a\x87\x6a\x65\xdf\x61\x32\x69\x3d\x20\xe1\xb2\x65\xa1\x8d\x90\xc3\xcf\x5c\xa1\x4d\x93\xcb\x3f\x18\xeb\x9f\x0c\x14\x7d\x22\xbd\xa9\x27\xd4\x6b\xae\x9a\xe1\xa9\x71\xb9\x61\x0d\x26\x72\xdc\x32\xd9\xdf\xfc\xf5\xbf\x9d\xf5\x16\x3c\xf5\xbb\x9b\x6e\x1a\x69\x96\x87\xae\xda\xe7\x67\x00\x00\x00\xff\xff\x40\x14\x29\xef\x71\x06\x00\x00")

func typeGoal_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeGoal_recordGraphql,
		"type/goal_record.graphql",
	)
}

func typeGoal_recordGraphql() (*asset, error) {
	bytes, err := typeGoal_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/goal_record.graphql", size: 1649, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x24, 0x1b, 0xb8, 0xa9, 0xdd, 0x2, 0xcb, 0x28, 0xc3, 0xeb, 0xda, 0x14, 0xe7, 0x4f, 0x1c, 0x82, 0x7a, 0x9e, 0x2, 0x9e, 0xc9, 0x7f, 0x2d, 0x6e, 0x9a, 0xbb, 0xaa, 0xd4, 0x62, 0xe4, 0x70, 0x33}}
	return a, nil
}

var _typeHealth_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x53\xd1\xae\xe3\x26\x10\x7d\xf7\x57\xcc\xd5\xfe\x45\xde\x08\x66\x13\x24\x62\x47\x40\x52\x6d\x57\x95\xc5\xda\x24\x41\x72\xc0\x05\x5c\x35\x5d\xf5\xdf\x2b\x6c\x72\x13\xdf\x7b\x77\x55\xed\x1b\xcc\x9c\x73\x66\x86\x33\x14\xda\x8e\x57\xd8\x6a\xd5\xc7\x0b\xd7\xad\xf3\x9d\xbc\x0d\x1a\xbe\x17\x00\xa8\x2c\x29\x96\xb4\xae\xd2\x19\x4b\x7a\xa4\xf2\x4b\x01\xb0\x23\x88\x15\x00\x82\x11\xb2\x9f\x50\x47\xc2\x05\x69\xc8\x91\x54\x72\x4a\x97\x14\xa3\x4c\xc3\x75\x55\xd2\x7c\x26\x15\xae\x0f\x95\x24\xbc\x00\x60\x68\xcd\x89\x38\xb0\x44\xa0\x3b\xb4\xa1\xd5\xe6\xf5\xbe\x25\x88\xcb\x86\x23\x49\x0a\x80\x35\xab\xeb\xb2\xd9\xb0\x03\xae\xc5\xe3\xbe\xe7\x44\x88\x03\x4f\x81\xdf\x08\xdd\x6c\x67\x5a\x3e\xd0\xdd\xee\x50\xd1\xdf\xef\x2d\x20\xc6\x08\xdf\xa4\xc6\xc5\x9e\x60\xba\x23\x29\x58\x52\xb4\xa9\x6a\x21\x29\x6e\x38\xd9\xd7\x3c\xf1\x3e\xa3\x1d\x65\x5f\x9a\x2d\x15\xb2\xe6\x13\xbe\xc6\x14\xb1\x7b\xa0\xa9\xd7\x82\xf0\xe3\x24\xdb\x70\x82\x6b\x5e\x16\x00\x7b\xc2\x45\x5d\x21\xd6\xe0\x2d\xe2\x08\x4b\xc2\x69\x52\x15\xcf\xe8\xf4\x0e\x8c\x56\x14\x23\xd6\x20\x21\x88\xd8\x91\x4a\xbe\x01\xe4\x47\x68\xe6\x57\x78\x93\x64\x68\xfd\x71\xe2\x48\x25\x62\x6f\x62\x68\xbf\xaf\x69\x25\x77\xb3\x1b\x4f\x39\x28\xfe\x2d\x3e\x70\xdb\x2b\x1b\x54\x1b\x8d\xb3\xaf\xc6\x03\x7c\x82\xcf\xde\x5d\x81\xfc\x1d\xb5\xb7\xaa\x07\x71\x0b\x51\x5f\x21\x5e\xbc\x1b\xcf\x17\x30\xf6\xac\x43\xa2\x4c\x60\x5a\x09\xc2\x25\x40\x66\x62\xaf\x55\xd4\x1d\x9c\x92\x82\x1b\x3d\xa8\x61\xe8\x4d\xab\x5e\xf1\x98\x13\x24\x49\xc6\x1f\xf6\xe5\xec\x34\x40\x49\x18\x91\x24\x75\x69\xec\x30\x46\xe0\xfa\xa4\xbd\xb6\xad\x7e\xee\x97\x4e\xa9\xb9\xcb\x78\x1b\xf4\xea\xdd\xee\xbe\x4c\x39\x7f\x27\x77\xb4\x5c\x81\x88\xde\xd8\xf3\x4b\xd2\x4e\xa4\x8f\xa5\xb3\xaa\xe9\x1e\xf8\x5f\xae\xf2\x09\xe4\xc5\x04\x30\x01\xe2\x45\xc3\x37\x15\x34\x18\x1b\xb5\x3f\xa9\x56\xc3\xc9\x79\x50\x7d\x0f\x97\x49\x13\xfc\x24\x1a\x60\xd0\x3e\x2a\x63\x8d\x3d\x43\x74\xa0\xa0\x75\x36\x8c\x57\xed\x8b\x07\xf3\x7f\xb4\x7b\x67\x3d\x37\x94\xe2\x83\xd7\x7f\x19\x37\x86\x99\x7c\xcf\xe5\x29\xee\x53\xfd\x68\xce\xb8\xdc\x92\xd5\xcf\x56\x68\x66\x58\x75\xd5\xcb\x06\x3a\x1d\x5a\x6f\x86\x04\x5b\x54\x77\x6d\x3b\x7a\xaf\xbb\x15\x48\x73\xcd\xec\xe0\x46\xdf\x3e\xf8\x29\x34\x0f\x37\xef\xd6\x33\x34\x87\xd6\xb7\xa5\xa8\x3f\x2b\x6b\xfe\x51\xef\xaa\xcd\xca\x79\x97\xd2\x13\x2d\xee\x4b\x53\xc3\x0a\xbe\x7e\xb8\x29\x2f\x7f\x4c\xc0\xde\xb5\xb9\xc0\x46\x3b\x96\x2f\xf0\xde\xfe\xde\x84\x08\xee\xf4\xd6\x6f\xaf\xe3\xe8\xad\xee\xe0\xdb\x6d\x82\xfd\x39\x6a\x7f\x9b\xf7\xf3\xb9\x58\xc8\x46\xb7\x6e\xb4\x71\x05\xd4\xc6\x79\xf0\x9c\x5d\xc1\xd7\x65\x6b\x79\xff\x4a\xa3\xce\xd6\x05\x13\x60\x96\x7c\xdc\xbf\xff\xc0\xa0\xd6\x75\x7a\x05\xb8\x37\xd6\xb4\xaa\xc7\xae\xd3\x8f\xbf\xf8\xca\x7e\xfe\x7f\x4b\x89\xa9\x2a\xd7\x2a\x38\x7b\xff\x64\xe9\xfc\x4b\xe5\x66\xea\x4f\x6a\xfd\x17\x00\x00\xff\xff\xed\x87\x64\xd1\xb7\x06\x00\x00")

func typeHealth_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeHealth_recordGraphql,
		"type/health_record.graphql",
	)
}

func typeHealth_recordGraphql() (*asset, error) {
	bytes, err := typeHealth_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/health_record.graphql", size: 1719, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x17, 0xcb, 0x8f, 0xb, 0x16, 0xca, 0x28, 0x9f, 0x21, 0xc, 0xeb, 0xb0, 0xa0, 0xf7, 0x4, 0x15, 0xfb, 0x47, 0x7e, 0x62, 0xca, 0xd6, 0xcb, 0x49, 0xa, 0xcc, 0x26, 0x19, 0x55, 0x5d, 0xdd, 0x9c}}
	return a, nil
}

var _typeHealthcareserviceGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5d\x6f\xe3\x36\xd6\xbe\x7e\xf3\x2b\xce\x60\x80\x41\x0b\x14\x6f\xee\x7d\xa7\x91\x38\xb6\x5a\x59\x16\x24\x65\x06\x41\x50\x18\x8c\x74\x2c\x11\xa5\x49\x95\xa4\xd2\x6a\x17\xfd\xef\x0b\x52\x1f\x11\x63\x67\xda\x05\x76\x37\xdd\x45\xef\x2c\xf1\x7c\x9f\xe7\x1c\x3e\xf2\xcd\x0d\x8a\xfe\x0c\x3b\xa4\xdc\xb4\x15\x55\x58\xa0\x7a\x62\x15\x86\xd4\x60\x23\xd5\x00\x7f\xbf\x01\x80\xf7\x41\x83\x35\x84\x54\xe1\xff\xd9\xc7\x82\xe4\x9f\xe3\x90\x1c\x83\x2d\x89\x8e\x61\x90\x13\xb8\x71\x52\x10\x70\xce\xb0\x9e\xac\x79\x92\x49\x12\x93\xe8\xb8\x23\x41\x52\xee\x66\xe1\x5a\x76\x86\x49\x01\x9e\x60\x74\xc8\xca\xf8\x90\x3e\x5b\x34\xa8\x04\x35\xec\x09\x6f\x43\x79\xee\x38\x9e\x51\x18\xaa\x06\xdf\x3a\xc9\xd3\xa0\x24\xc7\x72\x47\xf2\x20\x8b\x49\x31\x69\x87\x2d\xe3\x63\xdc\x70\xfb\x03\x13\x35\xaa\x86\x2a\x83\x62\xad\x1c\xee\xe2\x24\xb2\x49\x1c\x7f\x88\xd3\x88\xe4\xdb\x20\x2f\x49\xea\x19\x88\xf0\x09\xb9\xec\xac\xe7\x0b\xcd\x63\x44\x3e\x93\xe4\x90\xed\x49\x5a\x82\xa7\x95\x29\x69\xb0\x72\x19\x7e\x80\x4f\xf4\xcc\xf8\x00\x53\x75\xf5\x85\x99\x2c\x3f\x94\x24\xb4\x99\x1f\x83\x34\x3a\x7e\x0a\xf6\x71\x72\x7f\x9c\x44\x96\x74\xe4\xf9\xdc\x0b\x66\x86\xa9\xc2\x2e\x33\xcf\xd4\x61\xbf\xbf\x4b\xe3\xf2\x7e\xaa\xb4\xd7\x9c\x50\xf6\x42\x23\xe7\x4c\x34\xbe\xce\x5d\x5a\x90\x24\x89\xd3\xed\x22\xa9\x98\x66\x1a\x12\x26\xd0\x6b\x4e\x98\xc7\x45\x5c\x1c\x93\x38\x25\x93\x64\x84\xd4\xb4\x57\xb3\x8a\x48\x50\xee\xe6\x04\x60\x11\x17\x86\x72\x5f\x2c\x2d\x83\x64\x39\x67\x9a\x3e\x32\x6e\x33\x2c\xfa\xae\x93\xca\xab\x77\x14\x17\xc1\xc7\x38\xb1\xe9\x15\x77\x59\x76\xc8\x97\x82\x47\xaa\x6f\x6e\x03\x5e\xc9\x56\x72\x2f\xe2\x28\xbf\xdb\x1e\x83\x24\x3c\xec\x0e\x8b\x13\x52\xf7\x15\x9d\xda\x92\x20\x55\x82\x89\xc6\x53\x22\xd1\x5d\x18\x2c\xad\x48\x48\x90\xa7\xab\xe2\x90\x33\xaa\x06\x45\x35\x40\x84\x1d\x55\xe6\x25\x2a\xc8\x9e\xe4\x5b\x92\x86\xf7\xc7\x88\x64\x41\x5e\xae\x81\x41\xce\x1d\x97\x83\xd5\xf0\x1d\xee\xb3\xe4\x70\xbf\x16\xfc\xc4\x04\x15\x15\xa3\x1c\x3e\xc0\x9e\x1a\x54\xf6\x67\xc0\xea\xb5\xd6\xa7\x38\x0d\xd2\x30\x0e\x12\x17\xe6\x3e\x28\x49\xee\x1e\xe2\x68\x32\xb2\x45\x81\x8a\x72\xc8\x14\xad\x0c\xab\x3c\xa4\x6c\x49\x4a\xf2\x20\x39\x66\x79\x10\x96\x71\x38\xf7\x73\x27\x75\xc7\x5e\xb4\x68\x77\x28\xb2\x78\xd5\xa4\x9d\xec\x35\x13\xcd\xed\x4e\x9e\x91\xa3\xd6\x02\xb5\xf6\xe5\xef\x8a\x38\xdd\x1e\x77\x87\x3d\x49\x48\x51\xa4\xa4\x28\x66\xdd\x58\x18\x54\x9d\x42\xf3\x02\x84\x71\x5a\x92\x3c\xcb\x49\xb9\x2a\xf4\xf7\xbd\xb6\x51\x7b\x95\xfa\xfe\xae\x28\x57\x78\x4a\xb0\xf1\x63\x4d\xc8\xf6\x39\xd0\xbd\x43\xdb\x95\x6d\xb4\x77\xa0\x9b\x66\x64\x96\x4e\xa3\x38\x58\x0b\xd9\xe7\xf9\x2c\x6b\x07\xcd\x2a\xdb\x82\xca\xb0\x27\x0b\xcf\x0f\x90\x63\xa5\xd0\xe1\x68\xad\x95\xed\xee\x8b\x38\xb4\x6d\x08\xcb\xf8\xb3\x85\xaa\x6d\x4e\x4e\xc2\x9c\x04\xeb\xbd\x96\x63\xd3\xf3\x0b\xed\x9c\x6c\xef\x12\x4f\xae\xe8\xd0\xc2\x80\x69\x03\x21\x67\xc2\x05\x91\x51\xd3\x4a\x2e\x1b\x6f\x07\x16\x19\xb1\x58\x88\x8b\xf2\x18\x26\x71\xea\x62\xc8\x82\x72\x77\x48\x0e\xdb\xfb\x2b\xd6\xf6\x58\x3b\x63\xaf\xd8\xd8\x93\xc8\x9a\xb8\xa2\x78\x78\xd4\x06\x8d\x62\x95\x86\x0f\xb0\x1d\x04\x56\x5f\x8b\xe5\xf0\xb1\x28\x49\x99\xc7\x61\x71\xdc\xde\xa7\x87\xf0\xb5\x70\x32\x8a\x35\xa3\xd6\xec\x2b\x86\xb2\x80\x44\x71\x60\x2d\x5d\xd1\xce\x69\xcd\x5c\x14\xb7\xf1\x99\x36\x2f\xb0\xb5\x32\x92\x07\x51\xec\x22\x38\xc6\xfb\x60\x1b\xa7\xdb\x4b\x53\x45\xaf\x9a\xaf\x15\xa6\xb8\xcb\xb7\x5e\x65\xc6\x3d\x05\x5b\x25\xfb\xee\x56\xfb\x6a\xe3\x96\x3a\x6e\xf3\xc3\x5d\xb6\xcc\x40\xa9\xa8\xd0\x4e\x67\x2d\x5b\xe6\x41\x5a\x8c\x3b\xed\xb7\x9b\x1b\x26\xba\xde\x5c\xb9\x95\x2d\xe2\x30\x76\x87\xee\x62\x86\xf7\xf0\xa5\x45\xd3\xa2\x02\xd3\x32\x7d\xa9\x01\x0a\x2b\xa9\x6a\x60\x1a\x98\x00\xbb\x07\x9e\x10\x7a\xed\x76\xc1\xf4\xb8\x81\x8f\x52\x72\xa4\xe2\xdd\x64\xf1\xa0\x1a\x2a\xd8\xdf\xc6\x1d\x69\x5a\x6a\xa0\x53\xf2\x89\xd5\xa8\x47\x27\x7a\x34\xed\xa4\xa7\x93\xfa\xe3\xb0\x81\x1c\x4f\xa8\x50\x54\x18\x54\x46\x2a\x17\xe5\x6c\xf2\xa3\x92\xb4\x86\x6a\x26\x15\xf2\x34\x1b\x81\x47\xb4\xeb\xb7\x43\x75\x92\xea\x8c\x35\x48\x05\x35\x72\xf6\x84\x0a\xdd\xb6\x5b\x94\x36\xf0\xf0\x2a\x4b\x79\xf7\xe3\xe4\xa7\x1c\x3a\x5c\x5b\x77\xd1\x9f\xe9\x00\x8f\xf8\x6c\xd6\xfa\x58\x1c\x3a\x45\x33\x74\xb8\x81\xc2\x28\x26\x9a\x77\xb0\xbc\x0a\x65\x8d\x1b\x08\x65\x4d\x1f\x39\x86\x52\x54\xd8\x99\xb1\xf8\x93\xbb\x09\x37\x86\xa1\x86\x96\x8a\x9a\x63\x0d\x8f\x03\x98\x16\x2f\x3b\xe1\x54\xf4\x04\x34\x33\xcc\xee\xe0\xc5\xfb\xdf\xf5\x99\xc8\xf1\xf6\xfa\x46\x7f\x0b\xbf\xb4\xa8\x70\x49\x76\xca\x73\x6e\x89\x93\xe7\x93\xf4\x06\x82\xba\x56\xa8\xf5\xd8\x96\xd9\x58\x84\xba\x52\x6c\xa4\x61\xab\xb2\x51\x0d\x9d\x42\x8d\xc2\x60\x0d\x46\x02\x85\x4a\x0a\xdd\x9f\x51\xc1\x2f\x2d\xe3\xd6\x25\x55\x55\xbb\x84\x2f\xe8\xf9\x65\xfd\x2c\xbf\xab\x99\x35\x4c\x39\xd4\x2b\x37\x54\xd4\xb7\x52\x01\x15\xc3\x98\xf5\x89\x55\xc0\xb4\xee\x51\x83\x90\x06\x2a\x39\xf6\x08\xb9\x46\x97\xde\x08\x02\x79\xb6\xb7\xa6\x5f\xb4\xf7\xf0\x89\x56\x96\x2d\x50\x83\x1a\x7e\xee\x59\xf5\x13\xb0\x1a\x85\xb1\x36\xe9\x9c\x93\x6d\x86\x87\xd8\x56\x1a\xb9\x81\x87\xc0\x18\x5a\xb5\xd6\xea\x58\x92\x05\x42\xc8\xb1\x92\xe7\x09\x05\xe3\xc3\x06\x1e\x42\x29\x0c\xad\x4c\x26\xd9\x4b\x85\x75\x43\xe6\x02\xba\x71\x33\x28\x6a\xac\xe1\x24\xd5\x2d\x7d\xa2\x8c\xdb\x8e\xda\x6a\x4e\x19\x3d\xa1\xa2\x0d\x06\x0a\xe9\x06\x1e\x66\x23\xbe\xe9\x50\x8a\xb1\x86\x1a\x7a\xcb\x5e\x6d\xf5\xab\x76\xed\x65\x31\x7c\x2b\x4f\xa7\x65\x66\x34\xda\xf3\xcc\x02\x41\xbb\xe6\x7b\x58\xf3\x0f\x5f\x05\xdc\x1a\xe3\xb6\x49\xc8\x59\xc3\x26\x76\xa6\xf0\xe7\x9e\x29\xc7\xc5\xf5\xfc\xe0\x90\xd2\x6b\x5c\x57\x7c\xf4\xb8\xd2\xf4\x43\x59\x1d\xfc\x0e\xee\x3d\xc9\xab\x58\xc8\x94\x6c\x14\x3d\xeb\x71\xe6\xd7\x8b\xca\xd5\xa9\xeb\x38\xab\xbc\x0e\x74\xa3\xc2\x06\x1e\x26\xe0\xfe\xb8\x7e\x6d\xe3\xd1\xae\xef\x17\x11\xad\xda\xc3\xf9\xc4\xf0\xe5\x09\xaa\x96\x5a\xa2\x85\x8a\x59\xde\xa2\xe1\x1b\x6a\x8c\x62\x8f\xbd\x41\xfd\xed\xd8\x72\x4f\x60\xe5\x17\xae\x1c\xff\x11\xff\x65\x8b\xc0\xa9\x68\x7a\xda\xe0\xf5\xb4\x27\x50\x00\x13\xcb\x18\xf5\x82\xcd\x2b\xc1\x4f\xdc\x3b\xfc\xaa\xfb\xb9\xe4\x5f\xe8\xb0\x94\xfb\xb9\xe5\xb4\xb2\xa2\x16\x16\x27\x54\x8a\x72\x47\x0e\x97\xa7\x3d\x9a\x56\xd6\x2f\x7d\xfb\xa7\x7f\xc8\x79\x7c\x02\x2a\x6c\x5f\xed\x44\x3a\x4a\xcd\x56\x50\x3c\xd9\x15\x53\x55\xa8\xb5\xed\xf7\xc5\xb5\xb5\x52\xcb\x27\x95\xe5\x1a\x9c\x1d\x94\xec\xec\x6e\x3c\x9c\xbf\x6f\xa0\x60\xc6\x1f\xba\xd1\x16\xe7\x11\x1d\x16\xf5\xf1\xdd\x2c\x11\xd1\x41\x1f\x4e\x5f\x10\x7f\xda\xc0\xf3\x6f\xf0\x85\x0a\x43\x95\xb1\xee\x36\xce\xe9\x8b\x53\x22\xea\x97\x67\xef\x21\x95\xe6\x59\x02\xea\xde\x4d\x82\x4b\xd3\x58\xa9\xba\x77\x38\x9f\xaf\x02\x50\x48\xf5\xf4\xa5\x6d\xb7\x6c\xb0\x84\xf7\xbc\x98\xfd\x79\xf2\x84\x9c\xf5\x0d\x64\xa8\x98\xac\xc7\xa1\x04\x2f\x48\x37\x97\xe4\x57\xdb\xa5\x0b\x4b\x76\xa3\x56\xed\xc8\x5c\x51\xd4\xae\xee\x7a\x8a\xcc\x0a\x3d\x77\xc9\xee\x5a\xa3\xa4\x60\xd5\xdc\x2b\x0d\xb2\x43\x45\xcd\xd4\x50\xdb\x8b\x76\xb9\x57\xbd\x86\x2e\x96\x37\xf0\x40\xa6\xdf\xf3\xb0\xfc\x76\x73\x33\xce\xca\x35\x76\xa4\x65\xaf\xc6\x59\xe9\xf5\xb8\xc2\xc6\xcb\xea\x11\x81\x82\xfd\xce\xe1\xd7\x7c\x5a\x0a\x71\x85\xcd\x4c\xd3\x60\x05\x97\xd2\x3f\x0e\x16\xa7\x72\xcd\xa9\xac\xc8\x72\x33\xff\xff\xcd\xf8\x61\x2f\x05\xe0\xaf\xf4\xdc\x71\x9b\xf5\xe9\x32\x56\xbd\x04\xab\xad\x83\x8d\xff\x67\xcb\x77\xcf\x9f\x07\x29\xf6\x4a\x76\x7a\xa8\xdc\x47\x02\xd3\xe6\x3b\xc8\xa4\x23\xd7\xcb\xff\x0f\x37\x96\xdd\x5c\x29\xc7\xc8\x29\x59\xbd\xdc\xe5\x7f\x72\x8e\xf9\xbf\x47\x2f\xff\xc3\xcc\xf2\x5f\x44\x2a\xff\xe2\x93\x6b\x3e\xf9\xcf\x50\xc9\x7f\x0f\x8b\x7c\x73\x02\xf9\xf6\xdc\xf1\xcf\xc4\x1a\xdf\x90\x30\xbe\x1d\x57\x7c\x2b\x9a\xf8\x17\x43\x7c\x6b\x86\xf8\x5f\x41\x0e\x2d\x2f\xfc\x47\x00\x00\x00\xff\xff\xd8\x7a\x7c\x16\xfd\x1a\x00\x00")

func typeHealthcareserviceGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeHealthcareserviceGraphql,
		"type/healthcareservice.graphql",
	)
}

func typeHealthcareserviceGraphql() (*asset, error) {
	bytes, err := typeHealthcareserviceGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/healthcareservice.graphql", size: 6909, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0xdd, 0x38, 0xbf, 0xc, 0x81, 0x44, 0x95, 0xc4, 0x31, 0x73, 0x4d, 0x0, 0x28, 0x63, 0xb4, 0x6b, 0x80, 0xff, 0x75, 0x51, 0xed, 0x3a, 0x5e, 0xfb, 0xfd, 0xff, 0xb, 0x54, 0x19, 0x9, 0x47}}
	return a, nil
}

var _typeImagingresult_observation_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x4b\xc3\x40\x10\xbd\xe7\x57\x4c\xe9\xd5\xfe\x81\xdc\xb4\xa2\x06\x14\x21\xf6\x20\x88\x87\xed\x66\x4c\x17\xb2\x1f\xcc\x4e\x0a\x51\xfc\xef\xb2\xbb\x09\x4d\xb4\x9a\xa2\x1e\x77\xe6\xcd\x7b\x33\x2f\x2f\x59\xa6\x8c\x6b\x19\x0a\x2d\x6a\x65\xea\x12\x7d\xdb\xf0\xfd\xd6\x23\xed\x05\x2b\x6b\x4a\x94\x96\xaa\x35\xa1\x60\x84\xb7\x0c\x00\x60\x09\x57\x64\x35\xec\x50\x34\xbc\x03\x8a\x80\xd8\x30\x42\x63\x0e\x0f\x4c\xca\xd4\x8b\x58\x91\xd6\xf8\x56\x23\x15\x97\xd3\x7a\x85\x5e\x92\x72\x41\x60\x68\xc4\xba\x95\xb2\x25\xc2\x2a\x87\x8d\xd2\x98\xb0\xde\xb6\x24\x0f\xbc\x00\x09\x49\xb5\x30\xea\x55\x8c\x29\xfa\x56\x1a\x48\x8b\x47\xe1\xc9\xbb\x08\xe7\x46\x1c\xe1\x0b\x12\x1a\x89\x3e\x87\xa7\x72\x78\xdc\xc4\xb3\x7a\x74\xc0\x2e\x9e\x23\xba\xb1\xb2\x17\xbb\x46\x7b\xdb\x3f\x12\x59\xef\x8a\x3d\xb8\x36\x76\x45\xda\x0a\x73\x58\xdb\x4a\x6c\x1b\x5c\x5b\x23\xd1\x71\x9c\xeb\xd7\x95\x56\x6b\x34\x3c\xf1\x41\x19\x46\x72\x84\x2c\xbe\x5a\x74\x50\x09\x7b\x9f\x33\x0b\xb9\x0b\x04\xc3\xb2\xef\x59\xb6\x9c\xf9\x9c\xb0\x82\xc7\x55\x29\xba\x33\xb8\x2b\x8b\x8c\x3b\x87\x73\x03\x4a\xbb\x06\x83\x8a\x87\xb1\x41\x73\x89\x50\xd5\x69\x79\x70\x84\x7b\x65\x5b\x9f\x58\x27\xf7\x26\xb6\x4d\xe7\x30\x9f\x48\x87\x4a\x1a\x66\x12\xc6\x0b\x19\xb6\x3d\x02\x9b\x36\x17\xdf\x04\xf5\x4f\x81\x1c\x3e\x64\xfc\x49\x26\xd0\x63\x29\x3d\x21\xa3\x63\xba\x8b\xee\x93\x1d\x73\xa1\xfd\x29\xaf\xbf\x88\xea\xff\x86\x34\xe4\xf3\x23\x00\x00\xff\xff\x5a\x43\xc9\x2b\x73\x04\x00\x00")

func typeImagingresult_observation_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeImagingresult_observation_recordGraphql,
		"type/imagingresult_observation_record.graphql",
	)
}

func typeImagingresult_observation_recordGraphql() (*asset, error) {
	bytes, err := typeImagingresult_observation_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/imagingresult_observation_record.graphql", size: 1139, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1c, 0x96, 0xa2, 0x25, 0x86, 0x8d, 0xce, 0xe1, 0xc9, 0x35, 0x40, 0x42, 0xe0, 0xf3, 0xb1, 0x96, 0x41, 0xa8, 0x3e, 0x73, 0xb9, 0x77, 0x10, 0xe8, 0x74, 0x22, 0xab, 0xc5, 0x79, 0x44, 0x91, 0xd5}}
	return a, nil
}

var _typeImmunization_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\x41\x8e\xdb\x30\x0c\xbc\xfb\x15\x0c\xf2\x0b\xdf\xba\x5e\x74\x1b\xa0\xa7\xed\xde\x8a\x1e\x54\x89\x49\x04\x58\xa4\x40\x49\x41\xd3\xa2\x7f\x2f\x2c\xc9\x88\x9d\x38\x4d\x90\xf6\xb0\x47\xcd\x8c\x28\x71\xc8\x69\xd6\x60\xc9\xa7\x08\x91\x41\x0b\xaa\x88\x4d\x39\x6f\x9c\x4b\x64\x7f\xaa\x68\x99\x5e\x51\xb3\x98\x2e\xd3\xf0\xab\x01\x00\x58\xc3\x47\x61\x07\x7b\x54\x7d\xdc\x83\x64\x41\x26\x48\x39\x6c\xe1\x4b\x14\x4b\xbb\x55\x46\x34\x53\x48\x0e\x65\xf3\x3c\xc7\x0d\x06\x2d\xd6\x0f\x0f\x8c\x44\xc6\x59\xeb\x24\x82\xa6\x85\x37\xeb\xb0\x68\x03\x27\xd1\xa7\xba\x00\x45\x29\x3b\x35\xfe\x71\xe4\x2a\x55\x2e\x94\x8f\xe7\x87\x67\xe7\xcd\xd0\x62\xd6\x09\x6e\x51\x90\x34\x86\x16\xbe\xbe\x8e\x87\x4f\xb9\xad\xaa\x1e\xb4\xab\x6f\x59\xdd\xb3\xae\x8f\xbd\x20\x7f\xae\x87\x52\xac\xba\x62\x27\xb6\x4d\x6d\x39\x28\xad\x2d\x5d\x38\x63\xb0\x85\x8e\x8d\xfa\xde\x63\xc7\xa4\xd1\xc7\x5c\xad\xf4\x40\x1c\x5f\xec\x01\xa9\x85\x27\xe6\x1e\x15\x65\x54\x19\x67\xc9\x86\x88\x82\xe6\x59\x45\x2c\x36\x5d\x50\x4f\xc7\x99\xa9\xc2\x69\x90\x7e\xa8\x0a\x29\x73\x1d\xc0\x13\xdd\x5d\xfb\x4e\x75\x4a\xe9\x8b\x59\x8d\xe0\xd5\xab\x75\x1c\x4e\x51\xda\x2a\x1d\x93\xa0\xcc\x0a\xe0\x0f\x8f\x62\xf3\x6f\x26\xcd\xfc\x6e\x9a\xf5\xc2\x06\x42\x13\x8f\x1e\x97\x08\xeb\x7c\x8f\x0e\x29\x06\x98\xce\xee\xd6\xb2\x5a\x73\xdf\xaa\x7a\xc1\x83\xe5\x14\x4a\xd5\x33\x07\x06\xe8\xed\xe8\xb1\x9d\x3d\x3d\x20\xe5\x72\x14\x45\xa1\xd8\xb4\x20\x9b\x93\xab\x2b\x19\xfa\xa7\xac\xd4\x19\x94\x78\xcf\xa4\x4b\x01\xba\x23\x3e\xd3\x72\xe7\x7b\x76\x33\x4f\x7f\x8b\xd2\x7f\x4b\xd1\xbb\xc9\xcf\x63\xd1\x79\x2c\x34\x7f\x02\x00\x00\xff\xff\x4b\x78\xb5\x28\xcc\x05\x00\x00")

func typeImmunization_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeImmunization_recordGraphql,
		"type/immunization_record.graphql",
	)
}

func typeImmunization_recordGraphql() (*asset, error) {
	bytes, err := typeImmunization_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/immunization_record.graphql", size: 1484, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0xff, 0xae, 0x57, 0x6f, 0xfa, 0x76, 0x64, 0x71, 0x90, 0x3b, 0xbc, 0xea, 0x5, 0x3b, 0xac, 0xd0, 0x9d, 0xb7, 0x94, 0x4e, 0xa0, 0xe, 0xbc, 0x55, 0x21, 0xc, 0x8b, 0x80, 0x47, 0x70, 0xd5}}
	return a, nil
}

var _typeInternationalizationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x5a\x4f\x6f\x23\x3b\x72\x3f\xef\x7c\x0a\x3e\xec\xc5\x03\xcc\x43\xb0\x49\x90\x20\x7b\x93\x25\x59\xf2\xe8\x8f\x35\x6a\xd9\x1e\x3b\x08\x82\xea\x6e\xba\xbb\x2c\x36\xa9\xc7\x26\xa5\x27\x05\x7b\xc8\x67\x09\x82\x64\x0f\xfb\x0d\x72\x9b\x7c\xb0\x80\x6c\x36\xd9\xa5\x75\xb0\xd8\xcb\xd8\xee\x5f\x55\xb1\xaa\x58\x7f\xf9\xde\xa7\xdf\xb2\xfb\xec\x81\xfd\xfd\xdf\xfe\xee\x1f\x3f\x71\x69\x1b\x36\xb6\x5a\x73\x59\x9c\xd9\xbf\x7d\x62\x8c\xfd\x96\x3d\x4a\x34\xbc\x64\x23\x0d\x39\x9b\x36\xa8\xc1\xf0\x96\x4d\x50\xd7\xd0\x38\x82\xd1\x74\xf2\x9b\x4f\x1d\xe5\xe8\xad\xaa\x41\x62\x6b\x40\xf6\xbf\x7b\x8a\xbb\x75\xa4\x10\x39\x48\x04\xb6\xe4\x7b\x8f\x2c\x97\x11\xd1\x0d\x77\xc8\x44\x07\xb1\xab\x28\x76\xcd\x4d\xcd\xb5\x00\x59\xb6\x6c\x24\x0d\x0a\xc1\x5b\x36\xb3\x28\x4a\xae\x3d\xe9\x7a\x16\xa5\xc8\x4a\x09\x60\x8b\x13\xc8\x0b\x78\xec\x61\x94\x4e\xa8\xb8\x34\x28\x81\x6d\x78\xab\x3c\xb8\xcd\x22\x68\x5b\xa3\x41\x38\x05\x94\x10\xd0\xc9\x7d\x4c\x96\x69\x9b\x03\x39\xf3\x39\x9d\x79\xe1\x3a\x07\x7c\x07\xc9\x56\x20\xc1\x78\xf8\x35\x9a\x7c\xab\x5a\x67\x17\xc8\x92\xcd\xb9\xbe\xf0\x4a\x1d\x9d\x0e\x63\x25\x8f\x5c\x1b\xcc\x05\x67\x2b\xd0\x7b\xaf\xed\xed\x68\x15\xd9\x40\xe7\x50\xaa\x76\xa0\xcf\xed\xed\x24\xa1\xb2\x12\x50\xf2\xb6\x66\x3b\x08\xbc\x93\x5d\x44\xad\xa8\x40\x7b\x37\x1f\x3d\x34\x4b\xda\x40\xad\x01\x25\x9b\xa0\x0c\x42\xe7\x93\xc8\xa5\xad\x2c\x91\xdd\x69\x90\xc5\x6f\x3c\x76\x7f\x17\xf9\xb8\x6e\x6c\x39\xf4\xce\x6d\xba\xa0\x5b\x6d\x25\x47\x36\x01\x6d\xdb\x16\x04\x34\x43\xb2\x75\x22\x53\x02\x8f\x08\xee\xe7\x8f\x3f\x1d\x11\xa4\xbf\x84\xdb\x87\xdb\x24\x07\x2e\x28\xd8\x96\x83\xf0\xc8\x76\x39\x50\x1b\x1a\x20\xce\xc8\x92\xdc\xda\xba\x88\x5b\x57\x56\x18\x6d\x7d\xf4\xdc\xee\x06\xfe\x37\xed\x09\xdc\xad\x5b\xd1\x39\xea\x79\x93\xac\x12\x4e\x67\xb6\xb5\xb9\xe0\x1e\x7b\x59\x27\x08\x2f\x3c\x1c\xd8\x79\xe3\x35\x9e\x38\x06\x09\xc4\x19\xe3\x51\xc2\x94\xac\xd4\xdf\x2c\x50\xb6\x35\xb4\xd0\x79\xd3\x93\x4c\xa2\x33\xb3\x13\x9a\x4b\x17\xd1\x03\x7c\x1e\xf1\x71\x8d\x82\xc7\x28\x1d\x2f\x37\x03\x40\x02\x7b\xb1\x20\xd9\x96\xcb\x06\x65\xee\x13\x6c\xbc\x7e\x89\x87\x0b\xd5\xe4\xd8\x85\xb8\xd7\x7a\xfc\x90\xb8\x55\x6b\x80\x6d\xb1\x00\x4f\x27\x3d\xbc\x1d\x47\xd8\x85\xf8\x30\x2c\xa3\x02\x8f\x94\x26\x7d\x4f\xa2\xe1\xc0\xd9\x13\xd7\x25\x67\xd3\xb6\xb0\x65\x87\x3f\x4d\x23\x7e\xe1\x45\xcd\xb6\xfc\x60\x73\x81\x05\x5b\x28\x6d\xa5\xbf\x8c\xf1\xeb\xa2\xa7\x99\xbc\x63\xae\xac\xc1\xe4\x92\xc9\xd7\xe8\x92\x09\x97\x0d\xe8\x3d\x5b\x68\x25\xfd\x4d\x4d\x16\x89\x51\x35\x28\xb1\xf0\x4e\x09\x07\xf4\x2a\x4e\x92\xf5\x23\x51\x71\x97\x13\x31\xf2\x27\xe9\x3e\xa7\xd5\xf9\x60\xd8\x46\x59\x59\xba\x0f\xd3\x59\xe4\x9a\x6a\x34\x9a\x03\x5b\xc3\xfe\xcd\x2b\x3c\xdd\xc6\xc8\x9a\x9a\x1a\xd5\xc1\x05\x34\x6a\x2f\x71\xba\x8b\xa1\x3c\xb5\x5a\xb1\x15\x6f\x72\xae\xd9\x58\x59\x69\x34\xf2\xd6\xd3\x3c\x6e\x03\xc9\x1d\xbe\xe3\x30\xbe\xee\xbe\x46\x7d\xee\x40\xec\x7d\x74\xdc\xb7\x5d\xd9\xbb\x59\x81\x70\x65\xa3\xfd\x9c\xb4\xbc\x5b\x44\x2d\x43\x89\x5e\xa0\xac\x4a\xd5\x24\x92\xd9\x6d\x24\x99\x71\xa5\x2b\x57\x12\x40\xfb\x98\x99\x4d\x63\x72\xcd\x2c\xd7\xb2\xe5\xe7\x01\x5f\x72\xc0\xac\x76\xb9\x33\xe6\x65\xc7\x35\x8f\x15\x73\x86\xb9\x06\x61\x40\x0f\xd8\xee\x13\x1b\xf8\x30\x9c\x80\x80\xb6\xe3\x4c\xe5\x62\x66\x51\xf2\x41\x66\xcc\xd6\x77\x09\x02\xc3\x1b\x10\xc0\xbe\x59\x6e\x2e\x5d\x1d\x98\xed\xbe\x25\xfc\xec\xd4\x49\x89\x37\x7b\x89\x62\xe7\x4a\x56\x6c\xe1\xfe\x49\xf0\x7c\x31\x84\x4b\xab\xa1\x65\x4b\xde\x1c\x50\xfb\xcb\x9c\xaf\xa3\x13\xc6\x5a\x81\x41\x60\x8b\x10\x98\xf3\x6d\x8c\xaf\x39\xa0\x41\x36\x53\x56\x97\x3e\xf4\xe6\xbb\x58\xfb\xe7\x56\x56\xa0\xcf\xec\x4e\x69\x94\xbe\xf2\xcf\x1f\xa3\x31\xf7\xb2\x54\x92\xb7\x08\x6c\x6b\x0f\x08\xb5\xfb\x7a\x3f\xd9\x46\xb8\xd5\xc0\x05\xcb\x6a\xbe\xe7\xde\xce\xfb\x65\x96\x30\xc1\x99\x7a\x73\x0d\x25\xb9\xf7\x7e\xb5\x19\x88\xee\xc4\x72\xaf\xd1\xfd\x3a\x49\xd5\xf0\x4b\x8a\xf1\xfb\x6f\x93\x01\x20\xd9\x16\x3b\x97\xde\x6f\x13\x43\xc1\x7d\xa8\xb9\xcc\xf2\x96\xdf\x67\xd1\xf2\xaf\x5c\x93\xb8\xf8\x3a\x8d\x1a\x7c\x85\x06\x5c\x25\x49\xbe\xfe\x9a\x6e\xf8\xab\xd2\x25\x0c\x9a\xcc\xd7\x87\x04\xc1\x01\x24\x7b\xe1\xbe\xfa\x7c\xdd\xbc\xf4\xdf\x17\x5c\x9e\x81\x65\x35\x0a\x81\xb2\x72\xdf\x16\xd3\xe8\x8e\xc5\x59\x57\xe7\x8b\x9f\x2b\x32\xe5\x0b\xfc\x62\x96\xa5\xda\xd3\xe4\xca\xbb\x03\x3b\x3f\x2e\xe6\xdb\x54\xf2\x1a\xa5\x11\x64\x0a\xb6\xc5\x2a\xde\xcf\x42\xb9\xcc\xbe\x59\x2b\x6d\xea\xcf\xec\xb9\x2b\x88\x8b\xcd\xf3\x15\x9e\x29\x3b\xc4\xb7\x09\xb7\x27\x40\x93\xac\x5c\x3c\x0f\x1a\xc4\xb9\x01\x19\xd3\x37\x39\x69\x91\xe2\x75\x01\x17\xd8\xd7\xde\xa8\x1d\x97\x95\xbf\xc8\xc5\x6b\x6c\xe2\x4b\x50\x2d\x5b\xe0\xc1\xfd\xb5\x1c\xc5\x2b\x59\xf2\x1c\xa4\x1a\x44\xc5\x32\xe5\x78\xa6\x91\x2d\x41\xee\x07\x91\xb1\x5c\x44\x5f\x2c\x31\xef\x0a\x60\x54\x66\xb9\x9d\x24\xb1\xad\x32\xb5\x62\x4b\x65\x7c\xba\x2e\xb3\xe5\x80\xef\x3c\x28\x9b\xcb\x64\xc1\x4a\x69\x55\x14\x6a\x30\x0c\xae\x46\x03\x50\x94\xea\xe8\x66\x10\xeb\x91\x49\x14\xb8\x82\x12\x2a\x68\x0b\xd0\x6c\xa4\x11\xf4\xd9\xe3\xb3\x51\xc2\x0b\x5e\x2a\x3f\x0c\xf2\x70\xe8\x2a\xe5\xf1\xea\x0c\xae\x15\xb0\x9b\x5b\xab\x1b\xf8\xcc\x16\xe7\x6e\xe4\x5a\xad\x16\xe9\x68\x37\x06\x22\xb0\x9d\xad\x6a\x8d\x7e\xd4\x5c\xad\x77\x03\xf9\x60\xd9\x06\x0c\x14\x3e\xe0\x57\xa9\x49\xac\xc0\x6a\x34\x7e\x44\x7d\xb0\x95\xc5\x73\x47\xb0\x7d\xa4\x04\xe8\x67\x86\xe0\xe2\xd5\xe3\x36\xa1\xa2\xc4\x23\xef\xea\xb5\xfb\xad\x8f\x80\xcf\x6c\x6b\xdf\xf0\x0c\x9d\xb8\xa7\x21\x03\x9c\xd0\xcd\xab\x45\xdd\x61\xcf\xc9\x0a\xfe\x2b\x16\x2a\xb6\xb2\xd5\xf7\xf5\x90\xeb\xec\xeb\x0a\xca\xaa\xc2\xce\xfc\x97\x24\x54\x5d\x5c\xf5\xfd\xc5\x72\xb6\xe2\x06\x8b\x2e\xe5\x57\x69\x24\x5d\x43\x83\x39\x89\x84\x75\xba\xb7\x35\x76\x7d\x72\x0d\xa1\x48\xae\xd3\xf4\xb8\xc6\x02\x34\x54\xd6\xcd\x09\xba\x54\x79\x87\xdf\x3f\x44\x5c\xe9\x13\x9c\x53\x93\x5e\x3f\x2c\xd2\x10\x7f\x00\x91\x9c\xb6\xde\x6c\x13\x72\x62\xaf\x1c\x7c\x11\x1a\x68\x94\xba\xf3\x43\x33\xa8\x5c\x0f\xab\xc8\xb8\x01\x09\x0d\xb0\x5b\x10\xb9\xf2\x9a\x6c\x46\xb1\xff\x6e\xb8\xb6\x2c\x53\x9e\x65\x33\x5d\x27\x96\x83\x05\x7f\x62\x68\x42\x0b\xec\x8a\xde\x66\x16\x35\xdd\xd4\x28\xf0\x70\x40\xc9\xdb\xe8\xfc\xcd\x7c\x93\x44\xec\xbb\x0d\x27\xda\xb2\x49\x39\xb6\x51\xde\x8c\x57\xa1\x8c\x8f\xea\xcd\x72\x70\xb4\xf7\xdc\xd9\xf5\x38\x1d\x36\xa3\xcd\x4b\xec\x24\xdf\xc0\xb5\xd2\x2d\x9e\x3b\x33\xbf\x8d\xa2\xcc\xad\x6a\xc2\xce\xe4\x13\x69\xfb\x10\x45\x66\x5c\xe7\xc3\x89\x66\x9b\x66\xe2\xad\x6d\xbb\xc6\x13\x06\xdb\xed\x63\x74\xcd\xf6\x04\xb2\x1c\xb4\xdf\xed\x73\x1a\x4c\xc1\x96\xe8\x37\x3d\x1f\x5c\x41\x97\x2c\xe9\x92\xb9\xf9\x52\x7d\x54\xd8\xb2\xb4\x9c\x64\xfc\x5c\xd4\xdc\x6f\x69\xd1\x47\xd9\x38\xc9\xb0\xe5\xb0\xab\x65\x93\x59\x9a\x8b\x79\xc9\x65\xea\x44\xd9\x34\x5e\x4a\x86\xb2\x82\x83\xd2\x7c\x78\xe4\x2c\x1d\x09\x28\x0d\x9b\x73\xc1\xdd\xa0\x1f\x45\xa7\x5b\xcb\x90\x6b\xed\x7c\xa8\x24\xef\xfe\xf5\x04\x69\xff\xcc\x54\xe3\xd7\xbf\x61\x07\xca\x1e\xb2\x64\x53\xae\x74\x05\x6c\x69\xb1\xc2\x6e\x71\xc9\x36\x89\xd9\x6a\x94\xd0\x10\xe5\x52\x6d\xcd\x7e\xfc\x87\x62\x3b\xd5\xfc\xf8\xa3\xdf\x02\x37\xfa\xc7\x9f\x64\x81\x07\x47\x9d\x77\x29\x96\xa5\x75\x65\x2a\x58\x06\xe2\x08\xa5\xd2\x69\x4a\xcf\x9e\xe2\x04\x9e\x9d\x5d\x72\x26\x13\x5f\xa2\x89\x3c\x3b\x81\x41\x89\x6c\x89\x02\x64\xc5\xbb\x10\xcb\x5e\xa3\x96\xbb\x1a\xd0\x87\xe7\x2d\xd4\xbe\x66\xec\xe6\x31\x28\x76\xf0\x8e\x21\xae\x33\x77\xc3\x9e\x77\xf7\x35\xda\xbf\xb3\x7a\xef\x16\x74\x4f\x11\xd7\xdc\xdd\x6a\x97\x08\x24\xb6\xc3\x60\xdc\xa5\xc5\x6f\xa7\x64\x05\x6c\x03\x20\x2b\x6f\xee\x2e\x15\x5c\x27\x97\x9f\xd9\x32\xd4\x9a\xdd\x36\x0e\x04\x3b\x8d\x12\x4b\x28\xbd\xcf\x76\x2a\x87\x4a\x0d\xdc\xbb\xdb\x25\xe9\xf6\x08\xc2\x0e\xb1\xa7\x84\x01\x9e\xdc\x6a\xc8\x4f\x43\xfc\x79\x80\xcb\x8b\x4f\xae\xe1\xb5\xef\x5e\xa3\xd9\x8f\x7b\xb7\x2d\x73\x36\xd7\xe7\xa3\x44\xaf\xe2\xe3\x68\x1e\xd1\xca\x67\xd2\x90\xf7\x71\xf6\xfd\x6a\x28\xcf\x4c\xf7\x60\x12\x8f\x7f\x4c\x59\xfa\xa8\xad\x2f\x09\x7d\x99\x79\x7c\x89\x8d\xe6\xf1\x92\xf3\x74\x21\x1e\x4c\x6a\x3d\x71\xc9\x2f\x96\x8b\x7e\x97\xee\x04\x3f\x4d\x63\x22\x3f\x21\x37\xae\xcc\xb3\x89\xea\xf4\x7a\x5a\xf7\x6b\xfe\x13\x48\x0b\xc6\xb2\x27\x30\xd6\xef\x1d\x4f\x8f\x4f\x29\x8d\x1a\x05\x6c\x07\xdd\xa2\xfc\x9c\xed\x06\x73\x54\x63\x25\x58\xf3\xe3\x8f\xec\x0e\x25\xc8\x02\x7f\xfc\xb7\xe6\x6c\xf4\xa6\xb1\xf0\x1e\xba\xb9\x9d\x8e\xc6\x9f\xd9\xf8\x6e\xd4\x55\x16\xe6\xfe\x76\xcc\xdf\x47\x51\xab\x29\xb4\x86\x8d\x41\x63\x9e\x73\x37\x1e\x46\x97\x7c\x1f\xa7\x31\x55\x1a\xae\x25\x18\x54\x12\x84\xeb\xe4\xdc\xf8\x01\xdb\xca\x92\xdd\xdc\xaf\xee\x3e\xb3\xec\xc0\x0b\x04\xc1\x26\x1a\x4e\x28\x2b\xb6\xc5\xaa\x36\x7e\xb7\xfa\x3e\xd9\xfe\x35\x0a\x8f\xa7\xa3\x87\xcf\xa9\x0e\x7e\x7f\xb8\x1b\x70\x1f\x8c\x42\xdd\x7a\xf4\xc7\x7f\x01\xb6\xac\x74\x23\x43\x81\x6f\xbe\xaf\xde\x8c\xef\x36\x43\xd6\x4d\x64\x7d\xe1\x0d\x4f\xdd\xea\x65\x3a\x28\x9d\xd6\xd4\xe1\x7c\xb6\x85\x2e\x7d\x5f\x53\x69\x7d\xed\x36\xa6\x34\x0a\xbc\xae\x9e\xfd\xfd\x04\x18\x9b\x1c\xf2\xd3\xb0\xc4\xbc\xba\x38\xfe\xc3\xa7\xee\x01\xef\xe7\x7f\xf8\xbb\x7f\xfa\xf9\x77\xac\x50\x25\x6f\xbb\x77\xbc\x25\xc8\xca\x42\xc5\xbb\x77\x3c\xb7\x01\xe7\xfb\x1a\x2e\x08\xd2\x8b\x65\x90\x7f\xea\x81\xb7\xb0\x82\xb2\x6e\x40\x61\xf1\xbb\xc6\x3d\x80\x6c\x03\xf8\x46\xc0\x7d\x14\xb4\x27\xdf\xbb\x27\xbe\x80\xb5\xbf\x10\xac\xa9\x41\x63\x11\xd8\x1a\x02\xb9\xa6\xd3\x23\xfa\x0a\xa9\xdc\x1e\xc5\x03\x28\x29\xe8\x9f\x0d\xc3\x69\xf5\x99\x60\x6d\x0b\x4d\xe2\x6b\x09\x76\x1c\x28\x72\xa4\x08\x77\x59\x17\x20\x4e\xa0\x73\x03\x1a\x02\x42\x8f\x8a\x6f\x80\x18\xe0\xcb\x10\xbe\x85\x26\x8f\x9c\x79\x43\xa1\xb6\xde\x63\x70\x7f\x0e\x57\xd0\x2f\x36\x68\xdf\xf5\xfe\x88\x74\xef\x56\xd1\xee\x9c\x53\x54\x56\x20\x90\xdd\x74\xaf\x84\x9f\x03\x0d\xf1\xdb\x2d\xba\x9b\x08\x48\x4d\x91\x56\x40\xd3\xeb\x8a\x04\xf2\x4f\x99\xfd\x99\xc4\x9f\xb7\x9a\x1b\xd5\x23\xe4\xfa\xfa\xc7\xc8\x1e\xac\x28\xa8\xd3\x0d\x35\xc4\xa5\x63\x30\x6e\x26\xec\xa0\x82\x38\x66\x5c\x43\xa3\xb4\x56\x01\xab\x29\xc6\x8b\x9a\xf7\x6c\x9c\x42\x58\xd4\xfc\x04\x5f\x1c\x91\xfb\xb1\x3e\x83\x7c\x0f\x96\xca\xf3\x15\x69\x8a\xb8\x4b\xfd\x01\xc4\x6e\x32\x6c\x0e\x02\xdf\x90\x97\x9f\x7b\xba\x7f\x9d\x83\x6c\x3f\x24\xde\x69\x28\xb1\x2b\x6a\x84\xda\x50\x6a\x7b\x84\xb6\x0e\xba\x93\xa8\x1c\x2b\x2d\xb1\x87\xf6\xa7\x2b\xa8\xc5\x22\x7a\x4a\x11\x4c\xf3\x60\x44\xa1\xe9\x77\xff\xda\xd1\xa7\x0d\xc5\x2e\xbc\xe8\x75\x20\xc6\x4c\x20\xa9\x50\x92\x0b\x99\xe0\x91\xd7\xf8\x85\x4d\xea\xf0\x4b\xb7\xfe\xc4\x03\x4a\x62\xcb\xc4\x9a\xfe\x00\x29\x08\x70\x51\xb2\xda\xd7\xe1\x46\x4a\x92\x42\x53\x59\x89\x78\x3a\x27\xb1\x3c\x6d\x0f\x5c\x83\x34\x21\x1e\xb8\xa2\xa0\x51\x29\x68\x39\xf1\xf7\xf4\xd4\x67\x17\x89\x93\x3b\xd0\x2a\x5e\xfe\x1b\x91\x76\x87\xef\x51\xd6\xdb\x3b\x45\x64\xf2\xce\x1b\x49\x9b\x3b\xcd\x65\x6f\xf0\x1b\x71\xf5\x9d\x15\xf0\xc5\xff\x5b\x7f\xf1\xef\xd3\xa0\xbb\x9f\xa1\x1e\xbc\x91\x8a\x3b\x03\x81\x45\x3c\xbe\x12\x14\xe3\x02\x0b\x76\x93\x15\xca\x18\x6c\xeb\x10\x64\x55\xf9\x11\xd1\x0a\xe4\xaf\x3d\x01\xb9\x99\xf0\x48\x18\x4e\xd8\x03\xc5\x74\x13\xef\x93\xf8\x6b\xa6\x39\xdf\x07\x47\x8a\x6b\x40\xba\x89\xb3\xaf\xb4\x7b\x0a\x77\x8b\x50\x50\x44\x52\xe8\x1d\x34\x98\x1e\x23\xc5\xcf\x3f\xc7\x81\x74\xb1\xad\x44\xb8\xa5\xda\x50\x0a\xdb\x86\x20\xaa\x89\x0d\x73\x9e\x6b\x7e\x0a\x08\xa7\x88\xe6\x7d\x41\xa9\x49\xe0\xcd\x51\x96\x41\x8f\x1a\x29\xa0\x91\xad\x54\x98\xa2\x58\x4d\x02\xa5\x7b\x18\x4c\x19\x46\x2c\x08\x4f\x6e\xbd\x57\x90\x64\xd9\x7d\x19\xd4\x40\x22\xf0\xbe\xca\xfb\xef\xa4\x82\xc6\x47\xc6\x70\x12\x4a\x8a\x1a\xae\xdd\x6c\x6a\x83\x3f\x10\x3e\x86\x83\x1f\x91\x53\xd8\xee\x0d\x1a\x6b\x02\x68\xaf\xc0\x03\x42\xb8\x77\x24\x23\xc0\xbd\x8e\x99\x50\xd1\xf3\x8c\xdb\xb1\x7a\x4d\xc9\x9d\xf9\x77\xc1\x98\x75\xef\x40\xb1\xe3\x10\x23\x21\xbb\x00\x01\x20\x04\xb6\xd6\x7c\xf9\x4b\x01\xb7\x00\x29\xa1\x0c\x9e\xd8\xcb\x2b\xc8\xf6\xfd\x70\xaf\x29\xd2\xd6\x0d\x46\xac\xa5\xd8\x05\xf6\x7d\x51\x26\x2e\x58\xd4\x0d\x0f\x49\xbc\x27\xfd\x7e\x81\x7b\x7b\x0e\x21\xb3\x47\x8a\xc8\x33\xe8\x6e\x39\xbf\xe9\x96\xf4\x90\xa4\xfa\x44\xe9\xfc\x7f\xa7\x0b\x10\xb5\xc2\xbf\x93\x06\xe1\xa4\xa1\x2d\x54\xd3\x5b\x40\xdd\xa7\x64\x15\xe2\x6a\x5f\x51\x40\xf3\x58\x08\x48\x24\x2e\xac\x2e\x53\x2b\x22\x31\xb1\x38\x81\x3c\xc7\xe1\x61\x4f\x0a\xe4\x12\xc2\x39\x42\xd1\xcf\x06\xc3\x31\x02\xae\x00\xd7\x40\xd8\xcd\x92\x0f\x2b\x9a\x20\xea\x2f\xb1\xc9\xad\xae\xb0\xad\xd9\x4d\xff\x07\xd7\x3d\x29\x52\x52\x37\x15\x05\xd5\x84\xa4\x90\xa9\xed\x60\x68\x15\x24\x32\x97\xb6\x82\x9f\x17\x60\xdc\xf6\x1a\x70\x7b\x8d\xcb\x12\xbe\xb0\x99\xfb\x11\x28\x2a\x4a\xf1\x2b\x6f\x72\xd5\x29\x1a\x08\xf2\x21\x81\x2b\xc8\x1f\xd5\xe3\xf8\x12\x1a\x14\x6b\xf6\x14\x15\x50\x41\x7b\x0e\x58\x75\x8d\xf5\x40\xfb\x67\x00\x08\x68\x02\x28\xae\x40\x93\xc6\x31\x43\x21\xd5\xe7\x40\x83\x14\xd0\x60\xea\x1e\xd2\x57\x50\x5b\x83\x10\x49\x24\x99\xa4\x56\x4a\x94\x90\x86\x84\x46\x51\xb0\x7b\xc3\xed\x41\x72\x61\x6b\xb0\x3a\xe4\x90\x04\x0a\x1c\xe1\x3d\xc4\x99\x24\xae\x5c\x97\x2a\xde\x9f\x24\xae\xf2\xef\xff\x5c\x4b\xb6\x2e\x79\xce\xfb\x8e\x22\x49\xe7\xf4\xaf\x97\xc1\x46\xc9\xaf\xb8\x4f\x3c\xf5\x4c\xa9\x3e\x04\x59\xae\xf6\xcd\x8f\xff\x14\x81\x28\xff\x98\x48\x9e\xa5\xd2\x6d\x28\xa9\x92\x5a\x6c\x55\x1b\x2c\x46\xe2\xfe\x87\xa2\xc0\xb8\xae\xa8\x82\x40\xef\x98\xf7\x13\x8e\x22\xb9\xf8\x20\x4a\x37\x6c\xea\xa2\x66\x99\x80\xa3\x92\x58\x7c\xf1\x1f\xaf\x86\xf5\x82\x04\xfa\x83\xc6\x73\xf0\xa0\xd2\x14\x50\x8d\x62\x37\xa3\x37\x00\xd9\xfd\x11\x32\x50\x91\xd2\xf7\xd0\xb6\x3c\x0d\x9d\x8a\x84\xe5\xe6\x7f\xff\xbd\xf7\xef\x81\xd8\xb7\x81\xb6\x36\xca\x4d\x45\xee\x67\xa0\xa0\xac\x5c\xb7\xbe\x50\xdc\x81\x6e\x31\x9c\xfc\x46\xc2\x62\xa3\xd2\xec\x78\x10\x14\xd1\xc6\x56\x36\x46\xe8\x81\x04\xfd\xc6\xca\x77\xc8\x91\xdd\x4c\xa1\x35\x5c\xcb\x20\xfc\x40\x84\x7f\xb3\xbc\xa8\xfb\xfe\xfa\x0b\xf1\x98\x7f\xba\xed\x0f\xd6\xcd\x9f\x41\xd1\x19\x9a\x84\x4d\xf7\x78\xdb\x43\x44\x62\x06\x7d\x1d\x6f\xf9\xd5\x77\x15\x77\xee\x86\x22\xb1\xc2\xb7\xd5\x15\xd0\xee\x35\x86\xe6\xde\x12\x9b\xba\x97\xe5\x5e\x9e\xbe\x86\xd4\xcf\x74\x81\x68\x6b\x4a\xe1\xff\x5b\x52\x80\x0c\x85\xba\xff\x19\xa3\xc3\x0c\x09\xf1\xac\x56\x3d\xd0\x52\x00\x9d\x7f\x25\x7b\xc1\x8f\x12\x20\x43\x59\xf6\xe5\xa7\x2d\xaf\x90\x1a\x52\xf1\x69\xaf\xd8\xda\x53\x1c\x30\x5b\x12\x50\x99\x50\xc7\x7e\xb0\x69\xf7\xd7\xc8\xe0\xb9\xa1\x25\xa1\xd4\xbd\x20\x07\x44\x51\xc4\x7e\x54\x61\xa8\x5b\x0f\x83\xed\x8a\x53\x7d\xac\x2c\x07\xf3\x4f\x4b\x03\xe2\x04\x35\xba\x65\x7f\xe1\x0c\x72\xbf\x86\x20\x6d\x4f\x57\x64\xff\x8f\xb1\x27\x9e\xba\x79\x4b\x4a\xe6\x0e\x2a\x10\xaa\x0a\x77\x25\x28\x54\x63\xba\x7e\x73\xa6\xd8\x3b\x06\xef\x99\x8a\x02\x0d\x86\x0a\x68\x80\x02\xa6\xdf\x78\x0c\x09\x97\x1d\x17\xb6\x0a\x65\xcf\x90\x78\xdf\xd5\x10\xcc\x31\x24\xf6\x76\x98\xf3\x58\x0e\x73\x45\xa1\x4a\xbb\x11\x2b\xb0\x91\x68\xd8\xa5\xe6\x60\x28\x53\x3b\x40\x88\xe3\x76\x56\xef\xa3\xe3\x8c\xbe\x86\x9a\xfe\x0d\xc2\x90\x08\xda\x9d\x7a\xb5\xc9\xf5\x3c\x9e\xab\xda\x06\x17\x58\xe2\xb4\xee\x05\x3a\xba\xda\x12\x69\x8f\xba\x0c\xde\xb1\x44\x01\xff\x78\x1c\x00\xb2\xcc\x3c\xf1\x38\xa2\x1c\x89\x3f\x9f\x90\x1b\x39\x78\x2d\x3b\x12\xf7\x3c\x29\x01\x87\x1f\xff\x13\x44\x1e\x89\x87\x9e\x41\x88\xfe\xe5\xe7\x44\xae\xf5\x99\x8b\xf8\x98\x41\x22\xe4\x59\x09\xf5\x16\x38\xa8\x2c\xee\xcb\x2c\xbb\xd3\x98\x0a\xe0\x1b\xe1\xfd\x5e\xab\x7e\xb7\xfb\x95\xdc\xfc\x0b\x96\x29\x90\xcf\x9d\xfa\xef\xc4\x8a\x17\xa5\x6d\x1e\x78\xcf\xe4\xdc\x57\x57\x5f\xaa\x2f\xae\x27\x82\x0c\x01\x7f\x21\xb6\xbc\x5a\x11\x3c\x7d\xb1\x9f\xfe\xf0\xe9\x13\xca\x83\x35\x6c\xc7\x7f\x35\x63\x25\x0d\x97\xe6\xde\x7f\xe8\x9e\x5a\x8b\xee\xd3\xef\x59\x66\x34\xca\xea\x27\xff\x51\x84\xe7\xd8\xdf\xc7\x87\xd9\x9f\x9c\x20\x73\x3e\xf0\xa1\x9c\x20\x02\x4b\xca\xfd\xd7\x88\x4c\xba\x7d\xa8\xd4\x3f\x5f\x6b\xfd\xd3\xbf\x10\x45\xfe\x92\x06\x43\x7e\xc7\xfa\x7f\x01\x00\x00\xff\xff\x46\x19\x63\x6c\x41\x2a\x00\x00")

func typeInternationalizationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeInternationalizationGraphql,
		"type/internationalization.graphql",
	)
}

func typeInternationalizationGraphql() (*asset, error) {
	bytes, err := typeInternationalizationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/internationalization.graphql", size: 10817, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0x76, 0x16, 0x99, 0x1b, 0x8b, 0xa4, 0x45, 0xaf, 0x68, 0x89, 0x1b, 0x21, 0xc6, 0xe5, 0xac, 0xac, 0x0, 0x1b, 0x56, 0x81, 0xd8, 0x16, 0x56, 0x4c, 0x67, 0xd5, 0x60, 0xc8, 0x98, 0x7f, 0x43}}
	return a, nil
}

var _typeKey_value_export_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x90\xc1\x6e\xc2\x30\x10\x44\xef\xf9\x8a\x41\x9c\x39\xe5\x96\x5b\x0a\xa4\xa5\x4a\x49\x15\x43\x2f\x15\x42\x86\x6c\x90\x45\x6c\xa7\x8e\x5d\x15\x55\xfc\x7b\xe5\x38\xa9\x40\x1c\x77\x66\x67\x76\xf5\x22\x52\x4e\x62\xf9\xd3\x6a\x63\x33\x6d\x24\xb7\x9b\x4b\x4b\xf8\x8d\x00\x60\xce\x3e\xf6\x59\x51\xbe\xa5\x9b\x7e\x7c\x65\xc5\x7a\x9c\xaf\xd1\x6d\x92\x59\x6d\xf8\x89\x6e\xa2\x6c\x53\x94\xe9\xf3\x72\x9f\x17\xf3\x34\xbf\x53\x5e\x16\x19\xbb\x13\x58\xec\xdb\xa6\x98\x6b\xd5\x39\x49\x06\xab\x45\x07\xab\x71\x20\x50\xdf\x4e\x55\x34\x45\xa6\x0d\x7c\x14\xb3\x19\x5a\xa3\xbf\x45\x45\x50\x5c\x12\x94\xae\x08\xdb\x32\x87\x50\xe0\xd6\x1a\x71\x70\x96\x10\x4d\xb1\xf6\xae\x1c\xdd\x33\x5d\x7c\xd4\x8b\x6b\x5d\xd1\xb6\xcc\x87\x52\x16\x7b\xfd\xbf\xb3\x76\x4d\x73\xc1\x97\xe3\x8d\xa8\x05\x55\x08\x8b\x2c\xc6\x93\x3b\x9e\xc9\x86\x9b\x43\x19\x8b\x83\xe8\x77\x84\x6a\x9d\x1d\x70\xbc\x73\xc3\x65\x37\x90\x10\x55\x97\xe0\x93\x59\x23\xd4\x69\xb2\xeb\xa5\xba\x07\x9d\x3c\x60\x9f\x04\x57\x34\xe4\xdf\x4c\x30\x84\x7a\xb5\x0b\x88\x93\x47\xe2\xc1\x3f\x6a\x55\x8b\x93\x33\xdc\x0a\xad\xfc\xc5\x74\x64\xb1\xf2\x9f\x4d\x76\xd1\xf5\x2f\x00\x00\xff\xff\xdd\x60\x99\x13\xec\x01\x00\x00")

func typeKey_value_export_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeKey_value_export_recordGraphql,
		"type/key_value_export_record.graphql",
	)
}

func typeKey_value_export_recordGraphql() (*asset, error) {
	bytes, err := typeKey_value_export_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/key_value_export_record.graphql", size: 492, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xeb, 0x1a, 0x82, 0xa5, 0x6c, 0x7c, 0x6d, 0x73, 0x64, 0x1d, 0x19, 0xd0, 0x9f, 0x79, 0x71, 0xfc, 0xa2, 0xa8, 0xca, 0x50, 0xbd, 0xcb, 0xac, 0xc8, 0x6f, 0x16, 0x10, 0x78, 0xaf, 0x9f, 0x66, 0xde}}
	return a, nil
}

var _typeLabresult_observation_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\xb0\xe8\x75\xfb\x03\xbe\x6d\x19\xda\x15\x28\xf6\x91\x15\xbb\x14\x3b\x30\x32\x9b\x08\xb3\x44\x83\xa2\x03\x78\xc3\xfe\xfb\x20\x4b\x41\xac\xcc\x76\xd6\x7d\x9c\x0c\x53\x14\xf9\xde\x23\x9f\x56\xd6\xb7\x9d\xc2\x3d\x6e\x37\x14\xba\x46\xdf\x6f\x03\xc9\x01\xd5\xb2\x5f\x0b\xa1\x12\x7c\x5f\x01\x00\x78\x74\x54\xc1\x27\x15\xeb\x77\x57\x43\xe4\x80\x4d\x47\x15\x7c\x8e\x9f\xbb\x58\x24\x85\x0d\x2a\xed\x58\xfa\x63\x32\xa4\x28\xd7\x54\xc1\x9a\x6b\xdc\x36\xb4\x66\x6f\xa8\xd5\xe1\x52\x3a\x16\xf4\x3b\x0a\x15\x3c\x6e\xe8\x89\x84\xbc\xa1\x4d\x8c\xa4\xb2\x5f\x86\x14\x14\xb5\x4f\x68\x34\x66\xbd\x52\x45\xb3\x77\xe4\xf5\x98\xf1\x63\xb5\xd2\xbe\xa5\x49\x1e\x99\x81\xad\x4b\xfc\xcb\x8c\x9e\x4b\x66\x89\xc6\x22\x83\x04\x7e\x7e\x0a\x1b\x32\x2c\xf5\xc7\x8e\xa4\xff\x80\x82\x2e\xb3\x31\xec\x43\xe7\x48\xee\xde\xcc\xb3\x9a\xa4\x30\x04\xf9\x54\xff\xdd\x70\xe1\x31\xd7\x88\x60\xe0\x22\x9a\x62\x33\xae\xe1\x46\xd8\xc1\x9e\xb0\xd1\x3d\xc8\x90\x30\x23\xf0\x39\x96\xab\x45\x2a\x35\x05\x23\xb6\x8d\x6d\x4b\xf0\xc6\x74\x22\x54\x57\xf0\x60\x5d\x1e\x54\xe0\x4e\xcc\xa9\x1b\xa4\x41\xb1\xec\xd0\xdb\x6f\x38\x2e\x91\x8f\xd2\x85\x44\x67\x68\x5c\xfc\x0f\x6b\x95\x46\x7a\x9c\x64\x31\xd6\xb7\x03\xd9\x9c\x3d\x5a\xd2\x86\x4d\x6e\x76\x4b\x7c\x9f\x7f\x52\xb1\xac\xd5\x48\xf9\xb1\x56\xb3\xfe\x48\x60\x5b\x32\xd6\x51\x29\x83\x61\x17\xf7\xa7\x88\x39\xd2\x3d\xd7\x13\xa1\xf5\xb2\xff\xac\x57\x92\x56\x48\xf1\x57\xb5\x4f\x80\xa3\x04\xf3\x0f\x45\x5a\xe4\xd5\x35\x3c\x50\xd0\x94\x03\x2f\xe3\x12\xb1\xa0\xb2\xf4\xa0\x14\x14\x24\x1d\x34\xf6\x2b\xc1\xb6\x61\xae\x61\xd7\x74\x86\x03\xbd\x00\x16\x40\x0f\x14\xd4\x3a\x54\xaa\xe1\xf6\x66\x33\x6f\xea\xa4\x3d\x58\xd7\x36\x14\x65\x08\x30\x9e\xc9\xa5\xd5\x3c\x7f\x0b\x9e\xb7\x98\xad\xd0\xc1\x72\x17\x52\xaf\x42\xad\xd4\xe3\xa1\x6f\xa9\x2a\x00\xc5\x48\xba\xac\x82\x3e\xa0\x89\x1c\x26\xd2\xca\xc3\xb9\x87\xea\xaf\x9c\x91\x0d\x60\x86\xa1\x15\xa9\x53\x76\xf9\x0d\xb3\x8c\xcb\xbd\xee\xcf\xe4\xb8\xe4\x9e\x25\xe3\xfc\x81\x67\xe0\x3f\xfa\xe5\x1f\x38\x25\x7a\xe4\x67\x00\x00\x00\xff\xff\x8b\xa3\x0a\x17\x72\x07\x00\x00")

func typeLabresult_observation_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeLabresult_observation_recordGraphql,
		"type/labresult_observation_record.graphql",
	)
}

func typeLabresult_observation_recordGraphql() (*asset, error) {
	bytes, err := typeLabresult_observation_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/labresult_observation_record.graphql", size: 1906, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0xfc, 0xea, 0x55, 0xe, 0x4b, 0xf7, 0xc2, 0x3e, 0xe7, 0x6c, 0x64, 0x51, 0xa8, 0xcd, 0x35, 0xac, 0x90, 0x71, 0x61, 0xfc, 0xa5, 0x92, 0x3, 0x38, 0x39, 0x96, 0xb2, 0x11, 0x54, 0x2d, 0x5c}}
	return a, nil
}

var _typeListGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x92\x4f\x8f\xd3\x30\x10\xc5\xef\xf9\x14\xb3\xda\x0b\x48\xfc\xb9\xe7\x16\xba\xd6\x6e\xc4\xd2\xa2\x24\xa2\x87\x15\xaa\x5c\x7b\x4a\x0c\x8e\xa7\xb2\x27\x54\x15\xe2\xbb\xa3\xd8\x21\xc9\x4a\x2c\x07\x0a\xdc\x3a\xe3\xcc\x7b\xd3\xf7\x9b\xec\x1a\xee\x4d\x60\x08\x2c\xb9\x0f\x19\xba\xbe\x8b\x8d\x3a\xd6\xf0\x2d\x03\x80\xfb\xb2\x6e\x76\x95\x68\xca\x4a\xdc\x4c\x75\xb1\x6a\xca\x0f\x62\x2a\xc5\xba\x11\x95\xb8\xd9\x95\xeb\x9d\xa8\xaa\x4d\x95\x7d\xcf\x7e\x4a\x77\xa4\x71\x16\x7e\x47\x1a\x93\x6c\x1a\xdc\x6e\xaa\xb7\xe5\xfa\x76\x6e\xd4\xeb\xe2\x7d\x7d\xb7\x69\xe6\xce\xea\xae\x58\xdf\x8a\x3a\x49\x0a\xc7\xde\x60\x00\xe3\x80\x5b\x04\x6b\x02\x67\xc6\x1d\x7b\x8e\xea\xc3\xeb\xb9\x8c\x65\xf2\xd0\x92\x31\x87\xc6\x74\x08\xa9\x46\x8b\x8c\x3a\x87\x37\x44\x16\xa5\x4b\x5d\x1c\xc6\x72\x78\x28\x98\xbd\xd9\xf7\x8c\x51\xe2\xea\xe3\xd3\x96\x7c\x3e\xe2\xec\x38\x9a\x19\x9d\x43\xcd\xde\xb8\x4f\x57\x97\x98\x8f\xbe\x4d\x8b\x20\x2c\x76\xe8\x38\xe6\xe8\x31\x50\xef\x15\x82\x09\x20\xe1\x60\x25\xbf\x80\x23\x85\x60\xf6\xf6\x0c\xe4\x35\x7a\xd4\xa0\xc8\x5a\x54\x6c\xc8\x01\x1d\xc0\xa3\x22\xaf\xc3\xab\x45\x42\xcb\x70\x12\xf4\x7c\x01\x3c\xed\x3d\x10\xcb\x27\x5a\xa9\xc7\x86\x2d\x3e\xfe\x7b\x2a\x7e\xb6\x22\x2d\xf7\x16\x57\xe4\x14\x1e\x93\x7c\x7c\xbd\x86\xf2\x00\xd2\xda\x69\xef\x00\xad\xfc\x8a\x31\xc2\x20\x3b\x84\xd0\xef\x3f\xa3\x4a\x1f\x8f\xbf\x73\xa8\xf0\x80\x1e\x9d\x42\xe1\xd8\xf0\x88\x72\xd4\xdb\xde\x11\xd0\xc9\x85\x89\xc2\x10\xb0\x8c\x8f\x74\x72\xe8\x17\xd3\x85\x62\xf2\x09\xe2\x38\x5c\xa7\xec\x5e\xc2\xb6\x25\x90\x4e\xbf\x26\x0f\xa7\x56\x32\x68\x3c\x18\x87\x7a\x16\x55\xe4\x18\x1d\x07\x78\x26\xbf\x48\x28\x7a\x6e\xc9\x3f\x4f\x5b\x46\x8d\xdf\x2d\xe9\x88\xa7\x90\x46\xe3\x5f\x5d\x4f\x3c\x16\xc6\x2e\xe4\xf0\xf0\xf8\x6c\x17\xec\x2f\x86\x3e\xdd\xe8\x13\xe7\xf9\x0f\xf0\xff\x3d\xf2\x7f\x0a\xfd\x3f\xf0\xbe\x1c\xf5\x40\xf9\x47\x00\x00\x00\xff\xff\xe0\x76\x0a\x45\x7a\x05\x00\x00")

func typeListGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeListGraphql,
		"type/list.graphql",
	)
}

func typeListGraphql() (*asset, error) {
	bytes, err := typeListGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/list.graphql", size: 1402, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x34, 0xb8, 0xcf, 0x4d, 0x3b, 0x6c, 0xa1, 0x68, 0xc6, 0x76, 0x6f, 0xee, 0x44, 0x83, 0x92, 0x81, 0x5d, 0x76, 0x29, 0x45, 0xb2, 0x13, 0x23, 0x8f, 0xb3, 0x69, 0x25, 0xfa, 0x16, 0x78, 0x61, 0xf5}}
	return a, nil
}

var _typeLocationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x56\x4d\x6f\xdb\x46\x10\xbd\xeb\x57\x4c\xd1\x4b\x03\x28\x0a\xda\xa3\x6e\xb4\xa4\x3a\x6c\x15\x31\x90\xe4\xf8\x60\x14\xc5\x78\x77\x48\x2d\xbc\xdc\x61\x76\x87\x16\x98\x22\xff\xbd\x58\xae\x3e\x28\xd9\x0d\x5a\xa0\x28\x7a\x31\xc4\xfd\x78\x6f\xe6\xbd\x99\x59\x8f\x46\xe4\xda\x1a\x96\xac\x50\x0c\xbb\x0f\xac\x09\xfe\x18\x01\x00\x7c\x0f\xdb\x1d\x9d\x36\xc0\x53\xe3\x29\x90\x93\x00\x08\xca\x62\x08\xc0\x25\xd8\xc3\x76\x80\x1f\x68\x52\x4d\x20\x73\x1d\x14\x0d\x79\x14\xe3\xaa\x08\x80\xe2\xe9\x4d\x8f\xb7\x2c\x66\xd9\x36\x2f\x56\xbf\xff\x9a\xaf\xe6\x30\x7a\x9d\x23\x70\xeb\x15\x5d\x92\x85\x86\x94\x29\x8d\x02\xe3\x82\xa0\x53\x14\x89\xf1\x44\x7d\x60\x7e\xc1\x0a\x3f\x66\x6f\x26\x97\xcc\xf9\x6a\xb3\xcd\x56\xb3\xc5\xe8\xeb\x55\xda\x1f\x77\x5d\x30\x0a\xed\xb6\x6b\xce\xe9\x67\xa0\xd8\x5a\x52\x3d\x09\x97\xf0\xd8\x1a\xab\x8d\xab\x02\xb0\x07\x96\x1d\xf9\x41\xfa\xa1\x55\x3b\xc0\x3e\x5c\x23\x14\x4f\x20\x28\xac\x9b\x36\x5c\xc5\xb0\xc9\xb7\x8b\x63\xf2\x51\xad\x9b\x03\x6a\xbc\x12\xc4\xb7\x4a\x5a\x4f\x13\xd8\xee\x4c\x80\x1a\x3b\x50\xec\x04\x8d\x03\xcf\x5c\x87\x31\x28\xf6\xde\x68\xf6\x61\x0c\xfb\x18\xcb\x18\x48\xd4\x04\x2e\x39\x6e\xee\xf2\xe5\x3c\x5f\xdd\x9e\x78\xe0\x3e\x32\xec\x8d\xec\x8c\x03\x3c\x71\x8e\x41\x22\x0d\x97\x42\xee\x48\x14\xc0\xd2\x33\xd9\x30\x4e\x8c\x80\x4e\x9f\x49\xaf\x89\xee\xf3\xd5\x2d\x0c\x58\xd0\x6b\x30\xbd\x08\x67\xd9\x10\x6a\xd2\x51\x5c\x28\x51\x19\x6b\xa4\x03\xd9\xa1\xbc\x4c\xae\xa7\x4a\xba\x4a\xd7\xd0\x45\x7d\xbd\x20\xce\xd6\xf3\x01\xf1\x32\x86\x0c\x7d\x6e\x75\x6b\xc5\xbc\xed\x73\x38\xe5\xf9\x6e\x73\x16\xf6\x12\x67\xb9\xf8\xb4\x58\xc2\xd0\x8f\x63\xae\xaf\xab\x75\x8e\xdb\x91\x92\x14\xf7\x35\xe6\xac\x58\xaf\xf3\x79\xb1\x1e\xc4\x17\x1a\x54\x94\xae\x47\x79\x6c\x9f\x16\xe9\x54\x30\x11\x64\x0c\x26\x21\xef\xf0\x99\x60\x8f\xd6\x86\x77\x9e\xb9\xec\xdd\x1d\xc3\x63\x2b\xa0\x99\x02\x38\x16\xf0\xf4\xb9\x35\x3e\xc2\x51\xa0\xab\xea\x5a\x17\xc5\x87\xbf\xc1\x5b\xc6\x62\xb3\x44\x4d\x14\xc7\x62\xd7\xd7\xdf\x0b\x91\x6f\x16\x43\x8d\x6b\x42\xd7\x7b\x22\x1e\x5d\x68\xd8\x4b\x72\xe6\xf2\xce\xa7\xc5\xfb\x7c\xb6\x5c\x0c\xee\x79\x0a\x46\x93\x13\x83\x16\xf4\x9e\xac\x35\xae\x9a\xc0\x5d\x68\xd1\xda\x0e\xda\x40\x1a\x84\xc1\x53\x49\x9e\x62\x73\x0f\x3a\xbb\x0f\x1c\xa1\x21\x1f\xd8\xbd\x6b\x50\x0c\xb9\x24\x53\x02\xbd\x0e\xf8\x7d\x71\xb7\x19\x52\x1f\xca\x2b\x16\x54\x44\x52\xe8\x20\x08\x7b\x82\x8a\x59\xc7\xd6\xf9\xdc\x9a\xa6\x26\x27\xe3\x43\x8d\xa6\x5e\x3e\xb5\xb7\x11\xaa\xaf\xfb\x77\x96\xdd\xe4\xab\xc5\x76\xc0\xa2\xa9\x34\x8e\x34\x34\x28\xbb\x98\x8a\x78\x8c\xc5\xf7\x48\xb2\x27\x72\xf0\x13\x34\x6c\xe2\x24\xeb\x63\xd8\xf5\x96\x3f\x39\xde\x3b\x70\x58\xbf\x48\x61\x5d\x64\xf3\xd7\xb0\x0f\x03\x0a\x1e\xb9\x75\x1a\x7d\x17\x8d\x08\x5c\x53\xac\xd1\x6a\x3c\x18\x3f\xa5\x65\xd6\xe0\x4d\x78\x82\x2f\xec\x68\x0c\x9e\x2a\xc3\x6e\x0c\x0d\x07\x51\x71\xbc\x5f\x12\x66\xeb\x45\x36\x20\xdc\x1b\x4d\x10\x14\x37\x87\xb2\x51\xfc\x4c\xbe\x1f\xf9\xec\x14\x35\xd2\x46\x17\xb9\x46\xe3\x86\xa4\xab\xc3\x24\x9e\x71\xeb\xc4\x77\x09\x45\x71\x5d\xb7\x2e\xf6\x3b\x7b\xf8\x99\x34\x79\xb4\x70\x1b\xf1\x5c\xd4\x1c\xde\x42\x3f\xb8\x3f\x18\x67\x82\xa4\x8c\xde\x13\x5a\xd9\x5d\xbd\x17\xbf\xdc\xad\xf3\xcd\x3c\x9f\xc5\x0f\x88\xa3\xdb\xb8\xa6\x95\xd3\xec\xce\xfb\xaf\x34\xb4\xa3\xa2\x53\xd8\x88\x37\xae\xfa\xae\x5f\x41\x6b\x30\x4c\xe1\xe1\xb0\xf6\x5b\xbf\xa8\x29\x28\x6f\x9a\x78\xfb\x78\x3a\xa9\x52\xb3\xa6\xe9\xc5\x63\x98\x50\xe2\x3c\x1a\x80\xc0\x69\x71\xd6\x5f\x78\x98\xb1\xc6\x47\x4b\xb3\xa4\x51\x1f\xd1\x81\x4a\xc8\x92\xe2\xba\x3f\xe3\x04\x95\x7c\x8c\xc5\x30\x3c\x81\x5a\x7b\x0a\x61\x0a\x59\xfa\x91\xf6\x12\x45\x33\x78\x97\xa6\xaf\xbe\x56\xe9\x18\x07\x93\x92\x79\xb8\x25\xbe\x10\xe6\x18\x6c\x8d\x0e\x2b\xe3\xaa\xc2\x57\xe8\xcc\x17\x4c\xc7\xd7\xc7\xae\xcb\x94\xb0\xef\x2f\x24\x40\xf4\x52\x94\x83\xfd\x85\x13\x23\x5d\x92\xfa\xa0\xab\x9d\x63\x37\x85\x1b\x66\x4b\xe8\xd2\xa2\xc6\x2e\x14\xe5\x3d\xd1\xd3\x14\xe6\xa7\xdf\x69\x8f\x1b\x72\xc6\x55\x5b\x13\x1d\x8a\x7f\xd3\xb2\xb2\x1c\xae\x96\xbf\x8e\x46\x51\xda\xf3\xbf\x05\xc9\x5b\xa3\x2f\x9d\xfd\x7f\x78\xfd\x4d\x9b\xff\xc2\xe1\x7f\xc3\xdc\x7f\xe2\xeb\xb7\x2c\xfd\x0f\xdc\xfc\x33\x00\x00\xff\xff\xd7\x38\xb7\xf5\x63\x0a\x00\x00")

func typeLocationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeLocationGraphql,
		"type/location.graphql",
	)
}

func typeLocationGraphql() (*asset, error) {
	bytes, err := typeLocationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/location.graphql", size: 2659, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8e, 0x89, 0x9b, 0x5f, 0x5e, 0xaa, 0x43, 0x33, 0x20, 0x40, 0xc3, 0xdc, 0x1, 0x78, 0x48, 0x6a, 0xe8, 0xdd, 0xff, 0x2a, 0x7c, 0xa4, 0x11, 0x1, 0x90, 0x9c, 0xf6, 0xc8, 0x48, 0x13, 0x19, 0x67}}
	return a, nil
}

var _typeMeal_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x53\xbd\x6e\x1b\x31\x0c\xde\xef\x29\x68\xf4\x2d\x6e\x73\x9c\xb8\x31\x92\x7a\xb0\xdd\xa9\xe8\xc0\xe8\x18\x5b\x80\x24\x1e\x28\x29\x80\x5b\xe4\xdd\x0b\xe9\xe4\x5a\x32\xf2\x07\x74\xe8\x92\x4d\xfc\xf8\xf1\x47\x24\xbf\x8e\x5c\xb4\xf0\x8d\xd0\xec\x8e\x23\xc1\xef\x0e\x00\xae\x36\x37\xf3\xbb\xe5\x7c\xbb\x4b\xc6\xfd\xf7\xf5\xe2\x36\x3d\xae\x57\xeb\xf5\xcd\x26\xbd\xb6\xeb\xf9\xe2\xae\x7b\xee\x3a\xed\xc6\x18\x72\xf0\x86\x14\xcb\xb0\x10\xc2\x50\x92\xc0\x17\x58\x0a\x5b\x38\x10\x9a\x70\x00\xc9\x84\xec\x70\x68\xa9\x87\x6d\x10\xed\xf6\xb3\x8c\x28\x76\x3e\x5a\x92\xd5\x75\x8b\x0f\xe4\x95\xe8\x31\x68\x76\x27\x47\xc6\x59\xa9\x28\x42\x43\x0f\x3b\x6d\x69\xe2\x7a\x8e\xa2\xce\x79\x01\x26\xa6\xec\xd1\xe9\x5f\x58\xa7\x28\xae\x29\x60\x6a\x3c\x17\x6e\xec\x55\xfa\x5a\xe6\x09\x3d\x92\x90\x53\xe4\x7b\xf8\xb1\x39\x19\xb7\xf9\x5b\x85\x9d\xb8\xb3\x9f\x99\x6d\x58\x95\x62\x5f\x89\xef\x8b\x91\x09\xd0\x95\xb1\x58\x42\x53\xcf\xc3\x96\xe1\xf7\x7f\xd7\x50\xa6\x82\x86\x45\xa7\xb2\x2b\x17\x0a\x22\x0f\x7c\x38\x0e\x82\x81\x7a\x58\x1a\xc6\x09\x7f\xc4\x50\x9b\xa3\x70\x20\xed\x6a\xc8\xf3\xa0\xa3\x6d\x90\xb8\x47\xa9\x01\x85\x46\x5d\x70\xd4\x81\x0d\xf9\x40\xc2\xa6\x29\xa7\x1f\xa8\x09\xd5\xc2\x4d\x35\xcb\x8e\xa3\xf3\x18\x62\xea\x74\x58\x5e\xb4\xc7\xe6\xf8\x96\x37\xa0\xf7\x97\xcd\xbe\x42\x7e\xd2\x01\xad\x76\xf3\x82\x41\x0d\x2e\x4e\xc4\xe7\xae\x0b\xe9\xb6\xcf\x77\x0a\xda\x8e\x86\x2c\xb9\xe0\xa1\x5e\xe4\x7b\x97\xab\x87\x8f\xdd\xed\x28\xf4\xa4\x39\xfa\x29\x6b\x73\xba\x53\xb6\x69\xdd\x75\xe9\xf3\xda\x83\xa0\xf3\xa8\xd2\xdd\xbc\x40\x6b\x9d\xb3\x57\x04\xf5\x4f\xc2\x29\xfa\x50\x59\xcc\x0d\xf5\x25\x35\x7d\x40\x4b\x75\xba\xab\xe3\xc5\x38\xde\x13\xd7\x5b\xba\xfa\x54\xd4\x7f\x52\xd4\x9f\x00\x00\x00\xff\xff\xc0\x2d\x80\x39\x36\x06\x00\x00")

func typeMeal_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMeal_recordGraphql,
		"type/meal_record.graphql",
	)
}

func typeMeal_recordGraphql() (*asset, error) {
	bytes, err := typeMeal_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/meal_record.graphql", size: 1590, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x67, 0x33, 0xa3, 0x8f, 0x30, 0x7d, 0xcf, 0x4a, 0x1e, 0x52, 0x6, 0xef, 0x61, 0x62, 0x6c, 0x46, 0x44, 0xee, 0x87, 0xe, 0x2b, 0x8e, 0x2f, 0x3, 0x9, 0xc0, 0x3, 0x29, 0xeb, 0x12, 0x23, 0x54}}
	return a, nil
}

var _typeMeasurementGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xcf\x31\x6b\x03\x31\x0c\x05\xe0\xdd\xbf\xe2\x85\xfc\x8b\x8c\x25\x4b\x87\x4e\x09\xdd\x8d\xef\x25\x11\xd8\x72\x90\xe4\x2b\x47\xe9\x7f\x2f\xb9\xa9\xee\x24\xf4\x21\x3d\x78\xe9\x88\xc6\xec\xc3\xd8\xa8\x81\x85\x5e\x4c\x56\x3a\x32\x5c\xf4\x5e\x89\x35\xd7\x41\xf4\x1b\x16\xae\x52\x38\x9d\x8b\x22\xa4\x11\x4e\x13\x3a\x6e\xdd\x5a\x0e\x7c\x3d\xa4\x3c\x90\x8e\x10\x87\x47\x37\x2e\x10\x0d\x9a\xe6\x5a\xb7\xd7\xcf\xf5\x82\xf3\x5b\x8a\xed\x49\x7c\xfc\x49\xfb\x4e\x00\x20\xcb\x09\x97\x30\xd1\xfb\x61\xdf\x4b\x57\x1f\x8d\xf6\x7e\x9e\xdd\xfb\xb0\xc2\xff\xda\x18\x26\xe5\xba\x3d\x39\xfb\x50\x89\x59\xf6\x5e\x27\x7c\xbe\xc6\x21\xfd\xfc\x06\x00\x00\xff\xff\xc1\x88\xd5\x74\x09\x01\x00\x00")

func typeMeasurementGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMeasurementGraphql,
		"type/measurement.graphql",
	)
}

func typeMeasurementGraphql() (*asset, error) {
	bytes, err := typeMeasurementGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/measurement.graphql", size: 265, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe2, 0xac, 0x91, 0xd8, 0xdc, 0x91, 0x37, 0xea, 0xb7, 0x9e, 0x55, 0xce, 0x4, 0x30, 0xdb, 0x8, 0xd9, 0x55, 0x82, 0xe3, 0x96, 0xe5, 0x54, 0x40, 0x5f, 0x4c, 0x4f, 0xd3, 0xc1, 0xe5, 0xf0, 0xd7}}
	return a, nil
}

var _typeMedicationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\x41\x8f\xe3\x36\x0f\xbd\xe7\x57\xf0\xc3\x1e\xbe\x4b\xb0\xbd\xfb\xe6\x71\x32\x5d\x17\x89\x03\x38\xce\xb6\x40\x51\x0c\x34\x12\xed\x08\x6b\x51\xae\x44\xcd\x6c\x50\xf4\xbf\x17\xb2\x9c\x4c\xe2\x49\xb7\x87\xee\xa5\x47\xf3\x51\x7c\x4f\x8f\x14\x0d\x48\xc1\xc0\x16\x95\x96\x82\xb5\xa5\x3d\x0b\x0e\x1e\xfe\x58\x00\xc0\x76\xbd\x2a\x8b\xbc\x29\x77\xd5\xd3\xbe\xc9\x9b\xc3\xfe\x29\x2f\x9a\xf2\xf3\x7a\x79\x1f\x2c\xab\x6f\xc2\xbb\xea\xd3\x6e\xb3\x5a\xfc\xb9\x58\x8c\x94\xb9\x32\x9a\xb4\x67\x37\xd2\xd6\x36\x30\x26\x56\xd8\xd5\xf9\xe6\x29\x5f\x6d\xcb\xaa\xdc\x37\xf5\x58\x63\x2c\x09\x65\xf5\xd3\xba\xb8\xfe\x6c\xea\x7c\x9b\xef\x8b\xc3\x66\x5d\x3f\xcd\xc0\xfd\xe1\xa1\x38\x34\xeb\x6a\x37\x0a\x9b\x9d\xfb\x94\x6f\xf2\x9b\xd4\x4d\x59\xfd\x78\x78\xc7\x1a\xb5\xf2\x69\x40\x58\x59\x2f\xba\xb3\xbc\x0f\xad\x75\x26\x83\x3d\x3b\x4d\xdd\xff\xc6\x90\x56\xb7\xdf\x2f\xa2\x0f\x98\x41\x49\x9c\xbe\x5b\x87\xbf\x07\x24\x79\xba\x4d\x0b\xa4\xf9\x2d\x72\x26\xdb\xb3\x43\xea\xf8\x38\xd1\xcd\x6b\x53\x30\xcf\xe8\xae\x8a\xbf\xab\xa2\x69\x08\x7c\xd5\xd2\xc2\xa1\xb8\x98\x2b\xad\xc2\x0c\x0a\xab\xc4\x73\x8f\x85\x25\x89\x03\x97\xe3\x81\x11\x36\xb3\x41\xc8\xde\x8d\x46\x22\x1d\x9c\x55\x41\x72\x25\x0c\xce\xac\xf0\xbb\x17\x74\xcd\x11\x0b\x1b\x88\xa3\xd0\x07\x6b\x7b\x14\x94\x60\x17\xfb\x9c\xdd\x6b\xfe\x74\x9c\x3c\xbb\x20\x63\xd4\xdf\x16\x56\x63\x0f\x3e\xcf\x9c\x4d\xd1\xc7\xfb\xfe\x26\xf0\x70\xe3\xcf\x28\x02\x5b\xdd\xf7\xbe\x46\x23\x34\x69\xea\xc6\x7a\xd7\x48\x63\x59\xf4\x6f\x51\x3f\x75\xa4\x9a\x5b\x7f\x06\xde\x53\x78\x16\x8e\x33\x68\xb4\x99\x2e\x86\xa4\xd2\xe7\xa5\xcf\x6f\xc6\x9e\x07\x0b\xa4\x35\x9a\x3a\x68\x9d\x35\x30\x38\xf4\xd2\xe9\x61\x4c\xb0\x0e\x30\xba\x89\x0a\x9e\x4f\xa0\xac\x64\xeb\x7e\x80\x41\xb0\xc6\x49\xe3\x7c\x4c\xee\xf5\xf9\xbf\xd1\xe2\x6c\x7a\x6e\xff\xaa\x55\xd9\xe5\x19\xfd\x53\x3b\xee\x58\xff\x85\xec\x6b\x8f\xaa\x43\xe8\x9c\x18\x52\x05\x23\x28\xb4\x42\x72\x70\xf1\xc2\x49\x75\x7a\x8f\x4a\x16\xa3\xd7\x57\xb1\x0f\xd0\x1c\x11\xea\xaf\xc5\xa1\x04\xe5\x42\x07\x5a\x21\xb1\x6e\x35\xba\xc4\x50\xff\x52\xed\xea\xed\xc7\x74\x91\xaf\x32\xe8\x9b\xe3\xd2\x1a\x63\xe9\xc1\x09\x52\xd7\xee\x4f\xa5\x73\x3a\xc5\xe1\x90\x22\x44\x0b\x97\xd0\x05\xad\x04\x49\x5c\x82\xb4\xc4\x4e\x68\x3a\x77\x73\x09\xc8\xf2\x23\x38\xec\x05\xa3\x02\xb6\x31\xc3\x07\x33\xcd\x54\x0b\xa2\x97\xf6\x68\x7b\x78\x3d\xea\x1e\x81\xc5\x97\x68\x01\x1f\xb5\x1f\x55\x27\x79\x53\xce\xcf\xc2\x25\xff\xbf\x9b\x96\x0b\xcf\xff\x3d\x04\x8f\x71\xb0\x9f\x1d\x0a\xcf\x2d\xa2\x8a\x42\x8c\xe5\x23\x3a\x9f\x64\x24\xe8\x31\x41\xdf\x5f\xcc\xcc\x18\x3f\xa0\xd4\xad\x96\xd0\x5a\xab\xfc\x37\xfd\x89\x19\xf7\xf5\x08\x3a\xc1\xe3\x2a\x87\xd7\x84\x8e\xd1\xd7\xbf\x55\xae\x29\xfe\x57\xd2\x3e\xb8\x12\x66\x5f\xd0\x29\xeb\x11\x2c\x81\x18\x69\x97\xa0\x49\xf6\x61\xb4\xc8\xeb\x8e\x7c\xdc\x0e\xfe\x64\x06\xb6\xc6\x2f\x81\xe3\xb6\x37\x48\xec\x97\x70\x99\x6d\x62\x21\xf9\x86\xa2\x8d\x2b\xc5\xa0\xeb\xe2\xda\x04\x87\x7e\xb0\xe4\x31\x5d\xe9\xcc\x39\x53\xc9\x47\x9c\x46\x13\xbc\x56\x08\xd8\xb6\x28\xd9\x47\xbf\x2e\x9e\xa4\xd7\xa6\x15\xae\x13\x98\xc1\xaf\xa9\xc6\x6f\x71\xef\x2d\x16\x7f\x05\x00\x00\xff\xff\x74\x19\x59\x38\x6f\x08\x00\x00")

func typeMedicationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMedicationGraphql,
		"type/medication.graphql",
	)
}

func typeMedicationGraphql() (*asset, error) {
	bytes, err := typeMedicationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/medication.graphql", size: 2159, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xae, 0x3f, 0xcd, 0x99, 0xe8, 0x6f, 0x47, 0x98, 0xfc, 0x85, 0x67, 0x19, 0x24, 0x9a, 0xe8, 0xbd, 0x41, 0x93, 0x60, 0x8f, 0x8a, 0xc2, 0xab, 0x54, 0x7b, 0x11, 0x85, 0xcb, 0xe2, 0xc0, 0x58, 0x23}}
	return a, nil
}

var _typeMedication_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x52\xc1\x4e\x2b\x31\x0c\xbc\xe7\x2b\xbc\x7a\x7f\xb1\xc7\x07\x02\x2a\x81\x2a\x95\xde\x50\x0f\x21\xeb\xb6\x96\xba\x49\xe4\x64\x11\xa5\xea\xbf\xa3\x75\xd2\xee\xa6\xb4\x50\x89\x03\xc7\xcc\x8c\xed\x8c\x3d\x4a\x91\xf5\x5d\x84\x27\x6c\xc8\xe8\x48\xce\xce\xd0\x38\x6e\x6e\x18\x75\x44\xd8\x29\x00\x80\x7f\x70\xc7\xae\x85\x35\xea\x4d\x5c\x03\x8b\x40\x08\xab\x5b\xac\xe1\x39\x32\xd9\x55\x25\x88\x71\x36\x74\x2d\xf2\xe4\xb6\xc4\x1b\x0c\x86\xc9\xf7\x03\x0e\x84\xe0\xce\x98\x8e\x19\x9b\x1a\xe6\xd4\x62\xd2\x06\xd7\xb1\x19\xfa\x02\x24\x25\xaf\xb4\xa5\x0f\x3d\x6e\x91\xa9\x54\x90\x3e\x2e\x83\x8b\xf7\xa4\x37\x28\x3a\xc6\x25\x32\x5a\x83\xa1\x86\x97\xd9\xe1\xf1\x20\xb6\xb2\xba\xd7\x56\x0b\x51\x6f\x9c\xc9\xc3\xee\xd1\x3d\xe6\x87\x08\x40\xe5\xb5\xb4\xc7\xad\x09\xe0\x59\x5c\xbe\x62\xf3\x7f\x5b\xb8\x6c\x28\x78\xb4\x81\xec\x6a\x7a\xc6\xc5\x49\xed\xd4\xa6\x65\x08\x8c\xef\x9e\x38\xab\x8f\xe0\x78\xf0\xa8\x50\xb8\x81\xe9\x4d\x0e\x67\x4d\x07\xad\x16\x6a\xaf\x54\xdc\x7a\xfc\x72\x71\xa0\xd6\x6f\xb0\x45\x1b\x03\x8c\x57\x02\xbb\x83\xdb\xe2\xfe\x10\x3c\x1a\x5a\x92\x11\x92\x9a\xeb\x62\xe0\x19\xdf\xc8\x75\x21\xb5\x2e\x16\x90\xda\xce\xb7\x1e\xeb\x62\x7e\x8f\xa4\xe2\xc8\xda\x06\x6d\xfa\x2f\x9f\x91\x95\x64\x75\x21\x9f\xbf\xca\x61\x8e\x9b\x91\x55\x16\xd2\x73\xe1\xbc\x22\x9a\xe3\x76\x27\x91\xf9\x39\xab\xdf\xc5\xf4\x0f\x03\x9a\x27\x0f\xf2\xd3\x4f\x5c\x4a\x68\xb5\x50\x6a\xff\x19\x00\x00\xff\xff\x23\x60\x46\x5d\x90\x04\x00\x00")

func typeMedication_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMedication_recordGraphql,
		"type/medication_record.graphql",
	)
}

func typeMedication_recordGraphql() (*asset, error) {
	bytes, err := typeMedication_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/medication_record.graphql", size: 1168, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x13, 0x6e, 0x56, 0xfc, 0x9d, 0x41, 0x35, 0xb, 0x2b, 0x2b, 0xb, 0xa3, 0xe7, 0x4b, 0xa7, 0x4f, 0x2c, 0x7b, 0x80, 0x49, 0x74, 0x64, 0x2b, 0xb7, 0x8d, 0x5a, 0x56, 0xed, 0x6a, 0x55, 0x77}}
	return a, nil
}

var _typeMessageGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\xb1\x0a\xc2\x30\x10\x86\xf7\x3c\xc5\x15\xdf\x22\x5b\x37\x1d\x5c\xaa\x9b\x38\x84\xeb\xb5\x0d\x98\x5c\xb9\x5e\x07\x11\xdf\x5d\x4c\x30\x28\xd8\x22\x8e\x7f\xbe\x3f\x3f\xf7\x99\x0d\xec\x69\x9a\x5c\x4f\xd0\xb1\x00\x72\x08\x73\xf4\xe8\xd4\x73\x34\x3e\x8e\xb3\xbe\xf8\x2e\x85\x9b\x01\x00\xe8\x84\x83\x85\x86\x3a\x12\x8a\x48\x35\x2a\x4b\xe2\x55\xc2\xca\x2b\x30\xe4\x39\x0b\x07\x15\x1f\xfb\xfc\xe8\x54\x1d\x0e\x81\xa2\x4e\x16\x4e\x75\x49\xf9\xdf\x39\x75\x84\x90\xa5\x7d\xf2\xb2\xbd\x25\x77\xd1\xa1\x49\xe0\xbd\x8a\x42\x4e\xa9\xad\xd5\xc2\xd1\x07\xaa\xcc\xdd\xac\x8a\xea\x75\xa4\x82\xb3\xa2\x6f\x3f\x2f\xfc\xa6\xbc\x64\xfb\x87\xe8\x6f\x8e\x8b\x7a\x8f\x00\x00\x00\xff\xff\x04\x50\x34\x45\xc7\x01\x00\x00")

func typeMessageGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMessageGraphql,
		"type/message.graphql",
	)
}

func typeMessageGraphql() (*asset, error) {
	bytes, err := typeMessageGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/message.graphql", size: 455, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5a, 0x7a, 0xbc, 0x81, 0xbf, 0x74, 0x40, 0xcf, 0x20, 0xf3, 0xd1, 0xaf, 0xd2, 0x62, 0xad, 0xb3, 0xbb, 0x46, 0x3d, 0xa1, 0x16, 0xbf, 0x37, 0x6a, 0xe, 0x3b, 0x93, 0x87, 0xc, 0xc0, 0xca, 0xd9}}
	return a, nil
}

var _typeMetadataGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcc\x2b\x28\x2d\x51\x70\x2c\x29\x29\xca\x4c\x2a\x2d\x49\xf5\x04\x73\xab\xb9\x14\x14\x14\xf2\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\x15\x41\x02\x65\x89\x39\xa5\xa9\x56\x0a\x61\x20\x0a\xac\x4e\x91\xab\x96\x8b\x4b\x59\x21\x2d\xbf\x48\x21\x31\xaf\x12\xac\x01\xa2\x88\xab\xa4\xb2\x20\x15\x61\x28\xc4\xbc\xcc\x14\x14\xd3\xf0\x1a\x0f\x36\x19\xe2\x34\xdf\xd4\x92\x44\x97\xc4\x92\x44\x24\x97\x61\xea\x85\x69\x46\x16\x4a\x84\x59\x5f\x6c\xa5\x10\x8d\x62\x8a\x62\x2c\xc8\x78\xb0\x1b\x61\xe2\x50\x83\xd1\xdc\x48\x81\x45\x60\x3b\x00\x01\x00\x00\xff\xff\xdc\xc1\x29\xde\x5d\x01\x00\x00")

func typeMetadataGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMetadataGraphql,
		"type/metadata.graphql",
	)
}

func typeMetadataGraphql() (*asset, error) {
	bytes, err := typeMetadataGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/metadata.graphql", size: 349, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x36, 0xf8, 0x63, 0xb5, 0x1d, 0x5, 0xd7, 0x85, 0x49, 0xa2, 0xa9, 0x36, 0x7b, 0x43, 0x9c, 0x64, 0x8d, 0x36, 0xd3, 0xbb, 0x10, 0x6b, 0xfc, 0x29, 0xcd, 0xc3, 0x24, 0x44, 0xb3, 0x70, 0xed, 0xbe}}
	return a, nil
}

var _typeMolecularSequenceRecordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\x31\x6f\xdb\x3a\x10\xde\xfd\x2b\xce\xc8\x90\xe5\xbd\x2c\x6f\x78\x80\x37\xc7\x4d\x5d\x03\x6d\x07\x3b\xe8\x52\x64\xa0\xa9\xb3\x44\x84\x22\xd5\x23\x65\x37\x2d\xfa\xdf\x8b\x23\x25\x4a\x8a\x65\xb7\x69\xba\xb4\x48\x26\x93\xbc\xfb\xee\x78\xdf\xf7\x51\x99\x28\x53\xd5\x1e\x3e\x08\x52\xc2\xf8\x55\x58\x7c\x9d\x00\xc0\x05\xbc\x5f\x5c\xaf\x40\x48\x89\xce\x29\x6b\xc0\xd4\xe5\x16\x09\x2c\x81\xf5\x05\x12\xb8\x5a\x16\x60\x29\x87\x8a\xec\x5e\x65\x98\x35\x11\x9c\x9c\xb2\x56\xaf\x66\xb0\xf1\xa4\x4c\x3e\x89\xa0\x1b\x2f\xc8\x43\x65\x9d\xf2\x0c\x6a\x77\xe0\x0b\x84\x7d\x2c\x0f\xd6\x84\x25\xe1\x0e\x09\x8d\x44\x70\xf8\xa9\xe6\x1f\x9c\xec\x38\x75\x06\x2b\xe3\x1b\xac\x1b\x93\xfd\x1a\x12\x9a\xac\x8f\x33\xd7\x1a\x35\x82\x2f\x84\x87\x83\x70\x60\xb7\x0e\x69\x8f\x19\x9f\xb6\xbf\x63\x4c\x7b\x19\x18\x66\xaa\x73\xc5\xd2\xee\x38\xc4\xcd\x67\x8f\x86\xa7\xb7\x58\x2d\xe7\x6b\x70\xf1\x70\x67\x09\x84\x56\xb9\xe1\x05\x63\xb7\x88\x70\x50\xbe\xe8\x55\xda\x0a\x87\x8e\x91\x64\x2e\xa8\xc3\xfe\x36\x99\x5c\xb4\xa4\x72\x7b\xa9\x21\xff\x50\x61\x3a\x08\x44\xab\xac\x4d\x9b\x4e\x5e\x88\xff\x0b\x88\x8f\x8e\x5e\xb7\x91\x9b\x06\xa0\xe7\x6d\xb8\x80\xdb\x02\x61\x89\xc6\x96\x08\xd7\xb5\xd2\x19\xd4\x0e\xb3\x50\x3d\x95\xf8\x07\x76\x56\x6b\x7b\x60\xdc\xe5\x7a\x51\xc0\x36\x04\xee\x91\x98\x60\x07\x78\x95\x5f\xc1\x65\x38\xf9\xef\xff\xcb\x80\x9b\x07\xc4\x00\x38\x14\xd5\xf3\x54\x35\x26\x2b\x68\x71\xc7\x85\x75\x50\x26\xb3\x87\xf3\x6a\x68\x82\x36\x49\x5e\x09\x73\x4c\x60\x4f\x40\xbc\x69\x64\x96\xf0\xe6\x2d\xbd\xde\x02\x61\x45\xe8\xd0\xf8\x53\x18\xd4\x63\x2e\xde\x35\xdd\x99\xff\xa2\xb7\xe7\x9d\x30\x02\x73\xc2\x75\x79\xd1\xe4\x47\x02\x68\xb8\x7f\xec\xf7\x17\x31\xfc\xa1\x62\xe8\xbc\xfe\xce\x6a\x94\xb5\x16\xd4\x52\xbd\x46\x69\x29\x5b\x10\x0a\x8f\xc9\xf2\xaf\xc9\x96\x50\xa0\xd0\xe1\x1d\xe1\x80\x70\x60\x44\x89\x1d\x3f\xbc\x23\xad\x71\x75\x89\xd4\xcd\x37\xee\x67\xe8\x24\xa9\x8a\xe7\x90\x1e\x77\xde\xb7\x52\xd6\x44\x98\xcd\xe0\x56\x95\x18\x63\x9d\xad\x49\x76\xb8\x00\x31\x92\x72\x61\xd4\x17\xd1\x87\x68\x8e\x62\x42\x6c\x3c\x14\x1e\xac\xc3\xe3\x35\x1c\x88\x9b\xc1\xc7\xa4\xf1\x37\xe1\x5a\x4d\x34\xc7\x4e\xef\x42\xb4\xb6\xb2\x29\xb6\x44\xfb\xb6\x59\x44\xb0\x66\x2a\x69\x76\xcd\x4c\xa0\x63\xe9\xb4\xc1\x1e\x33\x33\x3b\xf1\xdc\xb6\x45\xc6\xbe\xc4\x7c\xd2\x7c\xb4\xf8\x2a\xfd\xff\xc0\xa6\x77\x49\xcf\x6d\x0f\xa3\xdf\xa8\xb4\x08\x2d\x0c\xbe\xfd\x47\x92\x00\xe5\x98\x40\x95\x1b\xcc\x58\x79\x85\xd5\x19\x5b\x14\xbd\x92\xa9\x29\xc7\x1d\x6e\xb5\x95\xf7\x7c\x5b\x8d\x7b\x6e\xda\x5b\x10\x92\xe7\x26\xb6\x1a\x41\x6a\x65\x94\x14\x1a\x32\x94\x8a\x5d\xf8\x6f\x29\xee\x95\xc9\xaf\xe2\xab\x73\x42\x8a\xa0\xca\x4a\x63\x89\xc6\x3b\xe8\x73\x95\xc4\x39\xd0\x25\xb8\x0a\xa5\xda\x29\x79\xf4\x60\x9d\x93\x67\x45\xb8\x57\xb6\x76\x11\x79\xa0\xd0\x08\x7b\xfb\x50\xe1\x6c\x50\x9e\x77\x62\xb2\x27\x61\x5c\xbc\xe6\x48\xd8\xf0\x70\x7a\xc2\x37\xcf\xf2\x47\x63\x03\x19\x3c\x3b\x08\x1d\x33\xcd\x4f\x58\xa6\x0f\x77\xfd\xf0\x68\x1c\x3f\xf2\xd0\x39\xfb\x1c\x39\xa7\xa5\x7a\xf2\x9b\xac\xf3\x74\xd7\x3c\xd3\x30\xdf\x03\x00\x00\xff\xff\xd8\x58\xb0\x87\x05\x0d\x00\x00")

func typeMolecularSequenceRecordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeMolecularSequenceRecordGraphql,
		"type/molecular-sequence-record.graphql",
	)
}

func typeMolecularSequenceRecordGraphql() (*asset, error) {
	bytes, err := typeMolecularSequenceRecordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/molecular-sequence-record.graphql", size: 3333, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xab, 0x84, 0xbb, 0xf3, 0x8, 0xe9, 0x88, 0x1e, 0x2e, 0x6b, 0xbd, 0x9e, 0x7, 0x2, 0xca, 0xb0, 0x17, 0x9d, 0x4e, 0xbb, 0x59, 0xa, 0x7b, 0xdb, 0xea, 0x62, 0xda, 0x69, 0x3b, 0x61, 0x8a, 0xab}}
	return a, nil
}

var _typeNotificationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x91\xc1\x4a\xc4\x30\x10\x86\xef\x7d\x8a\xe9\x6b\xe4\xb6\xb4\x55\x82\xd2\x82\x5b\xf4\x20\x22\x21\x9d\x5d\x06\xe9\x34\x24\x93\x43\x11\xdf\x5d\x9a\x4d\x95\x80\x7a\x90\xbd\x95\x7f\x66\xbe\xe9\x37\xa9\x90\xe3\x0c\xfd\x22\x74\x22\x6b\x84\x16\x3e\x8a\x91\x18\xe0\xbd\x02\x00\x38\x34\xa3\x7e\xec\x5e\xfb\x61\xd4\x37\xba\x39\x8c\x7a\xe8\x73\x7e\xd7\x0f\x4f\xf7\x5d\x7b\xdb\xb5\x65\xf5\xa3\xaa\x88\x5d\x94\x82\xd9\x78\x34\x82\x99\xc9\x66\x46\x05\x47\xf1\xc4\xe7\x3a\x25\xd6\x08\x9e\x17\xbf\x96\xe9\x84\xc1\x7a\x72\xdb\xfc\x5e\xb8\x74\x27\xd8\xa4\x60\xa4\x19\x33\x60\xe1\x10\x67\xf4\xba\x2d\x11\x1e\x4f\xe8\x91\x2d\x2a\x78\xd8\x3f\x3b\x16\x92\x55\x6f\xff\x78\x69\x32\xf6\x6d\x48\x5b\x82\x82\xe7\x3c\xfd\x52\x6f\x22\xb2\x3a\x2c\x3c\xb2\x01\x4d\x5f\x6b\xe0\x2a\x4a\x21\xdd\x5c\xfd\xf0\x0e\xf5\x6f\xca\xd1\x4d\xdf\xd1\x3f\x8f\xf0\xb7\xff\x67\x00\x00\x00\xff\xff\x45\x9d\xcd\xa7\x1b\x02\x00\x00")

func typeNotificationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeNotificationGraphql,
		"type/notification.graphql",
	)
}

func typeNotificationGraphql() (*asset, error) {
	bytes, err := typeNotificationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/notification.graphql", size: 539, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8a, 0x5e, 0x71, 0x45, 0x78, 0x24, 0x92, 0xb8, 0x2f, 0x3b, 0x82, 0xeb, 0xc2, 0x92, 0x26, 0x19, 0x4e, 0x52, 0x40, 0x95, 0x78, 0xa3, 0x1f, 0x67, 0xfe, 0xda, 0x23, 0x5c, 0xae, 0xf7, 0xfb, 0xa}}
	return a, nil
}

var _typeNutritionorder_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x94\x6d\x6f\x9b\x30\x10\xc7\xdf\xf3\x29\x1c\xed\x5b\xe4\x1d\x03\xa7\x41\xa3\x90\x39\xa4\xd2\x54\x4d\x15\xb3\x2f\xad\x25\xb0\xd1\x61\x57\xcd\xaa\x7e\xf7\x09\x9b\xa4\xb8\xa1\x5d\xa7\xad\xda\xcb\xbb\xfb\x71\x4f\xbe\x3f\x11\x28\xdb\x92\xc2\x1a\x94\x46\x6a\x55\xa2\x00\xdc\x9a\xda\xd8\x9e\x3c\x46\x84\x90\x62\x57\xb1\xac\x2c\x4a\x96\x52\x76\xb3\x61\xe5\xa6\xdc\xd2\xf4\x2c\x90\xb2\x78\x55\x9d\xe3\x79\x5c\x14\x33\x34\xa3\x5f\x77\x74\x5b\xcd\x44\xe2\xa4\xca\xae\xe8\x99\xbb\x2c\xd6\x65\x7e\x4e\x27\xe5\xe5\x26\xa7\x73\x79\x92\xb8\x48\x68\x9e\xcf\x44\x68\x51\x51\x46\xd3\xac\xa0\x8c\x95\x2c\x7a\x8a\xfc\x02\x52\x09\xc6\x0f\x9c\x66\xb4\xba\xb9\xa2\x17\xb4\x8a\x59\x16\x17\x27\x57\x1a\x67\xec\xdb\xcd\x8a\x51\x7a\x72\x15\xbb\x2a\x74\x5c\xe4\xbb\x8a\x16\xa1\x6f\x48\xf5\x9c\x65\x1d\xe7\x71\x7e\xb2\xbe\x94\xdb\x35\x75\x4d\x48\xd5\x59\xf3\xe2\x19\x18\x70\x8d\x22\x41\xa8\x0d\xf8\xde\xc8\x27\xb2\x42\xdd\x92\x3b\xa8\x1b\x73\x47\xd0\x01\x2e\xa0\xea\x16\x96\x64\x6b\x50\xaa\xdb\x85\xf3\x70\xad\x7a\xdb\x02\x66\x69\xe8\x17\xd0\x73\x94\xdd\x50\xe5\x18\x70\x7e\xcd\xb9\x45\x04\xb1\x24\x95\x6c\xc1\xb3\xbd\xb6\xc8\x9f\xf3\x12\xe2\x49\xbc\xad\x95\xfc\x59\x4f\x53\x8c\x21\xff\x81\x6f\xdc\x15\x0e\xec\x6c\x18\xd2\x71\x08\x7b\x40\x50\x1c\xfa\x25\xb9\x66\x47\x63\xed\xc6\x1a\xe9\x81\x5d\x7c\x77\x74\xa3\xf9\x58\xec\x02\x74\x3e\x1a\x0e\x20\xd1\xb8\x16\x75\xdc\x1c\xd1\xc3\xea\xa6\xab\xe9\xdd\x35\x2f\x67\x6f\x7c\x31\x0e\x24\x00\x01\x97\xe4\xd4\x49\xcc\x8d\x46\xdf\x82\x23\x3a\xd4\xc2\x72\x33\x21\xa8\x32\xd2\x1c\x26\x48\xdd\x34\x80\xb7\x87\x4c\x19\xdd\x78\xe4\x3d\xa3\xed\xb5\x16\x9b\xd3\x36\x2e\xb5\x90\x7b\x39\x74\x72\x3d\x1c\xe4\xc8\xc0\x03\x6f\xac\x80\x95\xd6\x62\x02\x8c\x6f\xf2\x2a\x92\x68\x31\x74\x90\x68\x51\xff\x68\x20\xd1\x8a\x43\x67\xa6\xa5\x51\x5b\x03\xe5\x3e\x16\xad\x54\xb2\x37\x38\xae\x38\xb4\xd9\x00\x2d\x5e\xe7\x7d\x95\x99\x22\xfe\x1e\xda\xfa\xe1\x4a\x37\xb6\x85\x4a\xa7\xd0\xc8\xfb\xa1\xf3\x4c\xf9\x1b\xa8\x83\x44\x99\xea\x0d\x5a\x1e\x9c\xe5\x53\x14\x99\x43\x07\xb3\xb2\x20\xb2\xed\x1a\x68\x41\x99\x9e\x4c\x97\x4b\x1e\x8f\x27\x11\x88\x84\xf4\x1d\x70\xb9\x97\xdc\x05\xa5\x78\x9f\x56\x3a\x84\x7b\xa9\x6d\xef\x53\x07\x72\xf1\x69\xab\x43\x07\xcb\xa0\xfe\xe0\xf1\x1f\x1b\xac\x55\x5f\xbb\x89\x66\xb0\x30\xb8\x78\x45\xc4\x7f\x25\xd6\x51\x93\xdc\xfd\x40\x02\x74\x4e\xc1\xef\xd0\xef\x34\xdd\xe7\xc3\x8b\x75\xfc\x4e\xd0\x6f\x69\xf9\x23\x55\xfc\xb6\x80\xff\x54\xbb\xff\x47\xb6\x1f\xad\xd8\x7f\xa1\xd5\x5f\x01\x00\x00\xff\xff\xbf\x54\x5b\xda\x49\x08\x00\x00")

func typeNutritionorder_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeNutritionorder_recordGraphql,
		"type/nutritionorder_record.graphql",
	)
}

func typeNutritionorder_recordGraphql() (*asset, error) {
	bytes, err := typeNutritionorder_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/nutritionorder_record.graphql", size: 2121, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x3a, 0x2, 0xab, 0xdc, 0x27, 0x3c, 0xa8, 0xb8, 0xad, 0x47, 0x73, 0xea, 0x70, 0xbc, 0xef, 0x30, 0x2c, 0xef, 0x45, 0x4f, 0x50, 0xcb, 0xd5, 0xfd, 0x86, 0xe9, 0x96, 0x57, 0xe3, 0x48, 0xb9, 0x7e}}
	return a, nil
}

var _typeObservation_collection_definitionGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\xc1\x4e\xf3\x30\x0c\xc7\xef\x7d\x0a\x4f\x7b\x8b\xde\x3e\xf5\x43\x62\xd2\x10\x30\xb8\x21\x0e\x6e\xea\xb5\x91\xd2\x24\x24\x0e\x68\x42\xbc\x3b\x4a\xd6\x76\xab\x58\xa1\x03\xc1\xa9\xc9\xdf\x76\xec\xfc\xf2\xef\x12\x3c\xa1\x13\x0d\x3c\x05\x72\x3b\xb0\xe8\xb0\x85\x8a\xb6\x52\x4b\x96\x46\x43\x26\xb5\x0d\x0c\xd7\xa5\x27\xf7\x8c\x51\xfa\x3f\x04\x0b\xa3\x14\x89\xb8\xba\x8d\xc5\x37\xa9\xf6\x35\x03\x00\xd0\xd8\x52\x0e\x77\xec\xa4\xae\x93\x60\x43\xa9\xa4\x6f\xc8\xf5\x2a\x24\x59\xa1\xae\x03\xd6\x94\xc3\xba\x5b\x41\xf6\x96\x65\x4b\x28\x94\xd4\x52\xa0\x02\x73\xe8\x0c\x15\x32\x82\x18\xba\x02\x53\x6b\x15\x32\xf9\x79\x53\xae\x52\xd2\xc7\x01\x17\xdd\x84\xce\x1a\x4f\xe3\xf9\x2a\xf2\xc2\x49\x1b\xab\xc7\x81\x89\xfb\x78\x13\x9c\x88\x67\xa4\x6f\x6a\x38\x71\xcf\x7d\x53\x61\x2a\xca\xa1\x30\x15\x96\x8a\x0a\xa3\x05\x59\xde\x8f\xb9\x3f\x0f\x99\x9d\x2c\x03\x93\xcf\xe1\xe1\x5f\xbf\x49\x19\x8b\xc7\x94\xd1\x12\xfa\xe0\xa8\x25\xcd\x31\xe7\xea\xb0\x3d\x20\xe8\xf3\xbf\x43\x96\x77\x96\xbe\x02\xdb\x31\x95\xd5\x98\xe8\x9f\x30\x3e\x1b\xef\x27\x5c\xcf\x40\xda\xd3\xbc\x40\xd1\x1c\x17\x74\x4e\x9c\x7e\x86\x49\xff\x05\x2d\x79\x50\xba\xbf\xc3\xbc\x90\x5b\xcb\x36\x06\x56\x9a\x3b\x35\x58\x7b\x42\x9d\x76\x52\x0a\x1f\x3d\xf6\xfd\xce\x52\x0e\x97\x84\x8a\x9b\x0d\x09\xe3\xaa\xa8\xcc\xb4\x9b\xa3\x2d\x39\xd2\x82\x36\xa8\xeb\x94\xb6\x19\x29\x83\xd5\xe0\x24\x9d\xe4\xa6\x93\x70\x66\x7b\xe8\x17\x38\xfd\x98\xd0\x4c\x38\x89\xcb\x7b\x00\x00\x00\xff\xff\x68\x48\x90\x90\x72\x05\x00\x00")

func typeObservation_collection_definitionGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeObservation_collection_definitionGraphql,
		"type/observation_collection_definition.graphql",
	)
}

func typeObservation_collection_definitionGraphql() (*asset, error) {
	bytes, err := typeObservation_collection_definitionGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/observation_collection_definition.graphql", size: 1394, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x72, 0x2d, 0x8b, 0x2d, 0x16, 0x2f, 0x44, 0x12, 0xb2, 0xa2, 0x8c, 0x29, 0x49, 0x37, 0x17, 0x9d, 0x6e, 0x87, 0xe5, 0xf9, 0xeb, 0xd0, 0xb9, 0x4e, 0x2d, 0x22, 0x2f, 0xbd, 0x87, 0xb7, 0x1, 0x28}}
	return a, nil
}

var _typeObservation_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x57\xcd\x6e\x23\xb9\x11\xbe\xfb\x29\x6a\x76\x0f\xbb\x03\xc8\xde\xbb\x6e\x1a\x59\x63\x0b\xb1\x25\xa3\xa5\x99\x64\x10\x2c\x06\x25\xb2\xa4\x26\x96\x4d\xf6\x16\xd9\x92\x3b\x41\xde\x25\xcf\x92\x27\x0b\x8a\x6c\xd9\x2d\x4b\xf2\x18\xc9\x00\x03\x1d\xd4\x4d\xd6\xff\xcf\x57\xd5\x17\x3f\xc3\x7c\x15\x88\xb7\x18\x8d\x77\x10\x22\xc6\x26\x5c\x90\x6b\xaa\xfe\xf9\x22\x1d\xc3\x3f\x2f\x00\x00\x7e\x86\x65\x49\x40\x8f\x26\x44\x72\x8a\xc0\xaf\x21\x96\x04\xbe\x27\xc6\x04\x60\xda\x08\x01\x93\x1e\xc0\xaa\x89\x42\xc2\x24\x17\xce\x03\x53\x68\x6c\x84\x96\x22\xe0\x16\x8d\xc5\x95\xa5\xab\x24\x7b\xfe\x61\x31\x29\x3e\x8f\x96\xd3\xf9\xec\x6b\x31\xb9\x99\x2e\x96\x93\x62\x72\x9d\xae\x3a\xdd\x0f\x4c\xd6\x54\xc6\x21\xb7\xff\xf9\xb7\xfc\x96\xa5\x09\x22\x17\x1d\x18\x67\xa2\x41\x0b\x9e\xc1\xb8\x48\x6c\xaa\xbe\x55\x43\xd0\x18\x11\x2a\x6c\x61\x45\x60\x9c\xf2\x55\x6d\x29\x92\x90\x37\x6e\x4b\x6c\xd6\x86\xf4\xb1\x1d\x0f\xc5\xe4\x6e\x7a\x3f\x9d\x8d\x8a\x2f\xd0\xb7\x64\x79\xec\xf4\x5e\xe4\xb1\x90\x8f\xd3\xd9\xe8\xee\x80\x7d\xd1\xac\x02\xfd\xd9\x90\x8b\x10\x3d\xac\xc8\xb8\x0d\x7c\x34\x0e\xed\xe0\x28\x9c\x25\x06\x58\x11\x39\xa8\xbc\x4e\x46\x42\x78\x62\xbe\x82\x1c\x00\xa7\x6c\xa3\x29\x40\x53\x6b\x8c\x14\x7e\x73\xb4\x03\xe3\xd6\x9e\xab\x2c\x03\x9d\x06\xe5\x99\x49\xc9\x6b\x38\xb6\x70\x74\x3f\x99\x5d\x4f\xae\xbf\x9f\x8d\xd1\xef\x15\x4a\x6e\x88\x39\xa5\x25\x31\x46\x0a\xb1\xab\x82\x63\x43\xc6\xf3\xa2\x98\x8c\x97\x2f\x4c\x39\x11\xed\xc6\x3d\x55\x0f\xac\x48\x61\x13\x28\x49\xaf\x08\x43\xc3\x54\x89\xd9\x3b\x94\x8a\x8b\x52\xd8\x1c\x49\x4b\xae\xe5\x75\x9f\x28\x7d\xac\x7d\x34\x1b\x4f\xee\xee\xbe\xa1\xfd\xc9\xdb\x9d\x89\xa5\x66\xdc\x39\x58\x7b\x6b\xfd\x4e\x22\x54\x33\x6d\x8d\x6f\x02\xac\x25\x54\xc0\x64\x09\x03\x75\x89\x22\x4b\x2a\xb2\x77\x46\x01\x93\xf2\xac\x21\x94\xbe\xb1\x1a\x1c\x6d\x89\xa1\xc4\xed\xbe\xb7\xb4\x04\xd9\x37\x9b\x12\x4c\x14\x77\x6b\x1f\x82\x11\x5f\x63\x89\x12\x3d\xb4\x97\x3b\xcf\x56\x83\x26\x65\x82\x24\x15\x76\xd2\x63\x2b\x0c\xe2\xa8\x03\x73\x22\xb8\x93\x59\xea\xa8\xaf\xd3\xd9\xd7\x49\x51\xcc\x8b\x23\x2f\xb1\x89\xa5\x67\x71\x23\xb4\x21\x52\x05\xda\x53\x0e\xe1\x1f\xce\xef\x60\x57\x1a\x55\xee\x5b\x3e\xa3\x05\x6c\xd1\x36\x14\x40\x35\xcc\xe4\xa2\x6d\x01\xeb\xda\x1a\x0a\xb0\xf6\x0c\xb1\x4c\x60\xf0\x67\x43\x21\x5e\xc1\xcc\x47\x1a\xe6\x40\x28\xef\x14\xd5\x31\x43\x42\x57\x5f\xd0\x88\xe9\xc2\xf6\x93\x17\xc0\xf8\x09\x2e\xc1\xbb\x27\x88\xb1\x29\x2c\x9d\x5a\x4a\x5d\x5f\x4b\x15\x55\xb9\xda\x44\x6d\xfb\x84\x36\x6f\xf2\xe4\x38\x40\x9f\x66\x7f\x99\xcd\xff\x3a\x83\x8b\x7f\x5d\xbc\xc0\x46\x85\x91\x36\x9e\x5b\xb8\x84\xb1\xc5\x10\xcc\xda\xa8\x7c\x23\xe6\xb5\x75\x32\xb3\x57\x24\x47\x28\x3a\xde\x0b\xe8\xe3\xe8\xc2\x2b\x81\xac\x5b\x13\xa2\x5c\xf5\xc8\x03\x68\x5a\x1b\x97\x6b\xba\xc6\x68\xc8\xc5\x5f\x02\x78\xa5\x9a\x3a\x11\x48\x1b\xd6\xc4\x41\x9e\xe0\x57\xba\xda\x5c\x81\x35\x6b\x0a\xb1\xb5\xf4\x7e\x00\x21\x49\x1e\xa4\xce\x27\xb7\x35\xec\x9d\xb4\x04\x5a\x28\x3b\x65\x72\x53\x12\xda\x58\x02\x9b\xf0\x07\xac\x51\x45\xcf\xe1\x44\x4f\x2c\x27\x37\xf3\xe2\xcb\xd7\xc5\x7c\x3c\x1d\xdd\xdd\x4e\x17\xcb\x79\xf1\xa5\x5f\x39\x63\x6b\x9c\x51\x02\xbd\x7d\xfb\xbb\x46\x4c\x0e\xac\xbc\x6e\x7f\x09\x52\x9c\x46\xc1\xba\x71\x19\x86\x20\x34\xaa\x04\x7c\xfe\x5f\x59\xef\x75\xca\xaa\x70\x0e\xc4\x3c\x8e\xc0\x18\x69\x20\x80\x51\x1b\xc6\x64\x7a\x3e\x29\xc9\x6c\xca\x38\x80\x5d\xf7\x2f\x4a\xa0\xc2\x20\x78\xa8\xe9\x31\xb1\x6b\x50\x86\x55\x53\xad\x89\x65\x5c\x0d\xa0\x6e\x6c\x20\xf0\x8f\xa6\xa2\xc8\xed\x00\x22\x55\x35\x31\xc6\xa4\x4f\x42\x92\xa4\x84\x86\xd7\xa8\x08\x90\x09\xcf\x07\xe4\xf3\x74\x39\xba\x5b\x4c\x6f\x66\x8b\x7e\x34\x0e\x92\xb8\x21\x27\xd2\x49\xc3\xaa\x05\x53\xe1\xc6\xb8\xcd\x55\x4a\x7d\x50\xbe\xa6\x67\xe4\xee\x87\x6e\x00\xb5\x45\xe3\xe0\xf1\x92\xb1\x1d\x40\x63\x23\x63\xf0\x8d\xd3\x03\x18\x2f\x07\x70\x5f\x4c\xc5\xd4\x8d\xf1\x1b\xc6\xba\x6c\x07\x40\xaa\xf4\x0a\x59\x3f\x9f\xb8\x46\x59\x42\x86\x8a\xb4\x51\xc6\x9d\x98\x49\x4f\x5e\x4c\xef\x47\x37\xd3\xd9\xcd\x4b\x28\xc8\x00\x1d\x5e\x94\xf5\x0b\x8f\x2c\xae\x7c\xca\x89\xa1\x70\x05\x77\xfb\xb7\xf6\x89\x1b\xa5\x00\xda\x5a\xaa\xc3\xb6\xe7\x79\xa1\x66\xbf\x35\x5a\xda\x15\x1d\xda\x36\x1a\x05\xa2\xd3\x28\x69\x74\x97\xf2\xf0\x5c\x26\xaa\xa4\xca\x84\x94\xbe\x92\x2a\x8c\xde\xfa\x4d\x3b\x10\x86\xee\x29\x95\x78\x7e\x54\x6d\x7e\x3a\xef\xff\xdd\xe8\xc3\xbc\x18\xbd\xac\xe9\xf3\x59\x4c\xd8\x24\x06\x2b\xd2\x0d\x8b\xdf\x19\xd1\xf6\xfd\x7d\x32\xa5\x5d\x40\xc4\xc1\x35\xfb\x2a\x6f\x28\x5b\x72\xb9\x93\x53\xe1\x39\xef\x2e\x5f\x1c\x3f\x2b\x01\x7a\x14\xa9\xc2\x6f\x71\x95\xe8\xbb\x6a\x3a\xef\xd8\x43\x31\x1f\x4f\xae\x3f\x15\x93\xbe\x5f\xa3\x10\x28\x84\x2a\x0f\x75\x6f\x7f\x0b\x0d\x6f\x49\x8c\x0e\x91\x9b\x74\x7c\x60\x76\x06\x96\x51\xbd\x41\x86\x85\xf2\x4c\x61\x00\xf7\xde\x45\x19\x40\x30\xf6\x1b\xd9\xb9\xb6\xd4\x97\xfa\xeb\xbd\x1f\x8f\xde\xbf\x7f\x05\x46\x3e\x15\x9f\x27\x6f\x8c\x75\x5d\xb6\x21\x21\x0b\x3d\x62\x25\x13\x55\x22\xb0\xdf\x77\x24\x18\xda\xa4\x15\xe3\x10\x78\x50\x93\x30\x23\xa8\x04\x4c\x06\xdd\x79\x6b\x26\x7f\x1b\xdd\xbf\xcd\x96\x13\xf9\x91\x30\xc4\xe4\x75\xcd\x3e\x7a\xe5\xed\x2b\xf0\xb9\xbc\x9d\x14\xa3\x87\x2f\x79\xb4\x8c\x98\xb1\x7d\xd9\x5b\x17\xc6\xd5\x4d\xec\x9b\x50\xa4\x25\x21\x8c\x45\x0f\xe5\xc9\xd1\x67\x18\xc2\xdf\x8f\x88\x33\xed\xbb\xdf\xb3\x9e\x8f\xb7\xd3\x22\xef\x3b\x06\x0f\x73\x0b\x97\x07\xae\x4a\xa3\x22\x28\x72\x91\x25\xdc\x36\x2f\x50\xc6\x75\x23\x42\xa1\xe0\x63\x1a\xd0\xd1\x43\x68\xea\xda\x73\x04\x6d\x70\xe3\x7c\x30\x61\x00\x95\x77\x26\xfa\xd4\x17\x1b\xc1\xef\x73\xbe\x74\xae\x3c\x4d\xc1\x8f\xd2\x0d\xfb\x31\x94\x28\xd2\x85\xc3\x8a\x86\xb0\x88\x32\xc1\xdf\xa5\x13\xe5\x9d\xcc\x7a\x9e\x5e\x1f\x9e\x6b\x0a\x8a\x4d\x9d\x77\xfc\x7c\x91\xce\x65\x52\x32\x93\x1e\xc2\xd2\x54\x94\x69\x83\x6f\x58\x3d\xcb\xed\x92\xee\x79\x83\xce\xfc\x03\xfb\x22\xba\xab\xcc\x90\x2d\x4f\x8a\x0f\xde\xa7\xe2\x62\xa2\x63\xea\x06\x8c\xa4\xa4\xd8\xbf\xdc\x26\xb7\x3a\x6a\xa1\x7d\xf7\x7b\xa2\xb6\x5e\x75\xca\x6e\xc8\xdf\x75\x2f\x89\x00\x2e\x8e\xcb\x30\x1b\x92\xb6\x9e\xe1\xf1\x67\x59\x17\x9c\x0e\x7c\x86\xa7\x36\x8e\x43\x92\xb1\xd7\x34\x84\xb1\xd7\xb2\x39\x8f\xf3\x1a\xf6\xec\x88\x7a\xf5\xb6\x26\x96\x6f\x0a\xe2\x21\x3c\x39\x39\x92\xad\xa1\x33\x5e\x68\x68\xbd\x96\xaf\x8c\x2d\x0d\xe1\x81\xd8\x78\xfd\xcc\x9e\x56\xc5\x21\x7c\x96\xbf\x1c\x8f\x9c\x41\x8c\x38\x5a\x05\x72\xb1\x20\x0c\xbd\x1c\x9c\xbc\x7d\xdd\xfe\xd4\xa0\x35\x53\x3c\xcc\xe6\x89\xbb\x6f\xc5\xa1\x92\x06\x38\xa8\x28\xd9\x0c\x16\x26\xd2\xa1\xd4\xfd\xe9\xeb\xf2\x2a\x8a\xa5\xd7\x87\x9c\xf9\xec\x2c\x5f\xe7\x3e\xc9\x10\xec\xc5\x7b\xe2\xa2\x89\xed\x89\xd2\x2b\xd0\x6d\xa8\x5f\x7e\xe9\x60\x5f\x77\x3f\x18\x0d\xd2\x86\x7c\x04\x06\x60\xe4\x43\x4c\x64\x07\xe8\x37\xcb\xb7\xd0\xc1\xe8\xb7\x61\xc3\xfe\x5b\x2c\x4b\x3d\x48\x66\x96\xb6\x6c\x6b\x1a\x1e\xa8\x96\x93\xcc\x1c\x19\x5d\xc0\xb4\xa9\x9e\x20\x3b\xbc\x7c\x77\x06\xb4\xfe\x2f\x70\xea\x30\x48\x25\xc4\x3c\x20\x3d\x85\x58\x6f\xc0\xab\xbe\xb8\x0f\xed\x8b\x70\x7c\x0b\xc0\x5e\xc3\xae\x1f\x83\x5a\x67\x01\xeb\x75\xac\x3a\x8d\x52\x47\x00\xf5\xbd\xb0\xe9\x3b\xc0\x12\x7c\x47\x48\xfa\x1f\xd0\xe8\x55\x20\x7a\x0b\x06\x25\xf8\xf9\x6f\x00\x00\x00\xff\xff\x8d\xf8\xad\x7e\x6c\x14\x00\x00")

func typeObservation_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeObservation_recordGraphql,
		"type/observation_record.graphql",
	)
}

func typeObservation_recordGraphql() (*asset, error) {
	bytes, err := typeObservation_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/observation_record.graphql", size: 5228, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0x98, 0xc5, 0xe0, 0xab, 0x91, 0x7f, 0x54, 0xd5, 0x25, 0x38, 0x12, 0x22, 0xb7, 0x89, 0xdd, 0x79, 0x73, 0x9, 0x20, 0x12, 0x19, 0x30, 0x3f, 0x86, 0x9d, 0x55, 0x8e, 0xa7, 0x4b, 0xb1, 0x4}}
	return a, nil
}

var _typeOrderGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x90\xcd\x6e\xa3\x30\x10\x80\xef\x3c\xc5\xf0\x1a\xbe\x21\x70\x24\xb4\x59\x60\x0d\xd9\x3d\xac\xaa\xc8\x0d\x93\xd4\x52\x00\x67\x18\x1f\xa2\xaa\xef\x5e\x81\xf3\x03\x52\x68\x2e\x95\x7a\xc3\x9f\x8d\xe7\xf3\x17\x60\xeb\x1a\xc8\xa9\x46\x2a\x59\xb3\xeb\xe1\x3d\x00\x00\xc8\x55\x22\xd5\x36\x51\xd1\xaa\x9a\xac\xa3\xb8\x4a\xff\xca\x09\x28\x37\x65\x21\xb3\x44\x26\x13\x16\x47\x59\x2c\xd7\xeb\x39\xcb\x7f\x17\x6b\x59\xcd\x98\xcc\x2a\xa9\x64\xb2\x4d\xb3\xad\x54\x2a\x57\x93\xad\x4d\xf6\x2b\xcb\xff\x65\xc1\x47\x10\x98\xd6\x3a\xf6\x82\x7f\x1c\xd2\xb9\xd0\xa4\x9b\x8b\x64\x3f\x1a\x8b\xa9\xfe\xc8\xf7\xd4\x35\x69\x22\xa0\x64\x32\xed\x21\x1c\x19\x77\x77\xe2\x7f\x76\xd6\x1e\x0d\xd2\x0c\x76\xc3\x4d\x58\xa7\x8c\xcd\x8d\xcf\x25\x62\x42\xcd\x08\xcb\x06\x7e\x9c\x25\xd3\x91\xe1\xb3\x80\xe2\xf2\x15\xde\xd4\x04\x28\xdc\x23\x61\xbb\xc3\x68\xc7\x1d\xa5\xc3\xed\x57\xcb\x2f\x36\x09\x4f\x0e\x7b\x1e\x94\x1f\x9c\x79\xf8\xa8\x10\x46\x7c\x72\xba\xe5\xd1\x26\x6d\x6f\x93\x58\x1f\x0b\x32\x3b\x14\xb0\x3a\x76\x9a\x97\xde\xef\x8f\x6b\x66\x32\xaf\x8e\xb1\x17\xf0\x3f\xba\x2e\xbc\xdc\x8b\x1f\xfd\x66\xac\x35\xed\x21\xaa\x6b\xc2\xbe\x17\x70\xf9\xb8\xcb\xb1\x69\xb0\x64\xdd\x58\x01\x95\x69\x30\x1c\xca\xf2\xd9\xa2\xaf\x77\x4d\x6a\xea\xf9\xe4\x6f\x49\xbc\x54\xf7\x49\xd8\x9f\x68\xfa\x24\x27\x2c\xa6\x0c\x82\xcf\x00\x00\x00\xff\xff\x7b\x99\x72\xbe\xcd\x03\x00\x00")

func typeOrderGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeOrderGraphql,
		"type/order.graphql",
	)
}

func typeOrderGraphql() (*asset, error) {
	bytes, err := typeOrderGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/order.graphql", size: 973, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd6, 0x8a, 0xc5, 0x6e, 0xc9, 0x67, 0x2b, 0xb3, 0x3a, 0xe9, 0xc4, 0x33, 0x38, 0x4, 0xf2, 0x9d, 0x3f, 0xc, 0x43, 0x90, 0xf3, 0x50, 0x83, 0xba, 0x6c, 0x5a, 0xf9, 0x4, 0x1e, 0xc6, 0x87, 0xad}}
	return a, nil
}

var _typeOrder_bagGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\xcd\x8a\xdc\x30\x10\x84\xef\x7a\x8a\x32\x7e\x0b\xdf\xb4\x1e\x87\x98\x2c\x1b\xe3\x31\x84\x25\xec\x41\x6b\xf5\xda\x0d\x63\x59\x48\xed\x49\x4c\x98\x77\x0f\x96\x67\xf2\x47\x98\x43\xc8\x4d\x5d\xaa\xc3\x57\xd5\x9d\xc3\x9b\x75\x22\x27\x90\xd5\x13\x96\x48\x16\x6f\x73\x80\x8c\x84\x39\x58\x0a\x78\x35\x83\x22\xb7\x4c\x68\x76\x63\xb7\xf9\xbe\x29\x00\x28\xdb\xea\x50\x77\xa5\x6e\x0f\x69\xd4\x8f\x75\xa3\x9f\xd3\xf3\x53\x55\xbe\xd7\xdd\x6d\x7a\x78\xd2\x1f\xba\x56\x3f\x1d\xdf\x55\x6d\x12\x1a\xfd\xdc\xe8\x47\x75\x51\x2a\x47\x20\x1f\x28\x92\x93\x88\x38\xce\xde\xb3\x1b\xd0\x9b\x20\x30\xce\xc2\xc4\x38\xf7\x6c\x84\xec\x4e\x13\x15\x3b\xbf\x08\x3e\x6e\xc3\x83\x19\xca\x40\x46\x6e\x38\xfe\x27\x60\xf1\x2b\x6d\xfa\xa4\xaf\x42\xc1\x99\x53\x7d\x28\x70\x94\xc0\x6e\xc8\x92\x2e\x3c\xd1\x51\xcc\xe4\x0b\x74\x3c\xd1\x2e\xf6\xb3\x8b\xcb\x44\xe1\x4f\x73\x1c\x39\x01\x6a\x6b\x03\xc5\x58\xe0\xfa\xa8\x37\xa8\x0c\xc9\x93\x38\xc9\xd6\x42\x53\x2c\xf0\x39\x91\xee\x98\xd9\xcb\x3f\x25\x4e\x8b\xb9\x05\xbe\x46\x65\xfb\x3b\xd8\xdd\xe8\x39\xd8\xc2\x87\xf9\xcc\x96\x2c\x5e\xd7\x1f\x2b\x1f\x8c\xd0\x17\xb3\x22\x2e\xfd\x08\x13\x11\x25\xf0\xff\xac\x2b\x07\x3b\xcb\x67\xb6\x8b\x39\x5d\xd3\x80\x5d\xba\xad\xed\xaa\xfe\xd2\x56\x4b\x6f\x14\xc8\xf5\x54\x39\x61\x59\xb3\x97\xbb\xb5\x43\x5d\xd4\xf7\x00\x00\x00\xff\xff\x84\x63\x20\xc6\xc1\x02\x00\x00")

func typeOrder_bagGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeOrder_bagGraphql,
		"type/order_bag.graphql",
	)
}

func typeOrder_bagGraphql() (*asset, error) {
	bytes, err := typeOrder_bagGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/order_bag.graphql", size: 705, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x0, 0xbe, 0xe4, 0x1c, 0x24, 0x42, 0x73, 0x66, 0xc3, 0x3f, 0xe7, 0xb0, 0xdc, 0x1c, 0x72, 0xbd, 0xb6, 0x8c, 0x4e, 0x5, 0xf1, 0x2, 0x82, 0x8, 0x77, 0x7b, 0x6d, 0x97, 0x37, 0xf1, 0xc4, 0xd3}}
	return a, nil
}

var _typeOrder_detailGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\xd0\x51\x4e\xc3\x30\x0c\x06\xe0\xf7\x9c\xc2\x68\xb7\xe8\x2b\x13\xd2\x5e\x60\xd2\xb8\x80\x49\xdc\xcd\x52\x12\x67\x8e\x83\x54\x21\xee\x8e\x5a\x02\x5a\x06\x6f\xf1\x57\xfb\xb7\x5c\xb7\x83\x99\xcc\x5f\xa8\x82\x5d\x08\x44\x03\x29\x60\x0e\x80\xb5\x8a\x67\x34\x0a\x50\x54\x42\xf3\x06\x9c\x67\xd1\x84\xc6\x92\xdd\x0e\x24\xc7\x05\x66\x51\xb8\x36\xd2\xc5\xd9\x52\x08\x5e\xd6\xf1\x3d\x19\x72\x84\x0f\x07\x00\xb0\xeb\x91\xb7\xb3\xab\x73\x98\xe0\x64\xca\xf9\xfc\xb0\xd5\xd5\xd0\x5a\x9d\xbe\x13\x4e\x5b\xb1\x79\x51\x16\x65\x5b\x26\x38\xf6\xd7\xc6\xb3\x4a\x7a\xc6\x44\x3f\x21\xf0\xab\x87\xfd\x68\x26\xb7\x7d\x9d\xee\x9b\xae\x0d\xb3\x6d\x5b\x0e\xd9\x7a\x8f\x61\x3c\x2a\x7b\x9a\xe0\x29\x0a\x76\xe5\x44\x27\xc3\x54\x26\x78\xe5\x44\xae\x9f\xf8\xdf\x0f\x5a\xbf\xe4\xfb\xcd\x1e\x8d\xce\xa2\xcb\x80\x11\xdf\x28\x0e\x12\xa8\x7a\xe5\xb2\xe6\x0c\xce\x09\xcf\x63\x60\x6d\xa5\x44\x26\x1d\xf0\x9d\x72\x90\x91\x5a\x66\xfb\x73\x8d\x6f\xaa\x94\xfd\x32\xc1\x63\x7f\x81\xfb\x74\x5f\x01\x00\x00\xff\xff\x2d\xd1\x15\x76\x12\x02\x00\x00")

func typeOrder_detailGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeOrder_detailGraphql,
		"type/order_detail.graphql",
	)
}

func typeOrder_detailGraphql() (*asset, error) {
	bytes, err := typeOrder_detailGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/order_detail.graphql", size: 530, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x68, 0x63, 0xc7, 0xb3, 0x31, 0x4f, 0xdf, 0x27, 0x9e, 0xde, 0xa8, 0xdd, 0xae, 0xa0, 0xa8, 0x2f, 0x99, 0x55, 0x9d, 0x8e, 0xad, 0x84, 0xdf, 0x34, 0x2e, 0x90, 0x11, 0x1e, 0x4b, 0x83, 0x92, 0xda}}
	return a, nil
}

var _typeOrder_eventGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\xc1\x6a\x84\x30\x10\x86\xef\x3e\xc5\xec\x6b\x78\x13\x0d\x54\xb0\x9a\xc6\xb0\x97\x52\x24\x5d\x67\x4b\x60\x93\xc8\x74\x2c\x95\xd2\x77\x2f\xba\x4b\xb1\x36\xd2\x53\xaf\xff\x3f\x99\x7c\xdf\xa0\x1f\x1d\x34\xd4\x23\x89\x37\xf4\xac\xa7\x01\xe1\x23\x01\x00\x68\x54\x21\x54\x27\xab\x2c\x17\x45\x27\x8e\xa2\xd6\xab\xb8\xbd\x2b\xa5\x8c\xe4\x4a\xe4\xa2\x3c\x46\x0a\xad\xb2\xba\x95\x8d\xd2\xbf\x9a\xba\xd1\xb1\x67\x6d\x76\x2f\x2b\xd1\xe5\x4d\x55\x89\x5c\x7f\x57\x9f\x49\x62\xfd\x30\xf2\x8a\xf9\x61\x44\x9a\xa4\x21\xe3\x6e\xe4\x61\xae\xca\x22\x85\x96\xc9\xfa\x97\x25\x3b\x53\x70\x9b\x88\xc3\x26\xc0\x77\x46\xf2\xe6\xb2\x9d\x9b\x06\x4c\x37\x37\x8a\x71\xe4\x84\x86\x6f\xd7\xdb\x20\x1c\x92\xdd\xf5\xb1\xed\xcb\xf8\x4c\x9c\x82\xc2\x33\x12\xfa\x13\x66\x27\x0e\x54\xce\x5f\x2e\x2d\x87\xfd\xce\xf4\xbd\x65\x1b\xbc\xb9\x14\x86\x4d\x0a\x8f\x19\x33\xd9\xe7\x91\xf1\x3a\xf3\xb4\x2c\xb0\x0e\x5f\xd9\xb8\x21\x05\x6d\x1d\x1e\x66\xa3\x99\x65\x85\x72\x55\xb1\xfd\x0f\x8b\x7f\x32\xdb\x91\xfa\xc3\x67\x57\xe5\x2b\x00\x00\xff\xff\xc9\xec\x67\x16\xd7\x02\x00\x00")

func typeOrder_eventGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeOrder_eventGraphql,
		"type/order_event.graphql",
	)
}

func typeOrder_eventGraphql() (*asset, error) {
	bytes, err := typeOrder_eventGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/order_event.graphql", size: 727, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc1, 0x46, 0xfe, 0xb5, 0x8, 0xdb, 0x32, 0xf7, 0xe3, 0xa0, 0x2a, 0xb8, 0xd4, 0xe1, 0x5, 0x87, 0xcb, 0x3b, 0x28, 0x9d, 0x6, 0x1a, 0xa2, 0x49, 0xd6, 0xed, 0x6c, 0x56, 0xd8, 0x48, 0x8b, 0x53}}
	return a, nil
}

var _typeOrganizationGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x91\x41\x6e\xb3\x30\x10\x85\xf7\x9c\x62\xa2\x7f\xfb\x9f\x20\x3b\x04\xa8\xb5\x44\x0d\x05\x93\x4d\x55\x45\x6e\x98\x04\x4b\xc1\x46\x66\x68\x94\x56\xb9\x7b\x85\x49\x22\x68\x50\xba\xa9\xba\x9b\x79\x63\x7d\x7e\x6f\x06\x75\x57\x43\x62\x77\x52\xab\x0f\x49\xca\x68\x71\x6c\x10\x3e\x3d\x00\x80\xc7\x24\x4f\x99\xf0\xe3\xff\xae\x0b\x62\xc6\x59\xe0\xc7\xeb\x3c\xca\x56\x2c\x88\xd6\x69\x96\xac\x58\x18\x65\xc3\x98\xf1\xbc\xc8\x7c\x7e\xa3\x3f\x24\xab\x28\xe3\x4f\x11\x17\x43\x1f\x85\x45\xe0\x0b\x96\x70\x3f\x5e\x33\x9e\x0b\x26\x0a\x11\x79\x27\xcf\x53\xba\xe9\x68\x62\xe5\xb9\x43\x7b\x4c\xa5\x95\xf5\xd9\x90\x96\x35\x2e\x21\x27\xab\xf4\xce\x09\x58\x4b\xb5\xbf\x28\x00\x4e\xa3\x63\x83\xcb\x9b\x48\xf3\x3f\x04\x16\x25\xe1\x0c\x7d\x71\x07\xb5\x98\xf9\xda\x49\xad\xe9\xec\x06\x59\x38\xb1\x78\x11\x85\x63\x8d\x06\x8d\xb4\x94\x6c\xa7\x52\x65\xc8\x5c\x99\xff\x80\x2a\xd5\xc2\xc1\x74\xfb\x12\xde\x10\xa8\x42\x28\xb2\x18\xc8\xb8\xb2\xb4\xea\x1d\xe1\x50\xa1\x45\xd8\xaa\x3d\x82\x6a\xa1\x25\x63\xb1\x74\x2c\x59\x96\x16\xdb\x76\x09\x2f\xfe\x50\xb1\x3e\xfd\xe2\xd5\x0d\x37\x46\x93\xdc\x50\x3f\x0d\x86\x32\x35\x4a\xd3\xe5\xc9\xc9\xf3\xfa\xe8\x90\x3b\xef\xe3\xfc\x2c\x3c\x2f\x4b\x95\xd3\x55\x7d\xcf\x3e\xa8\xe3\xd0\x7d\x7f\x25\x8f\x99\x3f\x13\x67\x6c\xfc\xce\xc5\xfe\xfa\x06\xf7\xd7\xef\x36\xff\x15\x00\x00\xff\xff\x64\x7e\x67\xd0\x91\x03\x00\x00")

func typeOrganizationGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeOrganizationGraphql,
		"type/organization.graphql",
	)
}

func typeOrganizationGraphql() (*asset, error) {
	bytes, err := typeOrganizationGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/organization.graphql", size: 913, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0xd2, 0x8a, 0x29, 0x95, 0xf6, 0x8f, 0xf1, 0x68, 0x2, 0xd5, 0xd6, 0x19, 0xad, 0x9a, 0x1c, 0xc4, 0xea, 0xb4, 0xc5, 0x7, 0x22, 0xd8, 0x6c, 0xe9, 0x6a, 0xea, 0xb5, 0xaf, 0xfa, 0xae, 0x68}}
	return a, nil
}

var _typePersonalcharacteristics_observation_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x53\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x30\xe8\x75\xdb\x0f\xf0\x2d\x75\xbc\xc4\x58\xd1\x0c\x6e\x2e\xc3\x50\x0c\x2a\xcd\x35\xc2\x6c\xc9\xa0\xe4\x00\xd9\xb0\xff\x3e\xe8\xa3\x98\xd4\xd5\xab\x87\xe5\x64\x91\x7c\x7a\x8f\x26\x9f\x0a\x52\xd3\x00\x1f\x89\x8d\x56\xa2\xaf\x8e\x82\x05\x5a\x62\x69\xac\x44\x03\x3f\x0a\x00\x80\xfa\x53\xfd\xa5\xda\xdf\xec\x5b\x1f\xed\xd6\x4d\x9b\x84\x77\x1f\x9a\xdb\x24\x5c\x6f\x6b\xff\x6d\xd7\x55\x38\x6c\xeb\xdb\x4d\x1d\x6a\xd7\x4d\x7b\xd8\x6d\xd6\x87\xba\xf8\x59\x14\x52\x8d\x93\x9d\x13\xde\x3f\x18\xe2\x93\xb0\x52\xab\x8a\x49\x58\x8a\x9d\xd8\xf3\x48\xe5\xdc\xa5\x95\x87\x9c\x44\x3f\x51\x09\x77\x96\xa5\x7a\x0c\x29\xd4\x1d\x95\x50\xe9\x4e\x3c\xf4\x54\x69\x85\x34\xda\xc6\xcb\xbb\x46\x0a\x47\xba\xa0\x91\xd8\x82\xec\x72\xf2\xcb\xb5\xf4\x2f\x53\x69\x09\x35\x77\xd9\x6c\xae\xe0\x3d\xeb\x01\x8e\x24\x7a\x7b\x04\xf6\x00\x5f\x50\x62\xf8\x43\x5d\x99\x69\x20\x6e\x36\x79\xbe\x23\x83\x2c\x47\x27\xf0\x54\xf0\x79\x8d\x38\x31\x53\x57\xc2\x41\x0e\x14\xb0\x46\x4f\x8c\xbf\x79\x01\x02\x92\x1f\x85\x92\xdf\x45\x4a\x11\x4b\xe1\x42\x68\xdc\x0b\x67\xb1\xdf\x87\xc7\x31\x7d\x25\x26\x85\x64\x4a\xf8\xdc\x3e\x05\x3b\xff\x5b\x11\xed\xb0\xab\x7b\x8f\xee\x35\x46\xb1\x2d\xe9\x9b\x18\xc4\xe5\xc6\xb1\xe8\x64\x87\xc9\x58\x92\xb4\x53\x5a\xea\xc4\xd5\xbd\xdb\xd3\xd5\xe2\x1d\xc1\xdb\x4c\x09\xcc\x84\x47\x10\x06\xe8\x4c\x80\xba\xd7\xfc\x06\xcc\x37\xa9\xc2\x19\xc8\xe2\xbb\xa5\x86\x8c\xfc\x72\x18\x7b\x1a\x48\x59\x03\xe9\x90\x5e\x73\xc5\x73\x1f\xcf\x79\x62\x64\x3a\x49\x3d\x99\xc0\x9a\xd9\x22\xb0\x1d\xfc\x03\x48\xa5\x5d\x26\x3e\x0e\x16\xca\x08\x74\xdd\xbe\x00\xcb\x8b\xab\x19\xb3\xfe\x97\x29\xa3\xf7\xd0\xaf\x2e\x83\xbe\xe4\xd4\x05\x3e\x4d\xe9\xae\xcf\xcf\xc6\xf1\x9a\x71\xff\xe6\xd9\x4b\xbb\xd5\xf9\xf4\x57\x00\x00\x00\xff\xff\x48\x7e\x03\xcf\xdd\x05\x00\x00")

func typePersonalcharacteristics_observation_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePersonalcharacteristics_observation_recordGraphql,
		"type/personalcharacteristics_observation_record.graphql",
	)
}

func typePersonalcharacteristics_observation_recordGraphql() (*asset, error) {
	bytes, err := typePersonalcharacteristics_observation_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/personalcharacteristics_observation_record.graphql", size: 1501, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xee, 0x1c, 0x3c, 0xaf, 0x4e, 0xfb, 0x63, 0x53, 0xb1, 0x1e, 0xf8, 0x64, 0x41, 0xe7, 0x8, 0x5a, 0xd9, 0xe6, 0x3, 0xa1, 0x7, 0x4e, 0x94, 0x50, 0x74, 0xf3, 0xb6, 0x62, 0xcf, 0x17, 0xa0, 0x9f}}
	return a, nil
}

var _typePractitionerGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x92\xc1\x4e\xeb\x30\x10\x45\xf7\xf9\x8a\x1b\xf5\x2f\xba\x7b\xea\xea\x49\x08\x55\xa0\xae\x50\x17\x83\x33\x49\x46\x72\x6c\x33\x9e\x50\x0a\xe2\xdf\x51\x5d\x0a\xb4\x6a\x80\x0d\xb0\xf3\xdc\x91\x46\x39\xe7\xa6\x92\x90\x46\xc3\x52\xc9\x99\x98\xc4\xc0\xba\x4a\x0d\x19\xe3\xa9\x02\x00\x69\xe6\xb8\x36\x95\xd0\xd5\x65\xf6\x14\xba\x91\x3a\x5e\x2a\xb7\xac\x1c\x1c\x1f\xf6\x65\x7d\x37\x92\x97\x56\x1c\xed\x4e\x1d\x6d\x72\x62\x27\xe4\xc5\xb6\x87\x18\x25\x4f\x7d\xb4\xf8\x16\xcd\x60\xbd\x64\x6c\xe2\xe8\x1b\xdc\x32\xac\x67\xac\xae\x2e\x60\xb1\x3c\x1b\x95\x7b\xc6\xa6\x67\x65\xb4\xe2\x19\x92\x91\x2d\x2a\x37\xe5\x96\x8b\xc1\xc8\x59\x9e\xe3\x66\xb1\x7f\x2e\xa3\x04\xfb\xbf\x43\xac\xd7\xd5\x73\x55\x9d\xc1\x5d\x28\xbf\xe3\xb6\xa2\xd9\x2e\x69\xe0\x53\xea\x73\x29\x0f\x24\xfe\xdb\x7a\xf6\xb4\x94\xf3\x26\xea\x89\xd4\xa8\x1d\x05\x79\x3c\x92\x56\x4f\xfb\xac\x27\x84\xd6\xc0\x5f\x38\xb5\x6d\xe2\x23\xa3\x90\x21\x79\x1e\x38\x58\xc6\x3f\x67\x51\x5f\xe5\xce\x66\xa0\xdd\x78\xf6\xc7\xfa\x41\xf3\x9f\x60\xd4\xeb\xea\xf0\x69\xe9\x23\x01\x3f\x18\x87\x2c\x31\x4c\xa9\xfe\xaa\x9d\xe9\x4a\x7f\xa1\x9c\xd2\xcb\x4b\x00\x00\x00\xff\xff\x12\xf0\xaf\x04\xda\x03\x00\x00")

func typePractitionerGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typePractitionerGraphql,
		"type/practitioner.graphql",
	)
}

func typePractitionerGraphql() (*asset, error) {
	bytes, err := typePractitionerGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/practitioner.graphql", size: 986, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfe, 0x59, 0xb2, 0xb5, 0x22, 0x55, 0x8f, 0x71, 0xe7, 0x4d, 0x72, 0xe7, 0x52, 0x7a, 0x99, 0x13, 0x1d, 0x9f, 0x14, 0x5d, 0x80, 0x1, 0x1d, 0x8d, 0x24, 0x65, 0xeb, 0xff, 0x6e, 0xe1, 0xa5, 0x3e}}
	return a, nil
}

var _typeProcedure_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\xdd\x6e\x9b\x4c\x10\xbd\xe7\x29\xd6\xfa\x5e\x80\xc4\xfe\xec\x86\x3b\x07\x6f\x12\x54\x0a\x68\xc1\xaa\xa2\xaa\x8a\xc8\x32\x4e\x90\xcc\x2e\x1a\x96\x56\x6e\x94\x77\xaf\xbc\x40\x60\x21\x69\xa2\xa4\xea\xe5\x9e\x39\x73\xe6\x67\xe7\x58\x20\xea\x82\x44\x28\x39\x64\x35\x42\xac\x52\x55\x57\xe4\xc1\x22\x84\x90\x88\x85\x2e\xdd\x6c\x19\xbd\x89\x18\x8d\xd6\x6c\x9d\x78\x61\x30\x8a\x78\xc1\x4d\xc4\xc2\x4b\x46\xe3\x78\x14\x89\xb7\x71\x44\x83\x0d\xdd\x8c\xf0\xf5\x79\xc8\x92\x09\xea\x86\x5f\x22\x9f\x4e\x71\x1a\x24\x94\xd1\xcd\xb1\x0e\x65\x2c\x64\xa3\xf0\x36\xf8\x1c\x84\x5f\x03\xeb\xd1\x1a\x0d\x12\xd6\x8a\xcb\x02\x26\x93\xc4\x5b\xd7\xa5\x71\x7c\xb1\xf5\x27\x4a\x2f\xc7\xa2\x35\x4b\xbc\xb5\xef\x5f\x0f\x29\x93\x92\x6e\xaa\xe0\x4e\xe2\xa1\xa9\x39\xc8\x8e\xaf\xdd\x2b\x6f\x9d\xb0\x6b\x6b\x34\xf2\x36\x88\xa9\xef\x7b\xc1\xe5\x33\x62\x32\xeb\x9a\x77\xc3\x0d\xbd\x39\x5d\x2c\x17\xa7\xb6\x3d\xef\x91\x85\x7d\x66\x2f\xe7\xb6\xfd\xbf\x09\xad\xe6\xb6\xbd\xea\xa1\xf9\xa7\xd5\xea\x64\x6e\x24\x9e\xd8\xf3\xe5\x99\xc9\x5a\x2c\xcf\x16\x2b\xdb\xb6\x8f\x7d\xe4\xa2\xac\x55\xdf\x08\x03\x2e\x31\x73\x11\x52\xd5\x35\xf4\x1f\xb9\x40\x59\x90\x7b\x48\xf7\xea\x9e\xa0\x26\xe8\x80\x48\x0b\x70\x48\xac\x30\x17\x77\x33\x8d\x70\x29\xaa\xba\x00\xf4\x36\x26\x9e\x41\xc5\x31\x2f\x55\x2e\x45\x17\xd0\xb8\xe4\xbc\x46\x84\xcc\x21\x49\x5e\x40\xc3\xad\x64\x8d\xbc\xd7\x25\xa4\x61\xe2\x5d\x2a\xf2\x5f\xe9\x50\xa2\x0d\x35\x09\x4d\xe3\xba\xb0\xf1\xf6\x8e\xf3\x69\x1e\xc2\x0e\x10\x04\x87\xca\x21\xdf\x58\xf7\xb8\xd2\x63\xb5\xec\x23\x77\xf6\x5d\xb3\xf7\x92\xb7\xc5\x2e\x41\xfa\xed\x43\x13\x88\xd5\xae\xe5\x69\x69\xa4\x2a\x81\xe7\xbb\x9c\x37\xfd\x68\x53\x39\x63\x97\xb5\x1b\x6a\xaf\xc6\x99\x1e\x52\xb7\xc2\x0c\x1c\xe2\xca\x2c\xbd\xdd\x83\x2b\x05\x87\x52\xf5\x33\x94\x80\x3b\x89\x05\xa0\xb1\x46\x84\xb4\xea\xd7\x32\x1b\x60\xee\x4b\x6a\xcd\xea\x6e\x65\x76\x88\x73\x05\x86\x5a\x07\xbe\x92\x2b\x1b\xcb\x39\x13\x13\x0e\xa3\xaf\x68\xec\xe4\x7e\x2f\x7f\xd6\xa5\x27\x2a\x85\x35\x9f\xdc\x07\x42\x29\x51\x3d\x41\x8f\x96\xa5\x0e\x25\x8c\xaf\x95\xe4\x45\xb9\x87\x02\x84\xaa\xc8\xf0\x3b\xc9\x43\xf7\x53\xc6\xed\x9a\xbf\x95\x67\x6f\x3b\xe1\x12\xe1\x47\x2e\xeb\xaa\x91\x1e\x75\x79\x84\x92\x43\x09\x8e\x51\xff\x88\x34\xc9\x0a\x53\x51\xa5\x7a\xbe\x67\x68\x66\x70\xf6\x82\xb7\x3e\xe4\xa1\xd6\x2a\x5c\xfb\xda\xa0\x3e\x67\xac\x37\xd8\x6a\x28\x77\x7e\x18\xad\xe3\x35\x9f\xfd\xc9\x62\xff\xdc\x5c\x7f\xcd\x57\xef\x73\xd4\xc7\xbc\xf4\x2e\x17\xfd\x0e\x00\x00\xff\xff\x2a\x67\x39\x82\x05\x08\x00\x00")

func typeProcedure_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeProcedure_recordGraphql,
		"type/procedure_record.graphql",
	)
}

func typeProcedure_recordGraphql() (*asset, error) {
	bytes, err := typeProcedure_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/procedure_record.graphql", size: 2053, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb7, 0xbf, 0x40, 0x4d, 0xe2, 0x0, 0xdb, 0x9d, 0xd7, 0xff, 0xf9, 0x42, 0xdd, 0xff, 0xf7, 0x39, 0x86, 0xb6, 0x6e, 0xab, 0x49, 0xa1, 0x71, 0x33, 0x6f, 0x6a, 0x30, 0xb8, 0xf1, 0x18, 0x85, 0xdb}}
	return a, nil
}

var _typeProductGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x92\xcd\x4a\xee\x30\x10\x86\xf7\xbd\x8a\xe9\x6d\x74\x77\xe8\x41\x10\x5c\x54\xc4\x95\xb8\x98\x2f\x19\xeb\x40\x9a\x84\xe9\x44\x28\xe2\xbd\x4b\xd2\xd6\xaf\xad\xe0\x1f\x6e\xdc\xa5\x4f\xdf\xa6\xf3\x3e\x49\xc5\x3e\x26\x85\x4e\x82\x4d\x46\xaf\x13\xc9\xd4\xa1\xe0\x00\xcf\x15\x00\x80\x41\xa5\x3e\xc8\xd4\xc0\x8d\x0a\xfb\xbe\x40\x87\xbe\x4f\xd8\x53\x03\x57\xcb\x0a\x16\x7e\x22\xb7\x4b\x8e\x29\x46\xc7\x24\x3b\xf8\x44\xde\x86\x33\x7a\xa9\xf6\x33\xdc\x46\x8b\x4a\xf3\xff\xd9\xae\xb1\x3a\x3f\x7a\x1c\x68\xbb\x95\xa5\xd1\x08\x47\xe5\xe0\xb7\x98\x87\x32\xdc\x19\x24\xcf\xda\x09\x1b\x6a\xe0\xc2\x05\xd4\xcc\x4c\x12\x21\x6f\xa6\x06\xda\x65\x95\x29\x5a\xcb\x79\x3b\x74\xff\x51\xb1\x81\xbb\x7f\xaa\xc2\xa7\xa4\x74\x99\x67\xac\xef\x4b\x48\x94\x1f\xd0\xe8\x38\xbf\x47\xf3\x38\x90\xd7\x35\x70\xec\xd3\x0a\xbd\xf5\xd9\x16\x28\x8d\xde\xab\x2c\xf8\xa8\x7d\x86\xc1\xee\x5a\xed\x74\xd7\xdf\xf1\x71\x3c\x96\xf2\xf1\xe1\x58\xbe\xac\xad\xfe\x3d\x6f\x3a\x45\x5a\xb5\x7d\x7a\x01\x7e\xe8\xaf\x75\xec\xd9\xa0\x6b\x83\xa5\xbf\x63\xf1\x23\x81\xd9\xdd\x6b\x00\x00\x00\xff\xff\x08\x3f\x8a\x1b\xc7\x03\x00\x00")

func typeProductGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeProductGraphql,
		"type/product.graphql",
	)
}

func typeProductGraphql() (*asset, error) {
	bytes, err := typeProductGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/product.graphql", size: 967, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf9, 0xd8, 0xd, 0x8f, 0x18, 0x31, 0x2f, 0x5b, 0x53, 0xc5, 0x5, 0x5a, 0xae, 0x4f, 0x4b, 0x97, 0x2, 0xd1, 0x1f, 0x88, 0xc4, 0x21, 0xad, 0xb3, 0x45, 0xb7, 0xe, 0xfd, 0x98, 0xee, 0x43, 0xb}}
	return a, nil
}

var _typeQuestionnaireGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x8f\xe3\xb6\x11\x7f\xae\x3f\xc5\x18\x7e\xe8\x1e\xb0\x71\x91\xa4\x69\x01\xbf\xf9\xbc\xba\x3b\x01\x8e\xed\x95\xbd\x59\x14\x41\xb0\xa0\xc5\xb1\x45\x1c\x45\x6a\xf9\x67\xbd\x6e\xaf\xdf\xbd\x18\x52\xb2\x2d\xad\xbd\xd7\x04\x97\xb4\x0d\xfa\x64\x8b\xe2\x70\xfe\xfd\xe6\xc7\x19\xf5\x50\xf9\x12\x6e\x3d\x5a\x27\xb4\x52\x4c\x18\x5c\x3a\xe6\xbc\x85\x7f\xf4\x00\x00\x6e\xef\x92\xe5\x2a\x9d\xcf\x66\xe3\x34\x4b\x1e\x6e\xb2\xf1\xbb\xd5\x99\xf5\xf1\x64\x95\xfe\x90\x9c\x79\x91\x25\xab\x34\x4b\x6e\x00\xa0\xf7\xcf\x5e\x6f\x00\x6e\x5f\x21\xe8\x0d\x3c\xd6\x0a\xed\x19\xfd\xa9\xc3\x72\x45\xfb\xa2\x05\x03\x58\xe1\xb3\x83\x8d\x36\xc0\x85\xad\x24\xdb\x83\x2b\x98\x83\x9d\x90\x12\x94\x76\x90\xb3\xca\x79\x83\xc0\x14\x30\x65\x77\x68\x40\x1b\x28\xd8\x13\x42\x5e\x08\xc9\x41\x38\x2c\xed\xb0\x65\xdc\xc3\x4d\xba\x5c\x4c\xc7\x7f\xeb\xd5\x1a\xc6\x51\x4e\x58\x60\x30\xd1\x5c\xa8\x2d\x70\xc3\x76\x0a\x36\x46\x97\xc0\x40\x0a\xeb\xc8\x6c\x5d\x05\xa3\xe1\x2b\xf0\x16\x0d\xe4\x4c\x41\x5e\x68\x6d\x11\x4a\x2f\x9d\xa8\x64\x25\x49\xab\x16\x39\xda\x28\x1b\x25\xc2\x01\x6d\x0b\xbe\xbf\x9b\xae\xd2\x87\xc9\x87\x79\x3a\x49\xbe\x9c\x19\x5a\xc9\x3d\x68\x85\x8d\xde\xd7\x6d\x58\xa6\xb3\xf7\xd3\xe4\x85\x11\x21\x62\xb0\x13\xae\x00\xa5\x81\x0b\x83\xb9\x6b\x42\xbb\xf6\x0e\x6c\xa1\xbd\xe4\x31\xc4\xcc\x81\x44\x46\x66\xa9\xd3\x78\x77\xc2\xfd\x3e\x9b\xdf\x2d\x1a\x05\xa9\xaa\xbc\xfb\x43\x93\x72\x30\xf8\xe8\x85\x41\x1b\x7d\x11\xf4\x12\xda\xd2\xe9\x6c\x71\xb7\x8a\xf8\xb9\xf5\x68\xf6\x50\x31\xc3\x4a\x74\x68\x6c\x80\xc5\x11\x4c\x51\xba\x85\xa6\x20\xb1\x20\x81\x1a\x4f\x95\x37\x95\xb6\x38\x82\xa5\x33\x14\xe1\x7a\x71\x2d\x85\x2d\xd0\xb4\x97\x25\x53\x5b\xcf\xb6\x38\x82\x69\xfd\x2f\x2c\x2b\x56\x1e\xe4\xc9\xae\x16\x86\x13\xc5\xd6\x12\x33\x2f\xf1\x04\xc4\x07\x67\x92\xd9\xf8\xed\x34\x79\xc8\xee\xa6\xc9\xc3\xdb\xf1\x32\xb9\x99\xcf\x1e\xc6\xb3\xe5\x7d\x92\x7d\x7e\xdf\x24\x4b\x57\x49\x96\x8e\x63\x28\x74\x85\x86\x39\x6d\x62\x35\x10\x06\xd6\x08\xac\xaa\xa4\x40\x0e\x5a\x41\x6e\x84\x43\x23\x18\x3c\x31\xe9\x31\xda\x38\xa9\xd7\xe6\x8d\x6c\x6d\xdd\x7c\x91\x64\xe3\xd5\x3c\x7b\x48\x6e\xef\xc6\xd3\xce\xda\x34\x59\x2e\x57\x1f\xc6\xb3\xce\xf2\xfb\x2c\x19\xaf\x92\x2c\xbc\x09\x06\x35\x87\xcb\xa8\x31\xa4\xc6\x78\x89\x80\xf4\xcc\x28\x36\x75\x82\x9a\x9d\x01\x09\xb5\x0d\xa8\x9c\x70\x7b\x0a\xd9\x08\x92\xc3\xff\x7e\x78\x57\x20\x93\xae\xc8\x30\xd7\x86\xc7\x1d\x1f\x3a\x2b\x31\x89\x86\x62\xe2\xf6\xb3\x93\xf4\xc4\x03\xf0\xb9\xc2\xdc\x21\xff\x81\x0c\x1b\x41\xf8\x09\xca\xfb\x31\xcf\x79\x27\x2e\xa3\x17\x91\xea\xff\xfb\x3e\x06\x8e\x6b\x36\xd6\xde\x09\xde\x31\xe8\xb7\xf6\xf6\xe7\x3a\x3a\x27\x22\x61\x52\xea\x1d\x70\xe6\x18\xec\x0a\x54\x9d\xf2\x3a\x02\xbd\x9d\x47\xb6\x96\x42\x6d\x69\x7d\x74\xa1\x28\xfa\x35\x13\x1c\x20\xca\x71\x23\x94\x08\xd1\x3b\xb5\x72\x04\x3f\xb6\xa0\xd2\xff\xa9\x16\x3c\x90\x47\xc0\x3e\x27\x2a\x28\x85\x42\x4b\x66\xba\x82\x68\x84\x18\x4c\xd8\x68\x0d\xf2\x20\xd6\xd0\xc4\x08\x52\xe5\x20\xc6\xa3\x60\x36\x92\xee\x08\xde\x6a\x2d\x91\xa9\xb8\x1e\x29\x33\xee\xac\x75\x86\x30\x1e\x0e\x81\xd2\x5b\x17\x28\x30\xbc\x8e\xec\x68\x4f\xa1\xf5\x4a\x1c\x03\x42\x5e\x86\xe6\x22\x56\x7e\x95\x88\xfe\xaf\x04\x93\xe2\xd8\x06\xde\x3c\x9c\x77\x0a\x3a\x87\xcf\xae\x1d\x34\x8b\x8f\x1e\x55\x8e\x41\x6b\x5c\x72\xa1\x96\xc2\x99\xc7\x90\xe5\x9a\xe3\x88\x2e\x5b\x72\x6d\xa2\x55\x8e\x95\x3b\xa4\xaf\x95\xa7\xa8\xf5\x42\x8e\xa4\x50\x1f\xd3\x9b\xf6\xda\x97\x35\xea\x65\x18\x4e\x03\x30\x00\xa1\x60\x47\xf9\x6b\x74\x80\xa8\x5b\xa4\x35\x36\x7d\x13\x72\x60\x8a\xd7\xe1\xad\xf3\xd8\x32\xe9\x33\x11\x89\x8a\x16\x46\x94\xcc\xec\x83\x7b\x81\xff\x5c\x81\x01\x22\x17\x9c\x6e\x92\x1c\xa9\xec\x6c\xa7\xf7\x4a\x28\x0c\x53\x74\xfd\x66\xb8\x41\x43\x76\x66\xf4\x7c\x34\xc7\x2b\x71\x50\x17\x16\x4a\xf6\x3c\x45\xb5\x75\xc5\xd1\xa1\x01\x24\xc3\xed\x10\xbe\xbe\x62\x6f\xae\xe1\x9b\xe1\x77\xc3\x6f\x6b\xfe\xc4\x8d\x78\x6e\xdf\xf7\x03\xb8\xaf\x31\xdf\x38\x15\xa1\xb9\x46\x10\x2a\x97\x9e\x23\xa7\x40\x87\x4a\x36\x68\xbd\x74\x36\x5a\x19\x7b\x18\x7e\x00\xfe\xc5\xd3\xd8\x1e\x0c\x56\xc8\x5c\x2d\x47\x7f\x6d\x57\xec\x46\xab\x3f\xba\x9a\x35\x0a\x5f\x32\x05\xc8\x85\x6b\x5c\x34\xc8\x38\xd1\x4a\xa7\xca\x2e\x70\xcd\x81\x41\xf0\xbe\x40\x75\x8e\x3f\x5a\xc9\xa5\xda\x77\x0e\x1b\x94\xb4\xea\xf7\xc7\x33\x05\x78\x60\x91\x19\x5a\x12\x7b\x3c\xcd\x6f\x6c\xbd\x63\xc1\xd0\xbf\x93\x23\x6a\x61\x38\x4c\x06\xcd\x0b\x1b\x30\x6a\x31\x8f\x0f\xd4\x85\x0a\x15\x02\xd8\x82\x4e\xbb\x36\x2f\x54\xe5\x80\xf0\xf1\xe8\x11\xd2\x9b\x56\x97\x44\xd5\x8a\x1c\x9c\x3e\xf5\xf2\x5c\x09\xff\xca\x65\xf5\xdf\x53\x51\xbf\xc7\x62\x82\xff\x48\x35\xfd\x82\x42\xfa\xa5\x35\xd4\xff\xe9\xe5\xa5\x10\x64\x26\x06\x99\x3b\xcc\xcf\xdc\xb0\x8d\x83\x4f\xc0\x72\x27\x9e\x10\x3e\x81\x41\x47\xf1\x85\x4f\xe0\xd5\x47\xa5\x77\xd1\x2d\x1b\xc6\xfe\xd1\xb9\x6f\x01\xfd\x0b\xc3\x50\xff\xc5\x34\xf4\xb9\x4b\x35\x18\xf4\x8e\x20\x4e\x4a\xd4\xb6\x99\xc6\xec\x75\x18\xe5\x0d\x32\x09\xde\x36\x73\x16\x35\xb2\x46\x94\xa8\x1c\x93\x5d\x34\x50\xdb\x4b\xb3\x30\xa1\xe1\x30\xbd\xc1\x95\x36\x5b\xa6\xc4\xdf\x43\x27\x0e\x9a\xe6\x49\x2e\x9e\x04\xf7\x4c\xbe\x39\x3f\xe8\xd5\xc7\x31\x45\x58\xda\x7a\x49\x3d\xf0\x9e\x4a\x3b\x97\x4c\x94\x75\xe2\x8e\x8f\x1d\xb1\x5c\x57\x7b\x23\xb6\x85\x23\xf3\x45\x8e\xb5\xfb\xf5\x62\x67\xf3\x8c\x39\x6f\x98\x3c\x04\x12\x38\xda\xdc\x88\xd8\x57\xd4\xae\xb4\x72\x1f\x75\x1f\x37\x75\xce\xbb\x2f\xf6\xe0\x0a\x61\xbb\x80\xb1\xb1\xfb\xab\xa9\xa8\x33\xef\x1e\x8b\x49\xbd\x54\x18\xba\xbc\x7a\x7a\x20\x7a\x5c\x23\x4d\xe5\xf1\x1c\xdc\x6c\x30\x20\x68\x81\x46\x68\x3e\x82\xf8\x7b\x7a\x7b\xfc\x5c\x0e\x7f\xe5\x62\x88\x97\xc2\x18\xac\x33\x3e\x77\x9e\xe0\x6a\xd1\xb5\x3e\x1d\x81\x50\x0e\x15\x8f\x96\x6e\xbd\xe0\x18\x54\xe4\x5a\xca\xa8\x99\x76\xf7\x06\x4d\x3b\x19\xbf\x85\xa0\xe2\x5f\x79\x8b\xc6\x0e\xdb\xb6\x58\x9a\xa7\x9e\xe8\x0c\x8e\x8e\x09\x89\x1c\x72\xad\x9c\xd1\x12\xf4\x53\xf8\xa4\xc4\xd1\x5c\xd3\x71\x95\x41\x4b\x88\x24\xd1\x6b\xa8\x0a\xc3\x2c\x6a\xa9\xb7\xfb\xe0\xf4\xd6\x68\x5f\x11\xb0\xe9\x72\x09\xe4\x91\xeb\x82\x88\xd6\x5d\xd3\x81\x56\x58\x87\xca\x45\x46\x39\x5a\x3a\xec\x0d\x20\x79\x66\x65\x25\xd1\x92\xd5\x1d\xd3\x6a\xba\x1c\xf5\x06\xf0\xf5\x10\x16\xcc\x3a\x28\x91\x8b\x9c\x49\x28\x84\x0d\x80\xbd\x5a\x7c\xff\xe1\x4d\x6f\x00\xdf\x0c\xe1\x1d\x2b\x85\x0c\x10\x46\x66\xd1\xf6\x06\xf0\xed\x10\x96\x3a\x17\xc7\xed\xbd\x01\xfc\x79\x08\x19\x5a\x64\x26\x2f\xda\x18\xb0\x7f\x9a\x48\xa1\xc2\xe1\xa6\xd9\xb0\xd1\xa6\xb4\x70\x35\xc9\xde\x59\x52\xf2\x1d\x05\x8f\x49\xe1\xa2\xcf\xc7\xd9\x37\x6e\xec\x0d\xe0\x2f\x64\xa6\x13\xe4\xaa\x50\x8e\x7d\x0c\x93\x72\x09\x57\x48\x97\x47\x2e\x45\xb5\xd6\xcc\x70\x3a\xeb\xaf\x43\x48\x95\xf5\x86\xd1\xe5\x1a\x8a\x2c\x6c\x6d\xdf\xef\x11\x9c\x17\x2e\xf9\xdf\x9e\xdf\x06\x50\x93\x5a\xec\x2a\x0c\xd6\x98\xb0\x01\x80\x84\x17\x26\xe5\x99\x52\xbe\xdc\x03\xfc\x9f\x12\x7f\x47\x94\xf8\x05\xd9\x90\x88\xf0\x5f\x01\x00\x00\xff\xff\xb7\x12\x8f\xe3\xa3\x17\x00\x00")

func typeQuestionnaireGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeQuestionnaireGraphql,
		"type/questionnaire.graphql",
	)
}

func typeQuestionnaireGraphql() (*asset, error) {
	bytes, err := typeQuestionnaireGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/questionnaire.graphql", size: 6051, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2f, 0x5b, 0x58, 0xa8, 0xe, 0xb1, 0x23, 0x55, 0xa1, 0x36, 0x53, 0x98, 0xe2, 0x72, 0x8d, 0xb8, 0x11, 0x67, 0x90, 0xe6, 0xa9, 0x53, 0xdc, 0xb1, 0xd6, 0xf5, 0xb, 0x4e, 0x4e, 0x78, 0x57, 0x9b}}
	return a, nil
}

var _typeQuestionnaire_responseGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x55\x4d\x6f\xda\x40\x10\xbd\xfb\x57\x0c\xe2\xd2\x4a\x55\x7e\x80\x6f\x11\x6d\xa2\x48\x55\x3f\x42\xd4\x4b\x94\xc3\xb2\x3b\xe0\x55\xed\x1d\x77\x67\x2c\x12\x55\xf9\xef\xd5\x7e\x18\x58\x14\x52\x54\x4a\x4e\xd8\xcb\x9b\x99\x37\xef\xbd\x85\x6a\x0a\x37\xae\x1f\x04\x96\xe4\x01\x95\x6e\x80\x7a\xb1\xe4\x2a\x1b\x4f\xe7\xd8\xa2\x16\x34\x5f\xe3\x61\x42\xfe\xae\x00\x00\xa6\xf0\x8d\xac\x13\xf4\x20\x04\xdc\xa3\xb6\x4b\xab\xc7\xe2\x00\x68\xad\xfb\x79\xf3\xb1\x86\xb9\x78\xeb\x56\x93\xbf\x16\x81\xe0\xa3\x44\x54\x7a\xdf\x56\x3e\x57\x87\x58\x82\x75\xa0\xe0\xd7\x80\x1c\xc7\xca\x53\x8f\x7b\x94\x33\x5b\x6b\x8e\x27\x72\x0e\xf6\x57\x23\xef\x91\x6b\xc9\xdc\x29\xeb\x31\x4b\x7e\xe9\x78\x8d\xbe\x94\x7a\xa6\x74\x83\x66\x5b\xbc\x19\x36\x9e\xdc\xe1\xa3\x1c\x43\xd6\x0a\x76\xb0\xf4\xd4\xc1\xf7\x62\xf4\xe1\x95\x35\x99\xf4\x75\x78\xa8\x61\x46\x46\x2d\x5a\x9c\x91\xd3\xd8\x4b\x64\x99\x81\x69\x6f\x06\xce\xfa\x47\xaf\xba\xa1\x15\x0b\xe4\x81\xad\x5b\xb5\x08\xba\x21\xab\x53\x3f\x2e\x7c\xe2\x1a\xee\x5f\x08\xdb\xe4\x21\x77\xbf\x6b\x10\x3c\x72\x4f\x8e\xf1\x1d\xbf\x0f\x4b\x49\x83\x5b\xeb\x03\x4a\x45\xe5\x7e\xa8\x76\xc0\x1a\xe2\xc7\x2e\xbf\x2f\xc8\xb2\xa3\x61\xdc\x7b\xd3\x32\x0a\xc3\x29\x2a\xe1\xa9\x86\xfb\x1d\x1f\x26\x0f\xc9\xc5\x34\x80\xf7\x87\x27\x09\x63\xf8\x52\xd1\x29\xbe\x1d\x97\xd4\xff\xec\xe3\x99\x2c\x3c\xd1\xbd\x93\x8c\x4b\x9e\xa5\x2b\x55\x68\x74\x9b\x2b\x67\x1e\x95\x60\xb6\xea\x60\xb8\x21\x93\xb8\x22\xdf\xc1\x02\xad\x5b\x65\xa2\x68\x0a\x23\x63\xeb\x52\x73\x4d\x8e\x87\x0e\xfd\xbe\x17\x9a\x9c\x44\xdb\x6f\x71\x89\x1e\x9d\xc6\x4f\x4e\xac\x3c\xed\x86\xf5\xda\xd3\xd0\x33\x28\xb7\xdd\x9b\xc7\xf8\xbd\x92\xd2\xac\xb6\xed\x90\x45\x75\x3d\xac\x1b\x74\x60\x05\xd6\x8a\x4b\xda\x62\x3b\x9c\x07\x48\x1d\xd1\x89\x58\x4b\x5a\xa5\xdf\xae\x6b\xa4\xcf\xf9\x25\xab\x10\xf3\x7f\x09\x2c\x7e\xd0\x32\x78\x34\xc0\x28\x40\xcb\x82\x9e\x09\xae\x5a\x3f\x12\xbd\x88\xbe\xef\x00\x3c\x02\x79\x13\x48\x44\x70\x35\x85\x55\xd8\x13\x0d\x58\x27\x04\x9a\x9a\xa0\x87\x00\x0f\x0b\x46\xe1\x0f\xa0\xc9\x27\xa3\x4d\x10\x3e\xa7\x66\xc3\x21\x8c\x0f\x07\x63\x9f\x80\xc9\x47\x65\x58\x92\x6f\xb9\x13\x1a\x10\xba\x48\xd7\xf5\xc5\x60\x1c\xf8\xcb\x78\xe5\xde\xbc\x41\x38\xfe\x2d\x17\xe7\x89\x44\xf5\xfc\x27\x00\x00\xff\xff\x24\x15\x09\xd6\x36\x08\x00\x00")

func typeQuestionnaire_responseGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeQuestionnaire_responseGraphql,
		"type/questionnaire_response.graphql",
	)
}

func typeQuestionnaire_responseGraphql() (*asset, error) {
	bytes, err := typeQuestionnaire_responseGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/questionnaire_response.graphql", size: 2102, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb1, 0x5a, 0x59, 0x67, 0xda, 0xa8, 0xcf, 0x49, 0xa, 0x47, 0x8a, 0x40, 0xdb, 0xa8, 0x8c, 0x20, 0xd, 0xe, 0xf9, 0xa4, 0xa3, 0x4a, 0x25, 0x0, 0x89, 0x9a, 0x93, 0xb3, 0xf0, 0x79, 0xec, 0x4c}}
	return a, nil
}

var _typeReference_rangeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x90\x4f\x6b\x83\x40\x10\xc5\xef\xfb\x29\xc6\xaf\xb1\xb7\x60\x24\x11\xd4\x2d\x5b\xdb\x52\x44\x82\x24\x53\x33\x60\xd6\x65\xab\xb4\xa1\xe4\xbb\x97\x1d\xff\xd4\xc6\x63\x4f\xbd\xbd\xf7\x5b\xe7\xf1\x7c\x02\x4d\x7f\x01\x8d\x6f\xe8\xd0\x1c\x51\x57\xa6\xc6\xfc\x6a\x11\xbe\x04\x00\x40\xa6\x74\xba\x49\x58\xaa\x87\x3c\x9e\xf4\x3e\xde\xed\x59\x3c\x47\xfa\xf5\x30\xbb\x44\xbd\xfc\xd0\xc9\x64\x2a\x3f\xe8\x28\x54\x69\x1a\x65\xdb\x68\xcb\x6c\xe1\x41\xdc\x84\x20\x63\xfb\xee\xae\x45\xcc\x6c\xa8\xe1\x3c\x90\xb0\xe0\x8c\x9b\xf6\x03\x5d\x42\x17\xea\x24\xc4\x66\x84\x67\xaa\xcf\x6b\xca\x09\x4f\xc6\xb3\xc7\xce\x91\xa9\x07\x5c\xd5\x98\x92\xe1\xef\x66\x5f\x7d\xfe\xf2\xcb\xa3\x89\xed\x5c\xdb\x5b\x09\xc5\x66\x94\x41\xc9\x2f\xdd\xd5\xfa\x96\xab\x31\x83\xe1\xce\xda\x86\xf0\x3d\x6f\x25\x14\x43\xdc\x78\x36\x3f\x84\xed\x09\x25\x14\x61\x43\x86\x8e\x55\xe3\x2d\xff\x6d\x50\xf2\x4a\x3e\xfe\x2e\x7d\xdc\x87\x4e\x53\xc3\x60\xb5\xd7\xdf\xa7\xfa\x1f\x4b\x05\xa5\xb8\x7d\x07\x00\x00\xff\xff\x36\xe8\xc6\x53\xce\x02\x00\x00")

func typeReference_rangeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeReference_rangeGraphql,
		"type/reference_range.graphql",
	)
}

func typeReference_rangeGraphql() (*asset, error) {
	bytes, err := typeReference_rangeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/reference_range.graphql", size: 718, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x29, 0xe5, 0xcd, 0xa4, 0x4b, 0xf6, 0xfd, 0x7a, 0xf0, 0xda, 0xfc, 0x8e, 0xdb, 0xe6, 0xcd, 0xf0, 0x37, 0x43, 0x41, 0x8f, 0x60, 0xca, 0x4f, 0x2c, 0x49, 0x35, 0x7e, 0xa9, 0x4b, 0x97, 0xce, 0x48}}
	return a, nil
}

var _typeReferral_requestGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x91\x41\x6f\xd3\x40\x10\x85\xef\xfe\x15\x13\x71\x86\x1f\xe0\x9b\xe5\x6c\x45\x44\x70\xca\xda\x81\x03\x42\xd1\x64\x77\xdc\x2c\x72\x77\xcd\xec\xb8\x12\xa0\xfe\x77\xb4\xeb\x54\x82\xe2\xa6\xa0\xde\x92\x7d\x9f\xdf\xcc\x9b\x57\x90\x9f\x6e\x41\x53\x4f\xcc\x38\x68\xfa\x36\x51\x94\x56\x50\xa6\x08\x3f\x0b\x00\x00\xad\xae\x94\xd6\xd5\x56\xab\x0f\x7b\xd5\x76\x87\xb5\xae\xae\xba\x45\xa5\xaa\xbb\xcd\x47\xb5\x28\xb5\xfb\xf6\x5a\x35\x6b\xb5\x5e\x54\xeb\xaa\xa9\xd5\x76\xfb\x94\xba\x7b\x7f\xbd\x55\xdd\x13\xaa\x6a\x3a\xa5\xd5\xfa\xb0\x69\x0e\x4a\xeb\x9d\x5e\x84\xf6\xcd\xbb\x66\xf7\xa9\x29\xee\x8b\xc2\xf9\x71\x92\xc7\x81\x6b\x26\x14\x3a\x07\x3e\x62\x24\xbb\xf3\x25\x7c\xce\x14\x79\x43\x6f\x09\x07\x39\x69\x32\x81\xed\x26\x19\xac\xbe\x64\x34\xe6\x43\x95\xcb\xf7\x5b\xfd\x86\xd4\xc1\x52\x09\xf5\xe0\xbc\x33\x38\xa4\x7f\xd9\x66\x26\xa6\xe3\x57\x32\x72\x76\x49\xe3\x2a\x23\x81\xe7\x39\x99\xe0\xd9\x96\xf8\x22\x63\xdc\xe8\xc8\x5f\xf2\xb1\x14\x0d\xbb\x51\x5c\xf0\x25\xb4\xc2\xce\xdf\xe4\xf7\x60\xcc\x94\x3f\x28\xa1\x73\xb7\xb4\x4a\x6f\xe9\x56\xaf\x1e\x07\x83\xd7\xb0\x8f\x64\x41\x42\x9a\x17\xd8\x02\x7a\x0b\x91\xbc\x05\x4b\x82\x6e\x88\x80\xc7\x30\x09\xe0\xc3\xce\xd0\x07\x06\x3e\xbb\x40\x24\xbe\x73\x86\x20\x30\x08\xa3\x8f\x3d\x31\x84\x1e\x10\x46\x94\xb4\x7b\x32\x96\x13\x81\x41\xa6\x2c\xf8\x20\x27\x62\x18\x39\xdc\x39\x9b\xe0\x3f\x7e\xdf\xa0\x77\x3f\x30\xc5\x79\x53\xc8\xf7\x91\xfe\x5a\x77\x2e\xd4\xd9\x87\xb4\xab\x7f\x29\xf8\xe5\xdd\x5e\xaa\xf5\x99\x46\x9f\x29\xf3\xff\x7a\x2c\xee\x7f\x05\x00\x00\xff\xff\x08\xee\x16\x49\xdf\x03\x00\x00")

func typeReferral_requestGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeReferral_requestGraphql,
		"type/referral_request.graphql",
	)
}

func typeReferral_requestGraphql() (*asset, error) {
	bytes, err := typeReferral_requestGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/referral_request.graphql", size: 991, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0x2, 0xc2, 0x9b, 0xe9, 0x3b, 0x5c, 0x21, 0x20, 0xde, 0x9b, 0x5b, 0x53, 0xfa, 0xde, 0x3, 0x2c, 0xf0, 0x84, 0x17, 0xd2, 0xf, 0xbc, 0xc6, 0x1f, 0xfe, 0x93, 0xee, 0x3d, 0x8a, 0x73, 0x67}}
	return a, nil
}

var _typeRelationshipGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\xc1\x6e\xb3\x30\x10\x84\xef\x3c\x85\xff\xfb\xff\x04\xdc\x1c\x42\x2a\xa4\x9a\xa4\x66\x73\xa8\xaa\x0a\x39\xb0\x69\x2d\x39\x36\x72\x96\x4a\x51\x95\x77\xaf\x30\x50\xc9\x4d\xd3\x46\x3d\x01\xb3\xa3\xdd\xf9\x86\x04\x6d\x7f\x60\x12\x8d\x22\xed\xec\xf1\x55\x77\x70\xea\x90\xbd\x27\x8c\x31\xb6\xe2\xa2\xb8\x7f\xac\x45\x2e\x16\xb9\xfc\x1f\xa4\x8c\xcb\xbc\x86\x9c\x8b\xe9\x73\x5b\xc1\x5a\xcc\xc3\x0a\xf8\x6a\x35\xbe\x42\x5e\x41\xcd\x97\xa2\x28\x8b\x0a\x24\x87\xf5\x64\xd9\x70\x09\xe5\xec\xe7\x59\xb6\xde\x96\x50\x0b\x5e\xf2\xbb\x5c\x26\xe7\x24\xd1\xb6\xeb\x29\xca\x93\x79\x54\x34\x27\x52\x0d\xe9\x37\x4c\xd9\xc2\x39\x83\xca\xfe\x0b\xe2\xde\xbb\x43\xca\x24\xee\xd1\xa3\x6d\x90\x37\xe4\x7c\x31\xec\x19\xc7\xe4\x7e\x18\x1a\xb5\x43\x93\xb2\x8a\xbc\xb6\x2f\x93\xff\xd4\x61\x7a\x51\x49\x18\x35\xae\xc5\xd9\x3c\x09\xf6\x88\x96\x22\xad\x43\xaf\x5d\x9b\xb2\x4d\x78\x86\x5b\x63\xf6\xb6\xd5\xc3\x46\x65\x96\x8a\x54\xca\x9e\x38\x91\xd7\xbb\x9e\x70\xcc\xf3\x3c\xf0\x0f\xc7\xa3\xdb\x13\xb8\x6e\xe3\x90\x37\x17\x71\xad\x83\xbf\xe3\x67\x46\x5b\xdd\x28\x93\xb9\x16\x6f\x2c\xe1\x17\xfe\x11\xfd\xf2\xd7\x3f\xf4\xe8\x4f\x1b\xe5\xd5\x61\x6a\x61\x00\x2c\x96\xd1\xa1\x41\x82\x10\x39\x60\x7d\x66\x25\xf7\xc5\x48\xee\x3b\x9b\x47\x03\xd7\x81\xa3\x7a\x92\xf3\x47\x00\x00\x00\xff\xff\x63\xa3\xee\x20\x2d\x03\x00\x00")

func typeRelationshipGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeRelationshipGraphql,
		"type/relationship.graphql",
	)
}

func typeRelationshipGraphql() (*asset, error) {
	bytes, err := typeRelationshipGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/relationship.graphql", size: 813, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0xc9, 0xe4, 0xdb, 0xb8, 0x85, 0xb, 0xac, 0x12, 0x28, 0x43, 0xcc, 0x60, 0x9d, 0xaf, 0x3b, 0x0, 0x9, 0xee, 0x97, 0x3b, 0xc5, 0xf8, 0x37, 0x5e, 0x7, 0x8b, 0x6, 0x79, 0x1, 0x7e, 0xfc}}
	return a, nil
}

var _typeReviewGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x8f\x41\x4f\x84\x30\x10\x85\xef\xfd\x15\xc3\xdf\xe8\xad\x71\x49\x24\x7a\xd8\x80\x17\x63\xf6\x50\xcb\x88\x73\xe8\x94\xd4\x41\x25\x86\xff\x6e\x98\x12\xc5\x03\x89\x7b\xe2\xf1\xe6\x75\xde\x7c\x06\x79\x8a\x50\xc7\x24\x94\x18\xbe\x0c\x00\xc0\x7d\x73\x57\x83\xaa\x53\xd3\xfd\xfe\xdc\xba\xf3\xf9\xb1\xc8\xce\x9d\xcc\x62\x0c\xf1\x38\x09\xb4\xf8\x4e\xf8\xd1\xa8\x2e\x0b\x42\x62\xc1\x4f\xb1\xd0\xe2\x0b\x66\xe4\x80\x35\x0b\xc9\xac\x99\x4a\x23\xcf\xf3\x6e\xea\x82\xa4\xbc\x1b\x86\x14\x23\xb2\x58\xe8\x24\x13\x0f\xc5\xcc\x5e\x88\x07\x0b\xad\x7e\x35\xad\x3e\x96\xdb\xed\x0f\x84\xba\x14\xfd\x80\x6f\x16\x9e\x9c\x88\x0f\xaf\xeb\xba\x52\x70\x29\x0d\x19\xbd\x60\xef\xc4\xc2\x03\x45\xac\x56\x1a\x99\x47\xdc\x60\x36\x0e\xea\xff\x9e\x70\xc4\x75\x84\xf4\x6f\x9a\xeb\x40\x8e\x18\x76\x65\xeb\x83\x9b\x22\xab\x8b\x59\xbe\x03\x00\x00\xff\xff\x36\x8e\x7c\xff\xe6\x01\x00\x00")

func typeReviewGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeReviewGraphql,
		"type/review.graphql",
	)
}

func typeReviewGraphql() (*asset, error) {
	bytes, err := typeReviewGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/review.graphql", size: 486, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5, 0x29, 0xf9, 0x7b, 0x21, 0xf9, 0xd3, 0xc8, 0x5a, 0x4f, 0x5b, 0xf7, 0xda, 0xa2, 0x20, 0x76, 0xd4, 0x8, 0x77, 0x6a, 0xc9, 0xec, 0xc6, 0xcb, 0xe9, 0xa8, 0xf0, 0x91, 0xd2, 0x3e, 0x84, 0xc1}}
	return a, nil
}

var _typeScheduleGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x90\xbd\x4e\x2b\x31\x10\x46\x7b\x3f\xc5\x17\xdd\xfa\xf2\x00\xee\xc2\x36\xd0\x21\x52\x46\x14\x13\xef\x64\x33\xc2\x3b\x63\x79\x27\x91\x16\xc4\xbb\xa3\xdd\x55\xa0\x20\xfc\x08\x89\xd2\xe3\xe3\x39\xd6\x09\x41\xb4\x1c\x1d\x9b\x74\xe0\xf6\x98\xb9\xa9\x4c\xce\x78\x0e\x00\x40\xc9\xe5\xc4\x11\xd7\x66\x99\x49\x57\xf3\x70\xe0\x7a\x92\xc4\x0d\x39\x77\x56\xc7\x88\xed\xc6\xab\x68\xb7\x7a\xb8\x74\xdd\x58\xcb\x11\xdb\x26\x8b\x4a\xa2\x3c\x1d\x6f\x27\xe1\x99\x2e\x9c\x84\xb2\xf8\x87\x3d\x94\xdc\x6a\xc4\xf6\x9e\xf7\x5c\x59\x13\xaf\xa7\xc1\xe5\xb7\xdf\x48\x4a\x26\x55\xd1\xee\xc6\xaa\x3c\x99\x46\xdc\x71\x15\x6b\x17\x64\x26\x92\xf5\x3d\xab\x47\x2c\x5f\x08\x2f\x21\xfc\x7b\x4b\x82\xff\x58\x23\x99\x3a\x89\x72\xc5\xde\x2a\x86\x6c\x3e\xc0\xf6\x70\xe9\x19\x7e\x20\x47\x4f\x23\x76\x0c\x3a\x91\x64\xda\x65\x9e\xb9\x9d\xd9\xa3\x68\x07\x2a\xc5\x44\x7d\x72\x0c\x57\xc1\xc7\xc2\xef\xdb\x97\xd4\xd2\x9e\xe5\xab\x3f\x4c\xff\xcb\xea\x3f\x09\xfe\x75\xeb\x4f\x32\xbf\x06\x00\x00\xff\xff\x3a\x5e\xb6\xe5\x7e\x02\x00\x00")

func typeScheduleGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeScheduleGraphql,
		"type/schedule.graphql",
	)
}

func typeScheduleGraphql() (*asset, error) {
	bytes, err := typeScheduleGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/schedule.graphql", size: 638, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfe, 0xd2, 0x93, 0xba, 0xf, 0xb9, 0x53, 0x2, 0xc3, 0x87, 0xd, 0x6c, 0x40, 0xf7, 0xb7, 0x33, 0x4e, 0x17, 0x39, 0xc8, 0x50, 0x9a, 0x4b, 0x1e, 0x55, 0xbd, 0x67, 0x56, 0x69, 0x40, 0xc9, 0x8a}}
	return a, nil
}

var _typeSearchGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x4f\x23\x49\x0c\x3d\xa7\x7e\x85\xa3\xdc\xf7\x07\x44\xda\x43\x36\xb0\x22\xd2\xb2\x83\x00\xcd\x65\xc4\xc1\xa9\x76\xa7\x3d\xaa\x72\xb5\x5c\xee\x40\x86\xe1\xbf\x8f\xaa\xbf\x80\x21\x48\x73\x2b\xbf\xe7\x67\x97\x9f\xed\x56\xb0\x93\x3a\x69\x44\xe3\x24\x50\x27\x85\x16\x0f\x2c\x68\x2c\x07\xb0\x86\x33\x28\xf9\xa4\x55\x76\x76\x6a\x09\x6e\xf0\x40\x45\x00\xcf\x0e\x00\x60\x05\xd9\x50\x0d\x76\x17\x90\x6a\xb0\x86\xc6\x6c\xb7\xe8\xf1\x6d\xa7\x39\xe9\x1a\xee\x4c\x59\x0e\xa3\x82\xa4\xfa\x98\x5f\x28\x92\xea\xac\xa0\xc1\x0c\x31\xe9\x94\x9b\x21\x29\x48\x32\xb7\x68\x30\xff\x4f\x4f\xb6\x86\x7f\x52\x0a\x84\xb2\x74\x2f\xce\xad\x60\x03\x8f\x8a\x6d\x4b\x0a\x69\xff\x9d\xbc\xf5\x53\x65\x52\xf4\x0d\x28\xe5\x2e\xd8\x30\xcb\x1d\xa1\xfa\xe6\xb6\x47\x32\x3c\xbb\xc5\x0a\xee\x1b\x02\x4b\x86\x01\xa4\x8b\xfb\x52\xa1\x9e\xe7\x5f\xf4\xc4\x36\x75\x62\x6b\xd8\x89\x2d\x27\xc1\xf4\xad\xd2\xa6\x26\xf3\xcd\x5f\x6e\x31\x62\x6b\xf8\x76\x45\x18\xac\xb9\xed\xe3\xa1\xe3\xf2\xa1\x28\xff\xd4\xf6\x45\x3b\x5a\xbe\x9e\xcd\xef\xe7\x64\x69\x3b\x1b\x67\xd8\xf5\xef\x69\x25\xa5\xda\x63\xc3\xbe\x01\x9f\x24\x77\x91\xb4\x27\xa6\x60\x77\x31\xf9\xbb\x1c\x05\x43\x2b\x28\xa6\x64\xe0\x1a\xa4\x0b\xa1\x2c\x47\x00\xcb\xa3\xc0\x7d\x66\xcd\xc1\x48\x7f\x1f\xea\xfe\xd4\xd2\xf2\x61\x2c\x15\xf1\x89\x63\x17\xcf\xd8\x57\xf8\xc0\x91\x07\xf3\xde\xdc\x82\xef\x72\x59\xfa\x90\x80\xd9\x2e\x3f\x39\x83\xe1\xd2\x8c\x23\xf5\x40\x1f\xae\xe1\x7e\x8a\x87\x62\x33\x4d\x52\x8d\xe4\x8b\x73\x9d\x14\x97\x3f\x6e\x02\xfe\x86\x4d\x75\x24\xcd\x74\x79\x24\xb1\x81\x82\x9f\x70\x17\x88\xda\x39\xba\x26\x0c\x73\xb0\xf1\xc6\x47\xb6\xd3\x0c\xec\x62\xec\x84\x7f\xf4\x8b\x7c\xcd\x0a\x81\xf4\xf0\x9a\xb4\x0d\x2c\xec\x31\x6c\x72\xa6\x1c\x49\xec\xcb\x3e\x93\x1e\xdf\x8b\xb6\x49\x2a\x7e\x87\x5c\x8a\x2f\xe7\x46\x3a\x23\xff\x62\xe4\x70\xba\xa6\xe2\xee\x15\x67\x4b\xfa\xf6\x27\xe5\x84\x0e\xc3\x41\x9f\x6b\xf0\x1f\xee\x3f\x27\xaf\xa9\x62\xff\x1e\xba\x21\xcd\x49\x30\x6c\x1b\x54\xf4\x46\xca\xd9\xd8\xe7\x73\xea\x1b\x4d\x9e\xaa\x4e\xe9\xd5\xc3\xe4\x19\xc3\xf8\xc7\x73\x92\xaf\x6c\x18\x3e\x10\xee\x57\x00\x00\x00\xff\xff\x38\x33\xcd\x4e\x92\x04\x00\x00")

func typeSearchGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSearchGraphql,
		"type/search.graphql",
	)
}

func typeSearchGraphql() (*asset, error) {
	bytes, err := typeSearchGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/search.graphql", size: 1170, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x44, 0xeb, 0xfe, 0xa1, 0x30, 0x32, 0x77, 0x12, 0xc4, 0xf1, 0x5d, 0xd6, 0x9b, 0xaf, 0xf9, 0xef, 0xba, 0xb, 0xc3, 0x36, 0x1e, 0x4a, 0x6f, 0x39, 0x73, 0x2, 0x15, 0x5a, 0xdf, 0x6a, 0x69, 0x16}}
	return a, nil
}

var _typeSleep_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x55\xcb\x6e\xdb\x3a\x10\xdd\xeb\x2b\x68\x64\x7d\x17\xb7\xed\x4a\x3b\x25\xb5\x53\xa3\x8f\x14\xb6\x8b\x2c\x82\xa0\x60\xa9\x91\x43\x58\x1c\x0a\x43\xb2\xa9\x1a\xe4\xdf\x0b\x3e\x12\x51\xb2\x9d\x06\x28\x50\x64\xd1\xe5\x3c\x38\x73\x38\x67\x0e\x59\x00\x3a\xc5\xd6\x2d\x40\xb7\xb6\x7c\x0b\x9b\xbe\x03\x76\x57\x30\xc6\xd8\x7a\x53\x9d\xcf\xbf\x5e\x56\xef\xe7\x99\xb9\x9a\x7f\xcc\xac\x4f\xff\xe7\xc6\xab\xdc\x78\x9d\x1b\x6f\x8a\xfb\xa2\xb0\xbe\xf4\xd0\x29\x75\x91\x75\xc9\xd6\x96\x24\x6e\x67\xc1\xf6\x59\xe5\x04\x50\x08\xd4\x8e\xb8\x95\x1a\x4b\xb6\x68\x35\xb7\xc1\xd7\x72\x0b\x28\xfa\xdc\x65\xb5\xe5\x6d\x38\xbe\x91\x0a\xf2\x88\xf1\xce\xcf\x40\x52\xd7\x79\xe8\xbe\x28\x24\x76\xce\x66\x3d\x97\xc1\xbe\x7b\x09\x78\xce\x34\x5a\x89\x4e\xda\x3e\x07\x65\xb4\x23\x01\x17\x4d\x45\xda\x19\xde\x3e\x4c\x30\xc4\x10\x48\x9d\x69\x87\xb6\x64\x4b\xb4\x8f\xae\x25\xd6\xf0\x23\x6f\x4f\x30\x4d\x23\xd8\xcf\x0a\xf0\x27\x79\xc1\x37\xca\x1c\xb1\x3b\x40\x3e\x42\xf1\x0b\x44\x7f\x12\xd9\x60\x04\x42\x53\xcd\x04\x01\xb7\x90\xf3\xb0\x0a\x81\xb3\xe0\x4f\xd7\x3a\x61\x0b\xd2\x8a\xdd\x00\x6f\xed\xcd\xe4\x64\xc0\xcd\x3d\xa9\xf9\xc5\x85\x46\xe3\x14\xd0\xf2\xed\xd8\x5f\x83\x11\x24\xbb\xb8\x4d\xd9\x30\xb4\x10\x8e\x08\xea\x92\xf9\x05\xc9\x87\xf7\x78\x9e\xb1\x98\x49\x5b\x8e\xf2\x27\xcf\x4b\xa4\x50\x3c\x10\xf1\x87\xc6\x23\x3b\x6c\x55\x9a\x5f\x03\x04\x28\xc0\x94\xec\x6a\xf5\x60\xbc\x0b\xb7\x4b\xd9\x3e\x77\x76\x1d\x37\x5d\x8b\xd4\xec\x1c\xf4\x87\x64\xc4\x15\x2d\xd2\x74\xe2\x44\x8d\x75\x75\xcf\x08\x5a\x4e\x50\xa7\x29\x45\x5c\x96\x93\x8d\x8b\x3f\xdc\x0e\xb0\x9e\xba\x14\x97\x18\x28\x28\xd9\xa9\xd6\x2d\x70\x8c\x34\x4a\x05\x5f\x50\xda\xd1\xc0\x02\xb7\x11\xac\xc4\xed\x54\x70\xc7\xa5\xe8\x8b\x55\xb7\x7c\xb7\xaf\xcf\x79\xd3\x48\x21\xf7\x44\x2d\x15\x6c\xf4\x82\xb7\x6d\x65\x22\xb4\x21\x86\x4e\x7d\x03\xba\x68\xaa\x5b\xd8\x01\x4a\xdc\x9a\x6c\xf7\x7c\x9f\xc6\x02\x5d\xf2\x1d\xb8\x6e\x5a\x72\x89\xa7\x9e\xec\x09\x84\xf0\xec\xac\x9d\x52\x9c\xfa\x92\x5d\x4d\x9e\xa9\xc4\x87\x19\x29\x4f\x06\x12\x0f\x3d\x20\xb3\xeb\xb8\xee\x21\xc6\xfe\xdb\x23\xc9\x0e\x24\x0d\x8a\x8e\x13\x65\x52\x75\x2d\x28\x40\x6b\x58\xbe\x16\x4f\xc8\xe1\xa0\xfc\x8f\xa9\xa0\x23\xf8\x2e\xb5\x33\xb1\xea\x88\xd7\x58\x6d\x13\x9e\xe2\xbc\xb5\xf7\xa4\x6f\x83\x38\x1a\x2e\xfc\x16\x1e\x48\x1b\x07\x67\x47\xe4\xf9\x47\x32\x4c\x6a\x8b\xfa\x1f\xa5\x1e\xd2\xe6\x33\x94\x99\x97\x3b\xed\x27\xe3\xf8\x9d\x54\x9f\x52\xe9\x3f\x7d\xfe\x25\x7d\x3e\x5f\x9a\x5e\x95\xbf\x02\x00\x00\xff\xff\xee\x4e\xdd\xca\x8a\x09\x00\x00")

func typeSleep_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSleep_recordGraphql,
		"type/sleep_record.graphql",
	)
}

func typeSleep_recordGraphql() (*asset, error) {
	bytes, err := typeSleep_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/sleep_record.graphql", size: 2442, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x9, 0x6, 0x1c, 0x67, 0x8b, 0x15, 0xa2, 0x32, 0x19, 0x65, 0xd3, 0x96, 0xc9, 0xa4, 0xff, 0x63, 0x35, 0x48, 0x7b, 0x8a, 0x58, 0xb6, 0x14, 0xab, 0xd1, 0xa8, 0x7d, 0x2, 0x20, 0xfb, 0xc2}}
	return a, nil
}

var _typeSlotGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x51\x5d\x6b\x83\x40\x10\x7c\xbf\x5f\xb1\xd2\xe7\xf6\x07\xf8\xa6\xe9\x15\x84\x60\x8a\x9a\x40\x09\x45\x2e\xba\x49\x8e\x9c\xb7\xa2\x6b\x40\x4a\xfe\x7b\xd1\x6b\x3e\x9a\x3c\xa4\x90\x3e\xdd\xed\xce\xdc\xcc\x70\x23\xd0\x76\x15\xa4\x86\x38\x65\xc5\x5d\x0b\x5f\x02\x00\xd2\xe9\x2c\xcb\xc3\x79\xfa\x71\x1a\xde\x12\x29\x7f\x21\xf9\x3c\x0e\x16\x41\x34\x0d\xc2\xe9\x15\x90\xc9\x38\x0b\xb2\x68\x71\x5e\xcb\x38\x93\x89\x7c\xcd\xa3\x38\x97\x49\x32\x4b\xc4\x41\x08\x6d\xeb\x8e\x47\xe3\x49\x83\x8a\xd1\x19\x43\x3b\xa6\xf0\x2f\x12\x79\xe3\x9e\xf6\xd8\x84\x44\x3b\x2c\x7d\x08\x89\x0c\x2a\x7b\xc1\x9f\x50\x89\x3e\x4c\x8c\xb6\xba\x50\x66\x98\xa2\x41\xde\x31\x6a\x2c\xb4\x32\x9a\x7b\x1f\x96\x29\x37\xda\x6e\xbc\xcf\x2b\xc4\xbd\x5f\xde\x08\x1c\x89\xd8\xec\x75\x81\x59\x5f\xe3\x8d\xc6\x19\xba\x27\x52\x6c\xb1\xec\x0c\xfa\x90\xe0\x1a\x1b\xb4\x05\x4a\xcb\x9a\x7b\x47\x1a\x39\x05\x55\x15\x5a\xf6\xc1\x79\x8c\xbb\x1a\x1b\x4d\xa5\x0f\xef\xe3\xf9\x43\x3e\x08\xf1\x34\xfe\x11\x3c\x43\x00\xed\x70\xa1\x35\xb0\xae\x10\xc8\x82\x3a\x99\x01\x6f\x15\x43\xa5\x7a\x58\x21\xa8\xbd\xd2\x46\xad\x0c\xc2\x9a\x1a\x58\x11\xed\xb4\xdd\x80\xaa\x6b\xd2\x96\x07\xdf\xf6\x45\x70\x5f\xa3\x13\x76\x7d\xe8\xf2\x18\xc6\xfb\xd7\x7e\x1e\xa9\xe6\xd1\x56\xee\x15\xf2\xd7\x2e\x3c\x71\xf8\x0e\x00\x00\xff\xff\x49\x3b\x0c\x43\x3f\x03\x00\x00")

func typeSlotGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSlotGraphql,
		"type/slot.graphql",
	)
}

func typeSlotGraphql() (*asset, error) {
	bytes, err := typeSlotGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/slot.graphql", size: 831, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8d, 0x9d, 0xd0, 0x46, 0xb6, 0x55, 0x58, 0x64, 0x6, 0xd3, 0x9, 0x58, 0x97, 0x8f, 0xac, 0x13, 0xe6, 0x7d, 0x19, 0xfc, 0xe3, 0x60, 0xdc, 0x25, 0x1d, 0xc6, 0xdc, 0x5e, 0x26, 0x1a, 0xa6, 0x2}}
	return a, nil
}

var _typeSocialhistory_observation_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x53\x5d\x8f\x9b\x30\x10\x7c\xcf\xaf\x70\xd4\x7f\xc1\x1b\x4d\x9c\x80\x8e\x83\xc6\x40\xda\x53\x55\x45\x8e\xd9\xbb\xb3\x04\x36\xf2\x47\xa4\xf4\xd4\xff\x5e\x61\x9b\x26\x9c\x9a\x8f\xaa\x2f\xf7\x14\xaf\x77\x58\xcf\xce\x4c\x40\xd8\x0e\x95\x92\x71\xda\x26\x5c\x1b\xa9\x8e\xc5\x5e\x83\x3a\x50\xc3\xa5\xa8\x8e\x3d\xa0\xb7\x19\x42\x08\x95\x8f\xc5\x43\x9a\xaf\xdd\x39\xce\x16\x45\x52\x64\xee\x4c\xf0\x82\xe0\xb8\x4a\x8b\x3c\xce\x76\x4b\x52\x7b\x44\x9a\x57\x98\xe4\xb8\xda\x95\x35\x59\x8d\x9f\x95\xf8\xdb\x2e\x4b\x57\xd8\x15\x45\x95\x60\x32\xfb\x35\x9b\x5d\x25\x50\x1a\x6a\xac\x0e\x14\x72\xbc\xc5\x24\x8c\x5f\x11\xbc\xa9\x71\x5e\xb9\x32\x4b\xd7\x89\x3f\x3d\x16\x4b\x4c\xe2\xca\x3f\x91\xe0\x78\xfb\xe4\x4e\x5b\x4c\x9e\x76\xa7\x72\x53\xa7\x1e\x5e\xe7\x0f\x79\xf1\x35\x1f\x68\x70\xd1\x5b\x73\x91\x07\x01\x26\x55\xb3\xb1\xa0\x8e\x5f\xa8\xa2\x5d\x60\xc4\xa4\xd0\xb6\x03\x95\x2e\x23\x54\x1a\xc5\xc5\xcb\xdc\xdd\x9b\x63\x0f\xd1\x55\x55\x1d\x4c\xbb\xed\x2e\x03\xfd\xf6\xf7\xb2\x5b\x28\xa0\x66\xb4\xeb\x13\x5a\x29\xd9\xa1\x57\xa0\xad\x79\x45\xca\x01\x5c\x43\xd0\x0e\xa6\x64\x2f\x2d\xd1\x80\x66\x8a\xf7\xc3\x03\x63\xc3\xdd\x4b\xc6\xac\x52\xd0\x44\xa8\xe2\x1d\x78\xac\x96\x56\xb1\xd3\x5c\x84\x3c\x52\xbd\x50\xc1\x7f\xd2\xf3\x11\xa1\xe5\x3f\xf0\xc4\xdd\xc3\x93\x3a\x1d\xd6\x75\x38\x05\xcf\xa0\x40\x30\xd0\x11\xfa\x4e\xc6\x22\x71\x6b\x05\xf4\x80\x9d\xff\x70\xe8\x56\xb2\xf0\xd8\x1a\x64\x16\x0a\x07\x40\xb3\x73\x59\xe2\xa6\xe1\x6c\xe8\xdd\xe9\xd6\xfc\x1f\xec\x0a\xe2\x59\x15\x98\xa4\xc2\x4c\x6e\x6a\xc1\xcd\x1f\x31\x5c\xe7\x40\x5b\x0b\x11\xda\x0e\x3f\x81\xac\xf7\xa5\x81\x08\x2d\x64\x43\xf7\x2d\x2c\xa4\x60\xd0\x9b\x93\x30\xda\x50\x65\xbc\x05\xae\x06\x11\x0c\x19\xe2\x32\x6c\x74\x23\x2d\x88\x77\x7d\x0b\x1d\x08\xa3\xd1\xb9\x9c\xe8\x6d\x54\x6a\x92\x1d\xa4\x7b\x60\xfc\x99\x33\xd7\xe4\xcd\x7d\x11\xea\x15\x1c\xb8\xb4\xda\x8f\x9e\xa4\xc8\x8f\xad\x9c\xf4\xe7\xef\x9f\xe4\x36\x8a\x0a\x4d\xd9\xe8\xc1\x3b\xd8\xb4\x39\xbf\x90\xed\xff\xca\x70\x88\x2a\x73\xff\xab\x09\xf4\x6f\xc1\xbe\x23\xd6\xe7\xe3\x3e\x1f\xdf\xc9\x71\x2b\xe7\xd7\x22\x3e\x5a\x96\xd0\x3d\x37\x53\xab\x3e\x52\xb8\x2f\xe7\xfa\x56\xa4\x7f\x07\x00\x00\xff\xff\xf1\xa6\x04\x7e\xa6\x06\x00\x00")

func typeSocialhistory_observation_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSocialhistory_observation_recordGraphql,
		"type/socialhistory_observation_record.graphql",
	)
}

func typeSocialhistory_observation_recordGraphql() (*asset, error) {
	bytes, err := typeSocialhistory_observation_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/socialhistory_observation_record.graphql", size: 1702, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb, 0x34, 0xcb, 0x3c, 0xd1, 0x15, 0xad, 0xa2, 0x40, 0xe8, 0x7e, 0xde, 0x28, 0x2e, 0xf4, 0x45, 0x79, 0x5e, 0x4f, 0x18, 0x6e, 0xa5, 0x6a, 0x71, 0x47, 0xc1, 0xf4, 0x46, 0x9, 0xcb, 0x49, 0x5e}}
	return a, nil
}

var _typeSourceGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x8e\x31\x0e\xc2\x30\x0c\x45\xf7\x9c\xe2\x23\x56\xc4\x01\xb8\x01\x73\x4f\x10\x25\x4e\x65\xa9\x75\x22\xc7\x19\x02\xe2\xee\xa8\xa1\x0c\x5d\x91\xd8\xec\x67\xf9\xe9\xb9\x33\xa6\xdc\x34\x10\x22\x25\x16\xaa\xf0\xd2\x61\xbd\x10\x72\x42\xfd\x9c\xb2\xce\x5e\xf8\xe1\x8d\xb3\x20\x65\xc5\x4a\x91\x83\x5f\x50\x5a\x59\x38\x0c\x7e\x41\xb5\x16\x3b\xc8\xc2\xd5\xb1\x94\x66\xbb\xf8\x3e\xe6\xa7\x03\x20\x7e\xa5\x1b\x26\x53\x96\xf9\xb4\x81\xa6\x7c\xd8\x23\xd5\xa0\x5c\x36\xdf\x97\xc3\xbd\xdc\x7f\x22\xc7\xff\xee\x1d\x79\x1c\x0f\x31\x3f\xd6\xbe\x03\x00\x00\xff\xff\xc4\x47\x1a\xd2\x52\x01\x00\x00")

func typeSourceGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSourceGraphql,
		"type/source.graphql",
	)
}

func typeSourceGraphql() (*asset, error) {
	bytes, err := typeSourceGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/source.graphql", size: 338, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x31, 0x75, 0x4, 0x49, 0xc5, 0x29, 0xe, 0x9f, 0x1a, 0x2e, 0xc0, 0x85, 0x18, 0x78, 0xdb, 0x3b, 0xa5, 0x19, 0xe1, 0xa, 0xe2, 0x92, 0xe2, 0x4c, 0xdf, 0xbc, 0x2e, 0xa, 0xd, 0x5c, 0xcf, 0xe2}}
	return a, nil
}

var _typeSource_consumer_idGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\xcf\x6a\xdc\x30\x10\xc6\xcf\xeb\xa7\x98\xb2\x87\xb6\xb0\x87\x9c\x73\x73\x2c\x87\x08\x62\xc7\xf8\x0f\xb4\xa7\xa0\xc8\xd3\x5d\x51\x5b\x32\x23\x69\xa9\x29\x79\xf7\x62\x39\x2e\x51\x76\x1f\x20\x27\x69\xe6\x37\xf3\xcd\x7c\x48\xa8\xfd\x08\x8d\xf1\x24\x31\x33\xda\xfa\x11\x89\xb3\xce\x22\xfc\x4d\x00\x00\xba\xa6\x4b\x1f\x0f\xe1\xfa\x74\x7f\xcf\x33\xbe\x45\x6d\x5e\x54\xeb\xad\xc9\xb3\xa7\x92\xa5\xf5\xcf\xe4\x35\x49\xae\xca\xb5\xf3\xb4\xe9\xb1\xc7\xc3\x6e\x39\xf7\xc0\x48\x9d\x91\xbe\x5a\x18\x94\x44\x6d\x11\xb4\x1f\x5f\x90\x76\xa1\xac\xaa\xca\xc3\x6e\x0f\x95\xb0\x76\x32\xe4\x22\x76\x57\x07\x76\x47\x88\x3d\xd4\x78\x54\xd6\xd1\x0c\xe5\xbb\x8a\xa2\xde\x86\x14\xd8\x2b\x29\x06\x20\x94\x86\xfa\x48\xa6\xc8\x82\x4c\xa1\x24\x19\x79\x52\x53\xa4\x90\x97\x9b\x42\x3e\x4e\x83\x99\x91\xa2\xde\x36\xfd\xb1\xf4\xb6\xe2\x0f\x70\x16\x91\x92\xf3\xea\x10\x1a\x4b\xe1\x94\xd1\x62\x00\xae\xad\x27\xa1\x25\x42\x25\x66\x43\xc0\x7b\xd4\x4e\xfd\x52\x48\xf0\x2d\x64\xbe\xbf\x79\x5e\x7d\x55\x64\xce\xaa\xff\x30\x90\xfd\x77\xc4\x8c\x36\xb4\xd9\x0e\x23\xa2\xc5\xd3\xac\x29\xd7\xc2\x54\x4a\xb4\x76\xe1\x9c\xad\xa8\x6b\x1f\x9e\x6f\x56\xe6\xdd\xe9\x66\xcb\xe7\xed\x43\x5e\xe7\x5d\xf1\xcc\x19\xec\x73\x77\x42\x42\x3f\xc2\xcb\x60\xe4\x6f\x79\x12\x2a\xf4\xbf\x26\x89\xd2\x93\x77\x17\x4f\xcb\x43\x76\x7d\x5b\x3b\x5b\x87\xe3\x2d\x34\x8e\x94\x3e\x7e\x09\xb9\xb3\x18\x3c\xc6\x29\xeb\x04\xb9\x5b\x68\xd5\x88\x21\x46\xdd\xbf\x8b\x84\xb5\xea\xa8\x91\xe2\x1e\x6f\x17\x91\xcb\x5f\x1a\xa0\x9b\xa7\x2b\x74\xf9\x74\xcb\xde\x0b\xbd\x80\x6f\x1b\xab\xfe\xc3\x6a\x9f\xd0\xc1\xbf\x00\x00\x00\xff\xff\xff\x98\x65\xb1\xa1\x03\x00\x00")

func typeSource_consumer_idGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSource_consumer_idGraphql,
		"type/source_consumer_id.graphql",
	)
}

func typeSource_consumer_idGraphql() (*asset, error) {
	bytes, err := typeSource_consumer_idGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/source_consumer_id.graphql", size: 929, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x69, 0xb8, 0x68, 0x8f, 0xba, 0xc9, 0x86, 0xd6, 0x57, 0x7f, 0x28, 0x4b, 0x1f, 0xb4, 0x65, 0xa1, 0xa9, 0xc3, 0x71, 0x55, 0xe6, 0x17, 0x70, 0x7a, 0xa6, 0x1, 0xc6, 0x7c, 0xf0, 0x82, 0x79, 0x11}}
	return a, nil
}

var _typeSource_record_idGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\xca\xcc\x2b\x28\x2d\x51\x08\xce\x2f\x2d\x4a\x4e\x0d\x4a\x4d\xce\x2f\x4a\xf1\x74\xf1\x04\x8b\x55\x73\x29\x28\x28\x28\x14\x57\x16\x97\xa4\xe6\x5a\x29\x04\x97\x14\x65\xe6\xa5\x2b\x82\xc5\xca\x12\x73\x4a\x53\x11\x42\xb5\x5c\x5c\x25\x95\x05\xa9\x68\x86\x40\xf5\x67\xa6\xa0\xea\x25\xc6\x3c\x40\x00\x00\x00\xff\xff\xe5\xea\xfa\x4d\x95\x00\x00\x00")

func typeSource_record_idGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeSource_record_idGraphql,
		"type/source_record_id.graphql",
	)
}

func typeSource_record_idGraphql() (*asset, error) {
	bytes, err := typeSource_record_idGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/source_record_id.graphql", size: 149, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9b, 0x46, 0x5f, 0xc9, 0xff, 0x4a, 0x64, 0xd0, 0xfb, 0x48, 0x37, 0x3f, 0x97, 0xd1, 0x35, 0x7a, 0x74, 0x1b, 0xd0, 0xe7, 0xe2, 0x96, 0xec, 0xc3, 0xa7, 0xd3, 0x5e, 0x52, 0x1f, 0x40, 0xbb, 0x1d}}
	return a, nil
}

var _typeTimeGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x4e\x4e\xcc\x49\x2c\x52\x08\xc9\xcc\x4d\x05\x04\x00\x00\xff\xff\x86\x36\xc3\xbe\x0b\x00\x00\x00")

func typeTimeGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeTimeGraphql,
		"type/time.graphql",
	)
}

func typeTimeGraphql() (*asset, error) {
	bytes, err := typeTimeGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/time.graphql", size: 11, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xfb, 0x68, 0x9a, 0x62, 0x8f, 0xd3, 0xe3, 0xab, 0x0, 0x8f, 0x41, 0xca, 0x3e, 0x50, 0x2d, 0x16, 0x92, 0xd3, 0xff, 0x20, 0x69, 0x1f, 0x33, 0x16, 0xf9, 0xf0, 0xbf, 0x65, 0x8e, 0xd1, 0xf3, 0x8c}}
	return a, nil
}

var _typeTimingGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x4c\xb1\x17\x07\xc5\x9e\xba\xd8\x83\x6f\x8a\xa5\xd4\xc6\xd6\x1f\x91\xa5\x0d\x82\xa2\x08\x68\x6b\x64\x13\xb1\x48\x95\x22\x93\x18\x55\xff\x7b\x31\xa4\x64\xd3\x89\xec\x38\x6d\x4f\x8b\x5c\x22\xd2\x9c\xf7\x48\xbe\xe1\x3c\x32\x17\x28\x4c\x01\xa9\xe0\x7a\x9a\x27\xbc\x40\xf8\xeb\x02\x00\xe6\xd1\x60\x3a\x09\xa9\x35\x1e\x4d\xd2\x24\xa2\xd6\x70\x9a\xc6\xf4\x0d\x83\x3b\xfa\xdc\x46\xd1\x37\x1b\x30\x9d\x24\x43\x6a\xdc\x45\x41\x7c\xf1\xf7\x85\x23\x0c\xd9\xb6\x9a\xe6\xb7\x88\x0f\x8e\x90\xc2\x1a\x20\x24\x69\x34\x6f\xdb\xb7\x51\x38\xd9\xf7\x92\x61\x1a\xef\x3a\xd7\xf1\xa8\x6d\xce\x83\x24\x8d\x77\x9d\xd4\x32\xb5\x33\x45\x8f\x28\x74\xc2\x0b\x2e\x56\xcd\x54\xd1\xf7\x68\x92\xdc\x0f\xe7\xd4\x86\x4f\x80\x14\x00\x72\xb9\x34\xaa\x82\xdf\x65\x9e\x57\xa8\xff\x80\x05\xe6\x52\x21\xe8\x35\xc2\x5a\x1a\x05\x32\x87\x6a\x83\x58\x42\x4f\x2a\xd0\x6a\x4b\x74\x5a\x5e\x7a\x84\xb7\xc1\xb7\xe8\x04\x21\xcb\x35\x2a\x78\x62\x0f\x5c\xac\x3c\xd4\x00\xba\x96\xc1\x34\x30\x28\x90\x6d\xa0\x97\x2b\x59\xd8\x65\xfc\xc6\x34\x17\xb0\xe4\x0b\x53\xf9\xd3\x0e\xc6\x47\x08\x16\x0a\xd9\x43\xce\x2a\xdd\xcd\x01\x05\xd3\x46\x73\xf1\x82\x2d\x3c\xc2\xb6\x31\x62\xb9\x3e\xc2\x94\x71\xa3\x5e\xf2\x7c\x3f\xc2\x93\x71\x21\x50\xbd\x22\x62\x42\x63\xc3\xf6\x88\x55\x89\xea\xd5\xca\x82\xc1\x39\xf9\x3a\xa2\xda\x9e\xfe\x90\x72\x7c\x06\xe5\x71\x1d\xbd\x45\x77\x8a\x19\x38\x35\xdf\xe0\xef\x56\xd6\xe3\xee\x90\x37\x70\xfa\xbe\xc1\xfc\xaf\xb5\x9e\x9d\xa5\xf5\x7f\xa0\x3f\xa9\xbb\xab\x94\x23\x99\x2c\x65\xa5\x5f\x67\x72\x76\x5a\x69\xc7\x78\x3c\x91\x7b\xd2\xee\x44\xce\x4e\xcb\xed\xe8\xbb\xf3\xe8\x51\xef\xf2\xd8\x5a\x93\x73\xa5\x60\xb1\x50\xf8\xc8\x99\xe6\x52\x38\x87\xba\x1a\x35\xbb\x49\x9e\x24\x68\x5e\x60\x05\x0c\x32\xb6\xa5\xfa\xe1\xa2\xd2\x9c\x96\x28\x05\x54\x25\x2e\x79\xce\x31\xb3\x41\x40\xd0\x64\x07\x5d\x2b\xc4\xf3\xc1\x84\xbd\x69\xb1\xd7\x64\x78\xef\x82\x06\xad\x09\x45\x8f\xa8\xb6\x50\x48\x25\xc8\x20\x4f\xe2\x2a\x02\xce\x0e\x81\x56\x49\x21\xa5\x38\x03\x7a\x13\x1e\x40\xc3\xb7\xd6\xe9\x40\xd3\xd0\x07\x4d\xf5\x1a\xd5\xb9\xd0\x2f\x43\x1f\xfa\xc5\xde\x0b\xd5\x39\xc0\xaf\x07\xc0\xaf\x30\x3c\x07\xd8\x1e\x92\x6b\x85\x7f\x1a\x14\x4b\xbc\x92\x46\x64\x55\xb2\x2d\x9b\x3b\xf8\x3a\x8e\x6e\xd2\x68\x32\xb8\xbb\xbf\x9a\xa6\x93\x70\x7e\x1f\xa6\x71\x90\x8c\xa6\x93\xce\xc1\x38\x98\xfc\x1a\x41\xe7\xd0\x2c\x8a\x47\xd3\x10\x68\x46\x2e\x4a\xa3\x9b\x73\x39\xb2\x6d\x3b\xd5\x27\xb8\x5d\xa3\xb0\xa7\xda\xaf\x00\x1a\xb2\xfd\x3e\x24\xed\x01\x7c\x15\xca\x2b\xd0\xd2\x01\x68\x7c\xb1\xdb\x45\xbf\x6b\x6b\x8e\xc2\x05\x41\x66\x94\xab\x8a\x3d\x30\x6c\x7e\xea\xc3\x48\xe8\x83\x60\xc5\xc4\x0a\xf7\x81\x31\x75\xfb\x60\x3f\x6e\x27\x07\xd1\x25\x2a\x2e\xb3\x7d\xf8\xcc\xf6\xfb\xe0\xbe\x3e\x60\x62\x8a\x05\xda\xfb\xdf\x55\x84\x96\xa0\xb0\x44\x66\x67\x5f\x4a\x43\xbb\x1f\x89\x36\x7a\xcc\x9e\x79\x61\x0a\x10\x6f\xa2\xc6\xec\xd9\x07\x0e\xe5\x13\x6c\xa4\x58\xc1\x13\xc9\xc7\x35\xac\x59\x59\xa2\xb0\x1a\x67\xbb\x4d\x5f\x6f\x24\x7b\x0b\x01\xbd\x31\x7b\xbe\xf4\x71\x76\x2a\x1f\x5a\x41\x0d\x05\x17\x50\xc3\x1a\x6a\xc8\xa0\x86\xa7\x07\xfa\x49\x42\x0d\x0c\x3e\x83\x11\x5c\xb7\x6b\x87\x5e\x3a\x48\xc7\x07\x7c\xf4\x1a\xec\x7b\x6f\xc2\x8b\xf6\x74\xef\xbd\x31\x6f\x52\xbb\x6d\xf6\x5f\xa2\xf2\x34\xdf\x8d\xfa\x0a\x1c\xe0\x4d\x49\x92\xed\xe2\xc6\xec\xf9\x34\xd1\x0b\x35\xdf\xb1\x96\xb2\xc9\xbc\xaf\x4f\x5a\x52\xcc\x86\x17\x4e\x06\x17\x02\xbd\x5f\x3e\x37\x45\x7f\xb9\x07\xfe\x5f\xda\x3a\xb6\x6e\x65\x0b\x49\x74\xda\x20\x91\x21\x51\xea\xb5\x81\x1a\x72\xc5\xa1\x86\x8a\x69\xfa\x6b\x84\x4d\x11\xdb\xba\x67\x75\xdf\x7b\x62\x3b\x16\x5b\xa2\x32\xb7\x86\x9e\x4b\x05\x6c\xb9\xab\x2d\x5a\xcb\x41\x0d\xc7\xb8\x32\x1b\x46\x12\xe4\x4d\x1d\x57\x2f\x4a\xda\x1a\x95\xa4\x68\x3a\x7e\xfd\x83\x67\x76\x53\x0a\x5c\x18\x8d\x24\xbf\x2c\x1a\x60\xaf\x79\x39\xd0\xec\xe4\xf4\x76\xe7\xee\x16\xf5\xb3\x47\xf7\x5f\x6d\xaf\xb2\xda\x5e\x4a\x35\xdd\x2f\x35\xdd\x15\x35\xb9\x7e\x6d\x5d\xbc\xb6\x86\x5c\x5b\x77\xfd\xd9\x55\x55\xe6\x36\xf1\xe2\x4e\x25\x5f\xd3\xe4\x9a\xfe\x3f\x01\x3c\xeb\xc3\x5c\x2b\x2e\x56\x3f\xfd\x00\x06\xf7\x1e\x6f\xfb\xb0\xb5\x0f\x5b\xfb\xb0\xb5\x1f\xc1\xd6\xfe\x09\x00\x00\xff\xff\x9b\x1a\x40\x8f\x9b\x11\x00\x00")

func typeTimingGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeTimingGraphql,
		"type/timing.graphql",
	)
}

func typeTimingGraphql() (*asset, error) {
	bytes, err := typeTimingGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/timing.graphql", size: 4507, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0x53, 0x7, 0x94, 0xe0, 0xf3, 0x86, 0x79, 0x88, 0x12, 0x5e, 0xbd, 0xf5, 0xe8, 0x42, 0x53, 0x18, 0x2c, 0x12, 0xa5, 0x45, 0x83, 0x41, 0xa4, 0xd2, 0x64, 0x5e, 0x10, 0xf9, 0x52, 0xd4, 0xf1}}
	return a, nil
}

var _typeValueGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x56\xcf\x4e\xf3\x46\x10\xbf\xe7\x29\x86\x70\xad\xfa\x00\xbe\x05\x62\x50\xa4\x90\x40\x30\x55\xdb\x0b\x9a\x78\x27\xf1\x48\xf6\xae\xbb\x3b\x26\x58\x2d\xef\x5e\x79\x77\x8d\xdd\x90\x94\x52\xf5\x50\x7d\xfa\x2e\x64\x3c\x7f\x7f\xf3\x9b\xdd\x1d\x26\xa4\x9b\x0a\x7e\xc2\xb2\xa1\xac\xad\x09\x7e\x9f\x00\x00\x3c\x3c\xcd\x56\xd9\x22\xfb\xc5\x7f\xcc\xd3\xeb\xc5\xdd\x6c\xe9\xe5\xab\xf5\x7a\x99\xce\x56\x5e\xde\xcc\x56\xb7\x69\x94\xb2\xc5\xda\x4b\x59\xfa\x73\x16\x82\x66\x59\xfa\x9c\x2d\xee\x82\xc3\x7d\xba\x59\xac\xe7\xef\xbe\xab\xdb\x20\xa6\x37\xe9\x26\x5d\x5d\xa7\xcf\x69\xa8\xf6\x36\x99\xb0\xae\x1b\x09\x78\x16\x5e\x0c\x80\x5e\x7a\x80\xc9\x80\xf5\x62\xb0\x3c\x34\xa8\x85\xa5\x4d\x60\xa1\x65\x50\xcf\x29\xe7\x0a\xcb\x04\x6e\x4a\x83\x02\x83\xe1\xca\x98\x92\x50\x27\x10\x85\x51\x0d\x7a\x95\x04\x1e\xc5\xb2\xde\x0f\xda\x0d\xea\x3d\x25\xe0\x7f\x3c\xac\xb1\x49\xd8\x74\x26\x61\x73\x64\x9a\xa3\x50\x02\x19\x57\x34\xe8\xee\xc9\xb2\x51\x09\x84\xdf\x13\xb9\xf4\x3e\x24\xd3\xfb\xd0\xff\xc8\x4a\x3b\xb2\xa4\x73\x4a\x63\xaf\x47\x8a\x21\x59\xa3\x79\x68\xe2\x6d\x32\x91\x6e\xb2\x9e\xb7\x48\x27\xab\xde\x7c\xf1\x9f\xd1\x7b\x9a\xad\x7f\xcf\xf9\xe7\xec\x9d\x23\xee\x0b\x9c\x9d\xa4\xeb\x12\x66\xf0\x88\x55\x5d\x92\x9a\xa3\x20\xd4\xd6\xbc\xb0\x22\x07\x08\xb9\xd1\x39\x3b\x82\x03\xb6\x20\x06\x0a\xd4\xaa\x24\x90\x82\x40\x45\x4f\xd5\xe4\xa4\x60\xdb\x82\xa2\x17\xce\xc9\x81\x14\x28\xe0\x7c\x3a\x40\xa8\xd1\x0a\xe7\x4d\x89\x16\xea\xa2\x75\x9c\x63\x09\x4e\x50\x08\x50\x00\xa1\xe0\x7d\x01\x3b\x4b\xbf\x35\xa4\xf3\xf6\xc7\x78\x1d\x46\x60\xc6\x97\xe2\x12\x7e\x25\x6b\x42\xa3\x80\x5a\xf9\x46\x9c\x37\x19\xcb\x7b\xd6\x7e\x5e\x17\xd1\xb7\x33\x82\xd9\x41\x45\xe8\x1a\x4b\x1f\x3a\xef\xfd\x56\x4d\xb5\x25\xeb\x3d\xb9\x2c\xd9\x51\x6e\xb4\x72\xb0\x25\x39\x10\xe9\xd8\x49\xa8\x52\xc7\x71\xf8\xf9\xf7\xf1\x77\x4d\x29\x5c\x97\x6d\x60\x64\xdb\x82\x14\xdc\x85\xef\x8c\x25\x40\xa5\xba\x01\x89\x89\x08\x7d\xcc\x0e\x73\x31\xf6\x28\xcd\xd2\x1c\xc8\x42\xc9\x55\x40\xad\x48\x28\x17\x36\x21\xa2\xec\x8c\xcb\xce\xf6\x97\xbb\x7d\x09\x4f\x75\x7d\x3e\xaa\xe9\x8c\xe3\xa8\x0f\x1d\xc7\x31\xd5\x86\xb5\xb8\x6e\x22\x84\x79\x01\xc2\x55\xd4\xf9\x00\xc5\x15\x69\xc7\x46\x3b\xcf\x6f\x5f\x3a\xde\x86\x30\x0e\x07\x07\x96\x02\x5c\x8d\x39\xb9\x1f\xc0\x58\x98\xa6\x53\xf8\x03\xa6\x4f\xfe\xef\x72\x1a\x32\xa1\x60\x4f\x3f\xfc\xcf\x4e\x9e\x7f\x33\xc6\x58\x4e\xbf\x1c\xdf\xcf\xe0\xb7\x76\x06\xc3\x93\x33\x5e\x41\x61\xf2\x55\x3f\xcb\x50\xac\xc2\xd7\xd1\x68\xad\x77\xf7\xbb\x23\x6a\xfb\xb5\x13\x9f\xe4\xd3\xa7\xe7\xeb\x39\x03\xba\xd1\xf6\x8c\x99\x9d\xa0\x95\xb0\x2e\x42\x34\x69\xd5\x7f\xf6\x50\x42\xd4\x19\x28\x9f\x24\xe8\x59\xe9\xff\x01\x38\x26\xe5\x08\xff\xd0\xbd\xde\x9f\x5b\xba\x7f\x13\x3b\xcc\xc0\x8c\xab\xe9\xa6\x22\x8b\xfe\x9c\xbe\xc7\x29\xd2\xa6\x62\x3d\xd2\x8e\x99\x37\x67\x6a\xff\xd3\x4c\x7f\x06\x00\x00\xff\xff\x54\xb7\x7a\x13\x1f\x0a\x00\x00")

func typeValueGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeValueGraphql,
		"type/value.graphql",
	)
}

func typeValueGraphql() (*asset, error) {
	bytes, err := typeValueGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/value.graphql", size: 2591, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x40, 0xec, 0xa6, 0xb3, 0x5b, 0x30, 0x93, 0xac, 0xc4, 0xd, 0x1c, 0x8f, 0xfd, 0xea, 0xff, 0xf6, 0x46, 0x7e, 0x86, 0x9e, 0x59, 0xe4, 0x84, 0x6, 0x24, 0xed, 0x62, 0x48, 0x8e, 0x17, 0x15, 0xa4}}
	return a, nil
}

var _typeVital_observation_recordGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x53\xc1\x6e\xa3\x30\x10\xbd\xe7\x2b\x26\xea\x79\x7f\x80\x1b\x05\x37\x20\x91\x10\x61\xd2\x6d\xb4\xaa\x90\x0b\xb3\x8d\x25\xb0\x91\x31\x91\xba\xd5\xfe\xfb\x0a\x9b\x2c\x86\x6d\xda\x55\x7b\x9c\x79\xe3\x79\x33\x6f\x9e\x51\xf4\x0d\xdc\x73\xcd\xea\xfc\xa5\x45\x78\x5d\x01\xc0\x7d\x9c\xfb\x49\x11\x91\x78\x13\xe5\x53\xfc\x7d\x11\x47\xc4\xcf\xf2\x22\xf3\x73\x32\xe5\x6e\x93\x34\x0d\x8b\x4d\x72\x08\x52\xea\xa4\xd3\x87\xe3\x86\xec\x0a\xea\xe7\x87\xcc\xcf\xe3\x74\x37\x41\x39\xd9\xee\x49\x36\x00\x4e\xfd\xfe\x90\x50\x32\xef\x9c\x11\xba\x8f\xed\xe3\x39\x10\x11\x3f\x2c\x82\x38\x0b\x0e\xdb\x3b\x92\xf9\xbb\xc0\x1d\x27\x0d\x8f\xc5\xd6\xa7\xb4\x88\x77\x21\x79\x98\x00\x7a\xa4\x79\x9a\xc4\x81\x1d\x78\x9f\x11\x4a\x67\x03\x84\xf1\xfb\xf8\x2c\x0d\x53\x3e\x88\xd2\x84\xd0\x9c\x64\x69\xb2\xfa\xbd\x5a\x71\xd1\xf6\xda\xaa\x1b\x28\x64\x1a\xe1\xd5\x14\xc3\xf9\x22\xb8\x37\x69\xbf\xb6\x08\xab\x7b\xf4\x20\x16\xda\xc6\xbd\xe0\xda\x03\xaa\x15\x17\xcf\x6b\xb0\xaf\x4b\x59\xa1\x07\x81\xac\xd8\x53\x8d\x81\x14\x25\xb6\x3a\x36\x54\x30\xb0\xea\xe1\x90\xa6\xad\x3d\x27\xf0\xea\x6f\x87\xaf\xb0\x5f\xe5\x5e\xac\x9a\x3e\x75\xa8\xce\x4c\x73\x29\x32\x2c\xa5\xaa\x2e\xbb\x9b\x06\x37\x70\xa7\x64\x03\x27\x64\xb5\x3e\x81\x32\x05\x06\x10\xac\xc1\x25\x97\xe8\xfa\x06\x55\x1c\xce\xf3\x15\x76\xa5\xe2\xed\x40\x70\x01\x4c\x5e\x96\x65\xaf\x14\x56\x1e\xe4\xbc\x19\x37\xea\x64\xaf\x4a\x5c\x2a\x28\xd5\x33\x13\xfc\x17\x73\x5b\x8c\x90\x7d\x60\x07\x37\xc4\xb3\xd8\xc8\x6c\xea\x14\xfe\x44\x85\xa2\xc4\xce\x83\x1f\xd9\x25\x88\xcc\x5a\x63\xf5\x50\xbb\x7e\x34\xd5\xb5\x2c\x47\xb2\x0d\xca\x64\x0c\xec\xcd\x56\xa3\x2c\x72\x92\xcd\x95\xc5\x49\x0f\x4c\x8e\x99\xd6\x8f\x83\xf0\x37\x57\x44\x87\x6f\xb3\xa7\xa0\x4f\x4c\x03\x53\x08\x0d\xb2\xae\x57\x58\x39\x3e\xf9\xf7\x31\x6f\xda\x1a\x1b\x14\xba\x03\x77\xa5\x8f\x6e\xb8\x74\xda\xb5\x0b\xb6\x0a\xcf\x5c\xf6\x9d\xed\x3a\x3b\xa2\xed\x66\xdd\xe9\x52\x4f\x26\xd5\x8a\x89\x8e\x95\xc3\xb4\x6f\x94\xcd\xc1\xf5\x15\x6b\x7d\xc9\x42\x97\x6f\x68\xae\x30\x2b\x7d\xcb\x57\xff\xe1\x2a\xb7\xdd\xed\xcb\x42\x8e\x8f\x6c\xf6\x9e\xc3\x3e\xe1\xad\xc1\x55\x7f\x02\x00\x00\xff\xff\x24\x3a\xac\x3b\x15\x06\x00\x00")

func typeVital_observation_recordGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_typeVital_observation_recordGraphql,
		"type/vital_observation_record.graphql",
	)
}

func typeVital_observation_recordGraphql() (*asset, error) {
	bytes, err := typeVital_observation_recordGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "type/vital_observation_record.graphql", size: 1557, mode: os.FileMode(0666), modTime: time.Unix(1573502501, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x23, 0xab, 0x54, 0x11, 0x3a, 0x8c, 0x39, 0xa1, 0xcd, 0x33, 0x74, 0xf3, 0x9f, 0x4, 0x7a, 0x85, 0xb, 0xd9, 0xe5, 0x66, 0x3e, 0xde, 0x15, 0x7b, 0xa5, 0x83, 0x1c, 0xda, 0xcc, 0x77, 0x81, 0xbe}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql":                                          schemaGraphql,
	"type/account.graphql":                                    typeAccountGraphql,
	"type/acknowledgement.graphql":                            typeAcknowledgementGraphql,
	"type/activity_record.graphql":                            typeActivity_recordGraphql,
	"type/actor.graphql":                                      typeActorGraphql,
	"type/address.graphql":                                    typeAddressGraphql,
	"type/adverse_event_record.graphql":                       typeAdverse_event_recordGraphql,
	"type/allergy_record.graphql":                             typeAllergy_recordGraphql,
	"type/application.graphql":                                typeApplicationGraphql,
	"type/appointment_record.graphql":                         typeAppointment_recordGraphql,
	"type/appointment_response.graphql":                       typeAppointment_responseGraphql,
	"type/clinical_trial.graphql":                             typeClinical_trialGraphql,
	"type/clinicalassesment_observation_record.graphql":       typeClinicalassesment_observation_recordGraphql,
	"type/codable_concept.graphql":                            typeCodable_conceptGraphql,
	"type/comment.graphql":                                    typeCommentGraphql,
	"type/common.graphql":                                     typeCommonGraphql,
	"type/condition_collection_definition.graphql":            typeCondition_collection_definitionGraphql,
	"type/condition_record.graphql":                           typeCondition_recordGraphql,
	"type/consent.graphql":                                    typeConsentGraphql,
	"type/consumer.graphql":                                   typeConsumerGraphql,
	"type/customer-feecback.graphql":                          typeCustomerFeecbackGraphql,
	"type/device.graphql":                                     typeDeviceGraphql,
	"type/device_data_source.graphql":                         typeDevice_data_sourceGraphql,
	"type/device_metric.graphql":                              typeDevice_metricGraphql,
	"type/diagnostic_report_record.graphql":                   typeDiagnostic_report_recordGraphql,
	"type/document-reference.graphql":                         typeDocumentReferenceGraphql,
	"type/encounter_record.graphql":                           typeEncounter_recordGraphql,
	"type/endpoint.graphql":                                   typeEndpointGraphql,
	"type/family_member_history_record.graphql":               typeFamily_member_history_recordGraphql,
	"type/geolocation.graphql":                                typeGeolocationGraphql,
	"type/goal_record.graphql":                                typeGoal_recordGraphql,
	"type/health_record.graphql":                              typeHealth_recordGraphql,
	"type/healthcareservice.graphql":                          typeHealthcareserviceGraphql,
	"type/imagingresult_observation_record.graphql":           typeImagingresult_observation_recordGraphql,
	"type/immunization_record.graphql":                        typeImmunization_recordGraphql,
	"type/internationalization.graphql":                       typeInternationalizationGraphql,
	"type/key_value_export_record.graphql":                    typeKey_value_export_recordGraphql,
	"type/labresult_observation_record.graphql":               typeLabresult_observation_recordGraphql,
	"type/list.graphql":                                       typeListGraphql,
	"type/location.graphql":                                   typeLocationGraphql,
	"type/meal_record.graphql":                                typeMeal_recordGraphql,
	"type/measurement.graphql":                                typeMeasurementGraphql,
	"type/medication.graphql":                                 typeMedicationGraphql,
	"type/medication_record.graphql":                          typeMedication_recordGraphql,
	"type/message.graphql":                                    typeMessageGraphql,
	"type/metadata.graphql":                                   typeMetadataGraphql,
	"type/molecular-sequence-record.graphql":                  typeMolecularSequenceRecordGraphql,
	"type/notification.graphql":                               typeNotificationGraphql,
	"type/nutritionorder_record.graphql":                      typeNutritionorder_recordGraphql,
	"type/observation_collection_definition.graphql":          typeObservation_collection_definitionGraphql,
	"type/observation_record.graphql":                         typeObservation_recordGraphql,
	"type/order.graphql":                                      typeOrderGraphql,
	"type/order_bag.graphql":                                  typeOrder_bagGraphql,
	"type/order_detail.graphql":                               typeOrder_detailGraphql,
	"type/order_event.graphql":                                typeOrder_eventGraphql,
	"type/organization.graphql":                               typeOrganizationGraphql,
	"type/personalcharacteristics_observation_record.graphql": typePersonalcharacteristics_observation_recordGraphql,
	"type/practitioner.graphql":                               typePractitionerGraphql,
	"type/procedure_record.graphql":                           typeProcedure_recordGraphql,
	"type/product.graphql":                                    typeProductGraphql,
	"type/questionnaire.graphql":                              typeQuestionnaireGraphql,
	"type/questionnaire_response.graphql":                     typeQuestionnaire_responseGraphql,
	"type/reference_range.graphql":                            typeReference_rangeGraphql,
	"type/referral_request.graphql":                           typeReferral_requestGraphql,
	"type/relationship.graphql":                               typeRelationshipGraphql,
	"type/review.graphql":                                     typeReviewGraphql,
	"type/schedule.graphql":                                   typeScheduleGraphql,
	"type/search.graphql":                                     typeSearchGraphql,
	"type/sleep_record.graphql":                               typeSleep_recordGraphql,
	"type/slot.graphql":                                       typeSlotGraphql,
	"type/socialhistory_observation_record.graphql":           typeSocialhistory_observation_recordGraphql,
	"type/source.graphql":                                     typeSourceGraphql,
	"type/source_consumer_id.graphql":                         typeSource_consumer_idGraphql,
	"type/source_record_id.graphql":                           typeSource_record_idGraphql,
	"type/time.graphql":                                       typeTimeGraphql,
	"type/timing.graphql":                                     typeTimingGraphql,
	"type/value.graphql":                                      typeValueGraphql,
	"type/vital_observation_record.graphql":                   typeVital_observation_recordGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
	"type": &bintree{nil, map[string]*bintree{
		"account.graphql":                                    &bintree{typeAccountGraphql, map[string]*bintree{}},
		"acknowledgement.graphql":                            &bintree{typeAcknowledgementGraphql, map[string]*bintree{}},
		"activity_record.graphql":                            &bintree{typeActivity_recordGraphql, map[string]*bintree{}},
		"actor.graphql":                                      &bintree{typeActorGraphql, map[string]*bintree{}},
		"address.graphql":                                    &bintree{typeAddressGraphql, map[string]*bintree{}},
		"adverse_event_record.graphql":                       &bintree{typeAdverse_event_recordGraphql, map[string]*bintree{}},
		"allergy_record.graphql":                             &bintree{typeAllergy_recordGraphql, map[string]*bintree{}},
		"application.graphql":                                &bintree{typeApplicationGraphql, map[string]*bintree{}},
		"appointment_record.graphql":                         &bintree{typeAppointment_recordGraphql, map[string]*bintree{}},
		"appointment_response.graphql":                       &bintree{typeAppointment_responseGraphql, map[string]*bintree{}},
		"clinical_trial.graphql":                             &bintree{typeClinical_trialGraphql, map[string]*bintree{}},
		"clinicalassesment_observation_record.graphql":       &bintree{typeClinicalassesment_observation_recordGraphql, map[string]*bintree{}},
		"codable_concept.graphql":                            &bintree{typeCodable_conceptGraphql, map[string]*bintree{}},
		"comment.graphql":                                    &bintree{typeCommentGraphql, map[string]*bintree{}},
		"common.graphql":                                     &bintree{typeCommonGraphql, map[string]*bintree{}},
		"condition_collection_definition.graphql":            &bintree{typeCondition_collection_definitionGraphql, map[string]*bintree{}},
		"condition_record.graphql":                           &bintree{typeCondition_recordGraphql, map[string]*bintree{}},
		"consent.graphql":                                    &bintree{typeConsentGraphql, map[string]*bintree{}},
		"consumer.graphql":                                   &bintree{typeConsumerGraphql, map[string]*bintree{}},
		"customer-feecback.graphql":                          &bintree{typeCustomerFeecbackGraphql, map[string]*bintree{}},
		"device.graphql":                                     &bintree{typeDeviceGraphql, map[string]*bintree{}},
		"device_data_source.graphql":                         &bintree{typeDevice_data_sourceGraphql, map[string]*bintree{}},
		"device_metric.graphql":                              &bintree{typeDevice_metricGraphql, map[string]*bintree{}},
		"diagnostic_report_record.graphql":                   &bintree{typeDiagnostic_report_recordGraphql, map[string]*bintree{}},
		"document-reference.graphql":                         &bintree{typeDocumentReferenceGraphql, map[string]*bintree{}},
		"encounter_record.graphql":                           &bintree{typeEncounter_recordGraphql, map[string]*bintree{}},
		"endpoint.graphql":                                   &bintree{typeEndpointGraphql, map[string]*bintree{}},
		"family_member_history_record.graphql":               &bintree{typeFamily_member_history_recordGraphql, map[string]*bintree{}},
		"geolocation.graphql":                                &bintree{typeGeolocationGraphql, map[string]*bintree{}},
		"goal_record.graphql":                                &bintree{typeGoal_recordGraphql, map[string]*bintree{}},
		"health_record.graphql":                              &bintree{typeHealth_recordGraphql, map[string]*bintree{}},
		"healthcareservice.graphql":                          &bintree{typeHealthcareserviceGraphql, map[string]*bintree{}},
		"imagingresult_observation_record.graphql":           &bintree{typeImagingresult_observation_recordGraphql, map[string]*bintree{}},
		"immunization_record.graphql":                        &bintree{typeImmunization_recordGraphql, map[string]*bintree{}},
		"internationalization.graphql":                       &bintree{typeInternationalizationGraphql, map[string]*bintree{}},
		"key_value_export_record.graphql":                    &bintree{typeKey_value_export_recordGraphql, map[string]*bintree{}},
		"labresult_observation_record.graphql":               &bintree{typeLabresult_observation_recordGraphql, map[string]*bintree{}},
		"list.graphql":                                       &bintree{typeListGraphql, map[string]*bintree{}},
		"location.graphql":                                   &bintree{typeLocationGraphql, map[string]*bintree{}},
		"meal_record.graphql":                                &bintree{typeMeal_recordGraphql, map[string]*bintree{}},
		"measurement.graphql":                                &bintree{typeMeasurementGraphql, map[string]*bintree{}},
		"medication.graphql":                                 &bintree{typeMedicationGraphql, map[string]*bintree{}},
		"medication_record.graphql":                          &bintree{typeMedication_recordGraphql, map[string]*bintree{}},
		"message.graphql":                                    &bintree{typeMessageGraphql, map[string]*bintree{}},
		"metadata.graphql":                                   &bintree{typeMetadataGraphql, map[string]*bintree{}},
		"molecular-sequence-record.graphql":                  &bintree{typeMolecularSequenceRecordGraphql, map[string]*bintree{}},
		"notification.graphql":                               &bintree{typeNotificationGraphql, map[string]*bintree{}},
		"nutritionorder_record.graphql":                      &bintree{typeNutritionorder_recordGraphql, map[string]*bintree{}},
		"observation_collection_definition.graphql":          &bintree{typeObservation_collection_definitionGraphql, map[string]*bintree{}},
		"observation_record.graphql":                         &bintree{typeObservation_recordGraphql, map[string]*bintree{}},
		"order.graphql":                                      &bintree{typeOrderGraphql, map[string]*bintree{}},
		"order_bag.graphql":                                  &bintree{typeOrder_bagGraphql, map[string]*bintree{}},
		"order_detail.graphql":                               &bintree{typeOrder_detailGraphql, map[string]*bintree{}},
		"order_event.graphql":                                &bintree{typeOrder_eventGraphql, map[string]*bintree{}},
		"organization.graphql":                               &bintree{typeOrganizationGraphql, map[string]*bintree{}},
		"personalcharacteristics_observation_record.graphql": &bintree{typePersonalcharacteristics_observation_recordGraphql, map[string]*bintree{}},
		"practitioner.graphql":                               &bintree{typePractitionerGraphql, map[string]*bintree{}},
		"procedure_record.graphql":                           &bintree{typeProcedure_recordGraphql, map[string]*bintree{}},
		"product.graphql":                                    &bintree{typeProductGraphql, map[string]*bintree{}},
		"questionnaire.graphql":                              &bintree{typeQuestionnaireGraphql, map[string]*bintree{}},
		"questionnaire_response.graphql":                     &bintree{typeQuestionnaire_responseGraphql, map[string]*bintree{}},
		"reference_range.graphql":                            &bintree{typeReference_rangeGraphql, map[string]*bintree{}},
		"referral_request.graphql":                           &bintree{typeReferral_requestGraphql, map[string]*bintree{}},
		"relationship.graphql":                               &bintree{typeRelationshipGraphql, map[string]*bintree{}},
		"review.graphql":                                     &bintree{typeReviewGraphql, map[string]*bintree{}},
		"schedule.graphql":                                   &bintree{typeScheduleGraphql, map[string]*bintree{}},
		"search.graphql":                                     &bintree{typeSearchGraphql, map[string]*bintree{}},
		"sleep_record.graphql":                               &bintree{typeSleep_recordGraphql, map[string]*bintree{}},
		"slot.graphql":                                       &bintree{typeSlotGraphql, map[string]*bintree{}},
		"socialhistory_observation_record.graphql":           &bintree{typeSocialhistory_observation_recordGraphql, map[string]*bintree{}},
		"source.graphql":                                     &bintree{typeSourceGraphql, map[string]*bintree{}},
		"source_consumer_id.graphql":                         &bintree{typeSource_consumer_idGraphql, map[string]*bintree{}},
		"source_record_id.graphql":                           &bintree{typeSource_record_idGraphql, map[string]*bintree{}},
		"time.graphql":                                       &bintree{typeTimeGraphql, map[string]*bintree{}},
		"timing.graphql":                                     &bintree{typeTimingGraphql, map[string]*bintree{}},
		"value.graphql":                                      &bintree{typeValueGraphql, map[string]*bintree{}},
		"vital_observation_record.graphql":                   &bintree{typeVital_observation_recordGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
